//===-- TriCoreInstructionSelector.cpp ---------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the InstructionSelector class for
/// TriCore.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "MCTargetDesc/TriCoreBaseInfo.h"
#include "TriCoreRegisterBankInfo.h"
#include "TriCoreSubtarget.h"
#include "TriCoreTargetMachine.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelectorImpl.h"

#define DEBUG_TYPE "tricore-isel"

using namespace llvm;

#define GET_GLOBALISEL_PREDICATE_BITSET
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATE_BITSET

namespace {

class TriCoreInstructionSelector : public InstructionSelector {
public:
  TriCoreInstructionSelector(const TriCoreTargetMachine &TM,
                             const TriCoreSubtarget &STI,
                             const TriCoreRegisterBankInfo &RBI);

  bool select(MachineInstr &I) override;
  static const char *getName() { return DEBUG_TYPE; }

private:
  bool selectImpl(MachineInstr &I, CodeGenCoverage &CoverageInfo) const;

  const TriCoreSubtarget &STI;
  const TriCoreInstrInfo &TII;
  const TriCoreRegisterInfo &TRI;
  const TriCoreRegisterBankInfo &RBI;

#define GET_GLOBALISEL_PREDICATES_DECL
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_DECL

#define GET_GLOBALISEL_TEMPORARIES_DECL
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_DECL

  void materialize32BitConstant(MachineIRBuilder &MIRBuilder, uint64_t Val,
                                const Register &DestReg,
                                MachineRegisterInfo &MRI) const;
  void materializePointer(MachineIRBuilder &MIRBuilder, uint64_t Val,
                          const Register &DestReg,
                          MachineRegisterInfo &MRI) const;

  bool constrainCopy(MachineInstr &I, MachineRegisterInfo &MRI) const;
  bool selectBrCond(MachineInstr &I, const MachineRegisterInfo &MRI) const;
  bool selectBrIndirect(MachineInstr &I, const MachineRegisterInfo &MRI) const;
  bool selectConstant(MachineInstr &I, MachineRegisterInfo &MRI) const;
  bool selectCmpAndJump(MachineInstr &I, const MachineRegisterInfo &MRI,
                        MachineIRBuilder &MIRBuilder) const;
  bool selectGlobalValue(MachineInstr &I, MachineRegisterInfo &MRI) const;
  bool selectICmp(MachineInstr &I, const MachineRegisterInfo &MRI) const;
  bool selectLoadStore(MachineInstr &I, const MachineRegisterInfo &MRI) const;
  bool selectTrunc(MachineInstr &I, MachineRegisterInfo &MRI) const;
};

} // end anonymous namespace

#define GET_GLOBALISEL_IMPL
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_IMPL

TriCoreInstructionSelector::TriCoreInstructionSelector(
    const TriCoreTargetMachine &TM, const TriCoreSubtarget &STI,
    const TriCoreRegisterBankInfo &RBI)
    : InstructionSelector(), STI(STI), TII(*STI.getInstrInfo()),
      TRI(*STI.getRegisterInfo()), RBI(RBI),

#define GET_GLOBALISEL_PREDICATES_INIT
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_INIT
#define GET_GLOBALISEL_TEMPORARIES_INIT
#include "TriCoreGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_INIT
{
}

static bool checkType(const LLT &ExpectedTy, const LLT &ActualTy,
                      const std::string &OpCode) {
  if (ActualTy != ExpectedTy) {
    LLVM_DEBUG(dbgs() << OpCode << " has type " << ActualTy << ", expected "
                      << ExpectedTy << "\n");
    return false;
  }

  return true;
}

// An OpcTable must have 10 entries (number of comparison predicates) each for
// scalars and pointers
static const unsigned NumPredicates = 10;
static const unsigned OpcTableSize = NumPredicates * 2;

// An OpcTable is a table which has a target op-code entry for each predicate,
// once for scalars and once for pointers. If for a certain predicate-type
// combination a target op-code is not available or if the operation itself is
// invalid (e.g. signed pointer comparisons) it must hold a 0. The order of the
// table is as follows:
//
// ne, eq, sge, uge, slt, ult, sgt, ugt, sle, ule
//
// repeated twice: first for scalars, then for pointers
typedef unsigned OpcTableTy[OpcTableSize];

static unsigned getOpCodeForPredicate(CmpInst::Predicate Predicate,
                                      const RegisterBank &RB,
                                      bool &SwapOperands,
                                      const OpcTableTy &OpcTable) {
  unsigned PredicateIdx;
  switch (Predicate) {
  default:
    llvm_unreachable("Unknown compare predicate!");
  // TriCore does not have GT and LE. Use LT and GE with flipped operands.
  case CmpInst::ICMP_NE:
    PredicateIdx = 0;
    break;
  case CmpInst::ICMP_EQ:
    PredicateIdx = 1;
    break;
  case CmpInst::ICMP_SLE:
    SwapOperands = true;
    LLVM_FALLTHROUGH;
  case CmpInst::ICMP_SGE:
    PredicateIdx = 2;
    break;
  case CmpInst::ICMP_ULE:
    SwapOperands = true;
    LLVM_FALLTHROUGH;
  case CmpInst::ICMP_UGE:
    PredicateIdx = 3;
    break;
  case CmpInst::ICMP_SGT:
    SwapOperands = true;
    LLVM_FALLTHROUGH;
  case CmpInst::ICMP_SLT:
    PredicateIdx = 4;
    break;
  case CmpInst::ICMP_UGT:
    SwapOperands = true;
    LLVM_FALLTHROUGH;
  case CmpInst::ICMP_ULT:
    PredicateIdx = 5;
    break;
  }

  unsigned Offset = RB.getID() == TriCore::AddrRegBankID ? 1 : 0;

  const unsigned OpcTableIdx = PredicateIdx + Offset * NumPredicates;
  assert(OpcTableIdx < OpcTableSize && "OpcTableIdx out of bounds");

  return OpcTable[OpcTableIdx];
}

static unsigned getCmpOpCodeForPredicate(CmpInst::Predicate Predicate,
                                         const RegisterBank &RB,
                                         bool &SwapOperands) {
  static const OpcTableTy OpcTable = {
      // Scalar + pointer compares
      TriCore::NE_ddd,
      TriCore::EQ_ddd,
      TriCore::GE_ddd,
      TriCore::GEU_ddd,
      TriCore::LT_ddd,
      TriCore::LTU_ddd,
      /* no GT instruction */ 0,
      /* no GT.U instruction */ 0,
      /* no LE instruction */ 0,
      /* no LE.U instruction */ 0,
      TriCore::NEA_daa,
      TriCore::EQA_daa,
      /* signed pointer compare is invalid */ 0,
      TriCore::GEA_daa,
      /* signed pointer compare is invalid */ 0,
      TriCore::LTA_daa,
      /* signed pointer compare is invalid */ 0,
      /* no GT.A instruction */ 0,
      /* signed pointer compare is invalid */ 0,
      /* no LE.A instruction */ 0,
  };

  return getOpCodeForPredicate(Predicate, RB, SwapOperands, OpcTable);
}

static unsigned getBranchOpCodeForPredicate(CmpInst::Predicate Predicate,
                                            const RegisterBank &RB,
                                            bool &SwapOperands) {
  static const OpcTableTy OpcTable = {
      // Scalar + pointer compare-and-jumps
      TriCore::JNE_ddc,
      TriCore::JEQ_ddc,
      TriCore::JGE_ddc,
      TriCore::JGEU_ddc,
      TriCore::JLT_ddc,
      TriCore::JLTU_ddc,
      /* no JGT instruction */ 0,
      /* no JGT.U instruction */ 0,
      /* no JLE instruction */ 0,
      /* no JLE.U instruction */ 0,
      TriCore::JNEA_aac,
      TriCore::JEQA_aac,
      /* signed pointer compare is invalid */ 0,
      /* no JGE.A instruction */ 0,
      /* signed pointer compare is invalid */ 0,
      /* no JLT.A instruction */ 0,
      /* signed pointer compare is invalid */ 0,
      /* no JGT.A instruction */ 0,
      /* signed pointer compare is invalid */ 0,
      /* no JLE.A instruction */ 0,
  };

  return getOpCodeForPredicate(Predicate, RB, SwapOperands, OpcTable);
}

static unsigned getLoadStoreOpCode(const unsigned Opc,
                                   const unsigned MemorySizeInBits) {
  if (Opc == TargetOpcode::G_LOAD) {
    if (MemorySizeInBits == 32)
      return TriCore::LDA_aalc;

    if (MemorySizeInBits == 64)
      return TriCore::LDDA_pac;
  } else if (Opc == TargetOpcode::G_STORE) {
    if (MemorySizeInBits == 32)
      return TriCore::STA_alca;
  }

  llvm_unreachable("Unknown Opc or Opc/MemSize combination should have been "
                   "handled by TableGen!");
}

static const TargetRegisterClass *
getRegClassForRegBank(const RegisterBank &RB, const unsigned SizeInBits) {
  unsigned RegBankID = RB.getID();

  // Return the minimum register class for the given RegisterBank and SizeInBits
  if (RegBankID == TriCore::AddrRegBankID) {
    if (SizeInBits <= 32)
      return &TriCore::AddrRegsRegClass;
    if (SizeInBits <= 64)
      return &TriCore::ExtAddrRegsRegClass;
    return nullptr;
  }
  if (RegBankID == TriCore::DataRegBankID) {
    if (SizeInBits <= 32)
      return &TriCore::DataRegsRegClass;
    if (SizeInBits <= 64)
      return &TriCore::ExtDataRegsRegClass;
    return nullptr;
  }
  return nullptr;
}

static const TargetRegisterClass *
getRegClassForTypeOnBank(const LLT Ty, const RegisterBank &RB) {
  if (RB.getID() == TriCore::DataRegBankID) {
    if (Ty.getSizeInBits() <= 32)
      return &TriCore::DataRegsRegClass;
    else if (Ty.getSizeInBits() <= 64)
      return &TriCore::ExtDataRegsRegClass;
    return nullptr;
  }

  if (RB.getID() == TriCore::AddrRegBankID) {
    if (Ty.getSizeInBits() <= 32)
      return &TriCore::AddrRegsRegClass;
    else if (Ty.getSizeInBits() <= 64)
      return &TriCore::ExtAddrRegsRegClass;
    return nullptr;
  }

  return nullptr;
}

bool TriCoreInstructionSelector::select(MachineInstr &I) {
  assert(I.getParent() && "Instruction should be in a basic block!");
  assert(I.getParent()->getParent() && "Instruction should be in a function!");

  MachineBasicBlock &MBB = *I.getParent();
  MachineFunction &MF = *MBB.getParent();
  MachineRegisterInfo &MRI = MF.getRegInfo();

  if (!isPreISelGenericOpcode(I.getOpcode())) {
    // We can run into the following problem with COPYs:
    //
    // %0 = G_FOO ...
    // %1 = COPY %0
    // %2 = COPY %1
    // %3 = G_FOO %2, ...
    //
    // This will result in %1 not being constrained to a register class: while
    // %0, %2 and %3 are being constrained through the selection of G_FOO, %1 is
    // not being restrained anywhere.
    // Therefore we need to handle COPYs here and constrain the destination
    // register by explicitly.
    if (I.isCopy())
      return constrainCopy(I, MRI);

    return true;
  }

  // make sure no implicit operands are present
  if (I.getNumOperands() != I.getNumExplicitOperands()) {
    LLVM_DEBUG(
        dbgs() << "Generic instruction has unexpected implicit operands.\n");
    return false;
  }

  // Try the TableGen'ed implementation first
  if (selectImpl(I, *CoverageInfo))
    return true;

  const unsigned OpCode = I.getOpcode();

  switch (OpCode) {
  case TargetOpcode::G_TRUNC:
    return selectTrunc(I, MRI);
  case TargetOpcode::G_GLOBAL_VALUE:
    return selectGlobalValue(I, MRI);
  case TargetOpcode::G_CONSTANT:
    return selectConstant(I, MRI);
  case TargetOpcode::G_ICMP:
    return selectICmp(I, MRI);
  case TargetOpcode::G_LOAD:
  case TargetOpcode::G_STORE:
    return selectLoadStore(I, MRI);
  case TargetOpcode::G_BRCOND:
    return selectBrCond(I, MRI);
  case TargetOpcode::G_BRINDIRECT:
    return selectBrIndirect(I, MRI);
  default:
    break;
  }

  LLVM_DEBUG(dbgs() << "Encountered unsupported instruction.\n");
  return false;
}

void TriCoreInstructionSelector::materialize32BitConstant(
    MachineIRBuilder &MIRBuilder, uint64_t Val, const Register &DestReg,
    MachineRegisterInfo &MRI) const {

  // Materialize constant using MOVU_dc and ADDIH_ddc
  uint64_t Low16 = Val & 0xFFFFu;
  uint64_t High16 = (Val >> 16u) & 0xFFFFu;

  Register MovReg = MRI.createVirtualRegister(&TriCore::DataRegsRegClass);

  auto MoveMIB =
      MIRBuilder.buildInstr(TriCore::MOVU_dc).addDef(MovReg).addImm(Low16);

  // TODO: skip the ADDIH if High16 is 0
  auto AddMIB = MIRBuilder.buildInstr(TriCore::ADDIH_ddc)
                    .addDef(DestReg)
                    .addUse(MovReg)
                    .addImm(High16);

  constrainSelectedInstRegOperands(*MoveMIB, TII, TRI, RBI);
  constrainSelectedInstRegOperands(*AddMIB, TII, TRI, RBI);
}

void TriCoreInstructionSelector::materializePointer(
    MachineIRBuilder &MIRBuilder, uint64_t Val, const Register &DestReg,
    MachineRegisterInfo &MRI) const {

  // Calculation taken from chapter 2.7 Address Arithmetic
  uint64_t Low16 = Val & 0xFFFFu;
  uint64_t High16 = ((Val + 0x8000u) >> 16u) & 0xFFFFu;

  const Register MovReg = MRI.createVirtualRegister(&TriCore::AddrRegsRegClass);

  // Materialize using MOVHA_ac and LEA_aac
  // TODO: skip LEA when Low16 is 0
  auto MovMI =
      MIRBuilder.buildInstr(TriCore::MOVHA_ac).addDef(MovReg).addImm(High16);

  auto LeaMI = MIRBuilder.buildInstr(TriCore::LEA_aac)
                   .addDef(DestReg)
                   .addUse(MovReg)
                   .addImm(Low16);

  constrainSelectedInstRegOperands(*MovMI, TII, TRI, RBI);
  constrainSelectedInstRegOperands(*LeaMI, TII, TRI, RBI);
}

bool TriCoreInstructionSelector::constrainCopy(MachineInstr &I,
                                               MachineRegisterInfo &MRI) const {
  // COPY requires SrcReg and DstReg to have matching types:
  //    if the type is still available:
  //      types must match
  //    if one of the operands has a register class set:
  //      other operand must have the same size as the register class
  //
  // Therefore we can only have the following COPYs:
  //    %1:*regbank(s*) = COPY %0:*regbank(s*)
  //
  //    %1:*regbank(s32) = COPY %0:{addr,data}regs
  //
  //    %1:{addr,data}regs = COPY %0:*regbank(s32)
  //
  //    %1:{addr,data}regs = COPY %0:{addr,data}regs
  //
  //    %1:ext{addr,data}regs = COPY %0:ext{addr,data}regs
  //
  // The following COPYs are not possible (given different register banks for
  // the 2nd example)
  //    %1:ext{addr,data}regs = COPY %0:*regbank(s32)
  // Because s32 has 32-bits but the destination is 64 bits and
  //
  //    %1:*regbank(s32) = COPY %0:ext{addr,data}regs.SubRegIdx
  // Because we are the only one who can emit a subregister copy and in that
  // case we make sure that the register banks are the same
  //
  // Therefore we can be sure that SrcSize and DstSize are the same

  const Register DstReg = I.getOperand(0).getReg();
  const Register SrcReg = I.getOperand(1).getReg();
  unsigned DstSize = RBI.getSizeInBits(DstReg, MRI, TRI);
  unsigned SrcSize = RBI.getSizeInBits(SrcReg, MRI, TRI);

  assert(DstSize == SrcSize && "Unexpected illegal subregister copy");

  // Find the correct register classes for the source and destination registers.
  const RegisterBank &DstRegBank = *RBI.getRegBank(DstReg, MRI, TRI);
  const TargetRegisterClass *DstRC = getRegClassForRegBank(DstRegBank, DstSize);

  if (!DstRC) {
    LLVM_DEBUG(dbgs() << "Unexpected register size " << DstSize << '\n');
    return false;
  }

  // Nothing to do if DstReg is a physical register
  if (Register::isPhysicalRegister(DstReg))
    return true;

  // And constrain the destination. No need to constrain the source register
  // as it will be constrained once we reach another of its uses or defs.
  if (!TriCoreRegisterBankInfo::constrainGenericRegister(DstReg, *DstRC, MRI)) {
    LLVM_DEBUG(dbgs() << "Failed to constrain COPY destination operand\n");
    return false;
  }

  return true;
}

bool TriCoreInstructionSelector::selectBrCond(
    MachineInstr &I, const MachineRegisterInfo &MRI) const {
  // Check for correct type
  const LLT &Ty = MRI.getType(I.getOperand(0).getReg());
  if (Ty.getSizeInBits() > 32) {
    LLVM_DEBUG(dbgs() << "G_BRCOND has type " << Ty
                      << ", expected at most 32-bits.\n");
    return false;
  }

  MachineIRBuilder MIRBuilder(I);

  // Check if we can select a compare-and-jump
  if (selectCmpAndJump(I, MRI, MIRBuilder))
    return true;

  // Change to JNE/JNE.A 0 depending on register bank
  const Register &CondReg = I.getOperand(0).getReg();
  const RegisterBank *CondRB = RBI.getRegBank(CondReg, MRI, TRI);

  if (!CondRB) {
    LLVM_DEBUG(dbgs() << "Could not determine register bank for G_BRCOND");
    return false;
  }

  const bool isAddrRB = CondRB->getID() == TriCore::AddrRegBankID;
  const unsigned OpCode = isAddrRB ? TriCore::JNZA_ac : TriCore::JNE_dcc;

  MachineBasicBlock *MBB = I.getOperand(1).getMBB();
  auto JumpMI = MIRBuilder.buildInstr(OpCode).addUse(CondReg);

  // There is no JNEA_acc and equally no JNZ_dc instruction. We could use 16-bit
  // variants to get rid of the immediate, however these have the downside of
  // only having a short range and needing an implicit register. Therefore we
  // use the 32-bit variants and need to add the 0 immediate conditionally.
  if (!isAddrRB)
    JumpMI = JumpMI.addImm(0);

  JumpMI = JumpMI.addMBB(MBB);
  constrainSelectedInstRegOperands(*JumpMI, TII, TRI, RBI);

  I.removeFromParent();
  return true;
}

bool TriCoreInstructionSelector::selectBrIndirect(
    MachineInstr &I, const MachineRegisterInfo &MRI) const {
  const LLT &Ty = MRI.getType(I.getOperand(0).getReg());
  if (!checkType(LLT::pointer(0, 32), Ty, "G_BRINDIRECT"))
    return false;

  // Change to JI
  I.setDesc(TII.get(TriCore::JI));
  constrainSelectedInstRegOperands(I, TII, TRI, RBI);
  return true;
}

bool TriCoreInstructionSelector::selectConstant(
    MachineInstr &I, MachineRegisterInfo &MRI) const {

  const LLT Ty = MRI.getType(I.getOperand(0).getReg());
  const unsigned DefSize = Ty.getSizeInBits();

  if (DefSize != 32 && DefSize != 64) {
    LLVM_DEBUG(dbgs() << "Constant with unsupported size.\n");
    return false;
  }

  // Get the concrete value of this constant.
  const MachineOperand &ImmOp = I.getOperand(1);
  uint64_t Val =
      ImmOp.isImm() ? ImmOp.getImm() : ImmOp.getCImm()->getZExtValue();

  MachineIRBuilder MIRBuilder(I);

  if (Ty.isPointer()) {
    // TODO: support 64-bit pointers
    if (DefSize != 32) {
      LLVM_DEBUG(dbgs() << "64-bit pointers are not supported yet.\n");
      return false;
    }

    materializePointer(MIRBuilder, Val, I.getOperand(0).getReg(), MRI);

  } else if (DefSize == 64) {
    uint64_t LowerVal = Val & 0xFFFFFFFFu;
    uint64_t HigherVal = Val >> 32u;

    // First, materialize 2 32-bit constants
    const Register LowerDestReg =
        MRI.createVirtualRegister(&TriCore::DataRegsRegClass);
    const Register HigherDestReg =
        MRI.createVirtualRegister(&TriCore::DataRegsRegClass);

    materialize32BitConstant(MIRBuilder, LowerVal, LowerDestReg, MRI);
    materialize32BitConstant(MIRBuilder, HigherVal, HigherDestReg, MRI);

    // Then merge them to a 64-bit constant using REG_SEQUENCE
    const Register DestReg = I.getOperand(0).getReg();

    MIRBuilder.buildInstr(TriCore::REG_SEQUENCE)
        .addDef(DestReg)
        .addUse(LowerDestReg)
        .addImm(TriCore::dsub0)
        .addUse(HigherDestReg)
        .addImm(TriCore::dsub1);

    TriCoreRegisterBankInfo::constrainGenericRegister(
        DestReg, TriCore::ExtDataRegsRegClass, MRI);

  } else {
    materialize32BitConstant(MIRBuilder, Val, I.getOperand(0).getReg(), MRI);
  }

  I.removeFromParent();
  return true;
}

bool TriCoreInstructionSelector::selectCmpAndJump(
    MachineInstr &I, const MachineRegisterInfo &MRI,
    MachineIRBuilder &MIRBuilder) const {

  const Register CondReg = I.getOperand(0).getReg();
  MachineBasicBlock *const DestMBB = I.getOperand(1).getMBB();
  MachineInstr *CondMI = MRI.getVRegDef(CondReg);

  // Check for G_ICMP, skipping a G_TRUNC
  if (CondMI->getOpcode() == TargetOpcode::G_TRUNC)
    CondMI = MRI.getVRegDef(CondMI->getOperand(1).getReg());

  if (CondMI->getOpcode() != TargetOpcode::G_ICMP)
    return false;

  const MachineOperand &Predicate = CondMI->getOperand(1);
  auto P = (CmpInst::Predicate)Predicate.getPredicate();

  const Register &SrcReg = CondMI->getOperand(2).getReg();
  const RegisterBank *RB = RBI.getRegBank(SrcReg, MRI, TRI);

  if (!RB) {
    LLVM_DEBUG(
        dbgs() << "Could not determine register bank for source register.\n");
    return false;
  }

  bool SwapOperands = false;
  unsigned JumpOpCode = getBranchOpCodeForPredicate(P, *RB, SwapOperands);

  if (JumpOpCode == 0) {
    // Cannot select compare-and-jump. Fall back to normal selection
    return false;
  }

  unsigned LHSIdx = SwapOperands ? 3 : 2;
  unsigned RHSIdx = SwapOperands ? 2 : 3;

  const Register LHS = CondMI->getOperand(LHSIdx).getReg();
  const Register RHS = CondMI->getOperand(RHSIdx).getReg();

  // Build the compare-and-jump instruction
  auto JumpMI =
      MIRBuilder.buildInstr(JumpOpCode).addUse(LHS).addUse(RHS).addMBB(DestMBB);
  constrainSelectedInstRegOperands(*JumpMI, TII, TRI, RBI);

  I.removeFromParent();
  return true;
}

bool TriCoreInstructionSelector::selectGlobalValue(
    MachineInstr &I, MachineRegisterInfo &MRI) const {
  // TODO: add support for small data section

  // Lower to MOVH.A and LEA
  MachineIRBuilder MIRBuilder(I);

  const Register MovAReg =
      MRI.createVirtualRegister(&TriCore::AddrRegsRegClass);
  auto GV = I.getOperand(1).getGlobal();
  const unsigned Offset = I.getOperand(1).getOffset();

  auto MovHA = MIRBuilder.buildInstr(TriCore::MOVHA_ac)
                   .addDef(MovAReg)
                   .addGlobalAddress(GV, Offset, TriCoreII::MO_HI);

  auto Lea = MIRBuilder.buildInstr(TriCore::LEA_aac)
                 .addDef(I.getOperand(0).getReg())
                 .addUse(MovAReg)
                 .addGlobalAddress(GV, Offset, TriCoreII::MO_LO);

  constrainSelectedInstRegOperands(*MovHA, TII, TRI, RBI);
  constrainSelectedInstRegOperands(*Lea, TII, TRI, RBI);

  I.removeFromParent();
  return true;
}

bool TriCoreInstructionSelector::selectICmp(
    MachineInstr &I, const MachineRegisterInfo &MRI) const {
  assert(I.getOpcode() == TargetOpcode::G_ICMP && "Expected G_ICMP!");

  // Check for the correct type
  const LLT &Ty = MRI.getType(I.getOperand(0).getReg());
  if (Ty != LLT::scalar(32)) {
    LLVM_DEBUG(dbgs() << "G_ICMP has type: " << Ty << ", expected "
                      << LLT::scalar(32) << "\n");
    return false;
  }

  // G_ICMP has 4 operands, in order: result, predicate, lhs, rhs
  assert(I.getNumOperands() == 4 && "Expected G_ICMP to have 4 operands.");

  // Get the corresponding CmpOpCode for the Predicate and operand type and
  // check if the operands need to be flipped.
  MachineOperand &Predicate = I.getOperand(1);
  auto P = (CmpInst::Predicate)Predicate.getPredicate();

  assert(I.getOperand(2).isReg() && I.getOperand(3).isReg() &&
         "Expected LHS and RHS to be registers!");

  const Register &SrcReg = I.getOperand(2).getReg();
  const RegisterBank *RB = RBI.getRegBank(SrcReg, MRI, TRI);

  if (!RB) {
    LLVM_DEBUG(
        dbgs() << "Could not determine register bank for source register.\n");
    return false;
  }

  bool SwapOperands = false;
  unsigned CmpOpCode = getCmpOpCodeForPredicate(P, *RB, SwapOperands);

  if (CmpOpCode == 0) {
    LLVM_DEBUG(dbgs() << "Cannot select G_ICMP for predicate " << Predicate
                      << " and RegBank " << *RB << ".\n");
    return false;
  }

  unsigned LHSIdx = SwapOperands ? 3 : 2;
  unsigned RHSIdx = SwapOperands ? 2 : 3;

  const Register &LHS = I.getOperand(LHSIdx).getReg();
  const Register &RHS = I.getOperand(RHSIdx).getReg();

  // Build compare instruction
  MachineIRBuilder MIRBuilder(I);

  auto CmpMI = MIRBuilder.buildInstr(CmpOpCode)
                   .addDef(I.getOperand(0).getReg())
                   .addUse(LHS)
                   .addUse(RHS);

  constrainSelectedInstRegOperands(*CmpMI, TII, TRI, RBI);

  I.removeFromParent();
  return true;
}

bool TriCoreInstructionSelector::selectLoadStore(
    MachineInstr &I, const MachineRegisterInfo &MRI) const {
  // Make sure that TableGen caught our supported cases
  const Register &ValReg = I.getOperand(0).getReg();
  const Register &PtrReg = I.getOperand(1).getReg();

  const RegisterBank &DstRB = *RBI.getRegBank(ValReg, MRI, TRI);

  if (DstRB.getID() != TriCore::AddrRegBankID)
    llvm_unreachable(
        "G_LOAD/G_STORE on DataRegBank can be handled by TableGen.");

  // Make sure that we have the correct memory size
  auto &MemOp = **I.memoperands_begin();
  const unsigned MemSizeInBits = MemOp.getSize() * 8;

  const bool IsLoad = I.getOpcode() == TargetOpcode::G_LOAD;
  const bool IsNot32Bit = MemSizeInBits != 32;
  const bool IsNot64Bit = MemSizeInBits != 64;

  // G_LOAD needs to be handled for both 32 and 64 bits
  if ((!IsLoad && IsNot32Bit) || (IsNot32Bit && IsNot64Bit)) {
    LLVM_DEBUG(dbgs() << "G_LOAD/G_STORE has memory size: " << MemSizeInBits
                      << "-bit, expected 32-bit load/store or 64-bit load.\n");
    return false;
  }

#ifndef NDEBUG
  // Sanity check that we have a pointer as address
  const RegisterBank &PtrRB = *RBI.getRegBank(PtrReg, MRI, TRI);
  assert(PtrRB.getID() == TriCore::AddrRegBankID &&
         "Load/Store pointer operand is not on AddrRegBank");
  assert(MRI.getType(PtrReg).isPointer() &&
         "Load/Store pointer operand is not a pointer");
#endif

  const unsigned NewOpc = getLoadStoreOpCode(I.getOpcode(), MemSizeInBits);

  // Build load/store
  MachineIRBuilder MIRBuilder(I);
  auto MemMI = MIRBuilder.buildInstr(NewOpc);

  if (IsLoad)
    MemMI = MemMI.addDef(ValReg);

  MemMI = MemMI.addUse(PtrReg).addImm(0);
  if (!IsLoad)
    MemMI = MemMI.addUse(ValReg);

  MemMI = MemMI.addMemOperand(&MemOp);
  constrainSelectedInstRegOperands(*MemMI, TII, TRI, RBI);

  I.removeFromParent();
  return true;
}

bool TriCoreInstructionSelector::selectTrunc(MachineInstr &I,
                                             MachineRegisterInfo &MRI) const {
  const LLT DstTy = MRI.getType(I.getOperand(0).getReg());
  const LLT SrcTy = MRI.getType(I.getOperand(1).getReg());

  // Make sure that TableGen handled our supported case
  if (DstTy == LLT::scalar(32) && SrcTy == LLT::scalar(64))
    llvm_unreachable("G_TRUNC from 64 to 32 bits can be handled by TableGen");

  const Register DstReg = I.getOperand(0).getReg();
  const Register SrcReg = I.getOperand(1).getReg();

  const RegisterBank &DstRB = *RBI.getRegBank(DstReg, MRI, TRI);
  const RegisterBank &SrcRB = *RBI.getRegBank(SrcReg, MRI, TRI);

  const TargetRegisterClass *DstRC = getRegClassForTypeOnBank(DstTy, DstRB);
  const TargetRegisterClass *SrcRC = getRegClassForTypeOnBank(SrcTy, SrcRB);

  if (!DstRC || !SrcRC) {
    LLVM_DEBUG(
        dbgs() << "Unable to determine TargetRegisterClass for G_TRUNC\n");
    return false;
  }

  // Try to constrain the registers to their classes
  if (!TriCoreRegisterBankInfo::constrainGenericRegister(DstReg, *DstRC, MRI) ||
      !TriCoreRegisterBankInfo::constrainGenericRegister(SrcReg, *SrcRC, MRI)) {
    LLVM_DEBUG(dbgs() << "Failed to constrain G_TRUNC\n");
    return false;
  }

  // Change G_TRUNC to COPY, possibly using a subregister
  if (DstRC == SrcRC) {
    // Nothing to do
  } else if ((DstRC == &TriCore::DataRegsRegClass &&
              SrcRC == &TriCore::ExtDataRegsRegClass) ||
             (DstRC == &TriCore::AddrRegsRegClass &&
              SrcRC == &TriCore::ExtAddrRegsRegClass)) {
    // Use subregister copy
    const unsigned SubRegIdx = DstRB.getID() == TriCore::DataRegBankID
                                   ? TriCore::dsub0
                                   : TriCore::asub0;
    I.getOperand(1).setSubReg(SubRegIdx);
  } else {
    LLVM_DEBUG(dbgs() << "Unhandled mismatched register classes in G_TRUNC\n");
    return false;
  }

  I.setDesc(TII.get(TargetOpcode::COPY));
  return true;
}

namespace llvm {
InstructionSelector *
createTriCoreInstructionSelector(const TriCoreTargetMachine &TM,
                                 TriCoreSubtarget &Subtarget,
                                 TriCoreRegisterBankInfo &RBI) {
  return new TriCoreInstructionSelector(TM, Subtarget, RBI);
}
} // end namespace llvm
