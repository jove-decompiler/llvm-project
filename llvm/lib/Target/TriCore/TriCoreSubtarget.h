//===-- TriCoreSubtarget.h - Define Subtarget for the TriCore ---*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the TriCore specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_TRICORE_TRICORESUBTARGET_H
#define LLVM_LIB_TARGET_TRICORE_TRICORESUBTARGET_H

#include "TriCoreFrameLowering.h"
#include "TriCoreISelLowering.h"
#include "TriCoreInstrInfo.h"
#include "TriCoreRegisterInfo.h"
#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/InlineAsmLowering.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"
#include "llvm/CodeGen/GlobalISel/RegisterBankInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "TriCoreGenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class TriCoreSubtarget : public TriCoreGenSubtargetInfo {
protected:
  virtual void anchor();
  bool allow16BitInst = true;
  bool allow32BitInst = true;

  bool HasTC161Ops = false;
  bool HasTC162Ops = false;
  bool HasTC18Ops = false;

  TriCoreFrameLowering FrameLowering;
  TriCoreInstrInfo InstrInfo;
  TriCoreRegisterInfo RegInfo;
  TriCoreTargetLowering TLInfo;

  // GlobalISel related APIs.
  std::unique_ptr<CallLowering> CallLoweringInfo;
  std::unique_ptr<InlineAsmLowering> InlineAsmLoweringInfo;
  std::unique_ptr<InstructionSelector> InstSelector;
  std::unique_ptr<LegalizerInfo> Legalizer;
  std::unique_ptr<RegisterBankInfo> RegBankInfo;

private:
  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  TriCoreSubtarget &initializeSubtargetDependencies(StringRef CPU,
                                                    StringRef FS);

public:
  // Initializes the data members to match that of the specified triple.
  TriCoreSubtarget(const Triple &TT, const std::string &CPU,
                   const std::string &FS, const TargetMachine &TM);

  const TriCoreFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const TriCoreTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const TriCoreInstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TriCoreRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }

  const CallLowering *getCallLowering() const override;
  const InlineAsmLowering *getInlineAsmLowering() const override;
  InstructionSelector *getInstructionSelector() const override;
  const LegalizerInfo *getLegalizerInfo() const override;
  const RegisterBankInfo *getRegBankInfo() const override;

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isAllow16BitInst() const { return allow16BitInst; }
  bool isAllow32BitInst() const { return allow32BitInst; }
  bool hasTC161Ops() const { return HasTC161Ops; }
  bool hasTC162Ops() const { return HasTC162Ops; }
  bool hasTC18Ops() const { return HasTC18Ops; }
};
} // namespace llvm

#endif
