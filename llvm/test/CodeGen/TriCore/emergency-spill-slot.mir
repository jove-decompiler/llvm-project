# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tricore -run-pass=prologepilog -verify-machineinstrs %s -o - | FileCheck %s

# Test that the estimation of the stack size leads to the creation of an
# emergency spill slot. Previously this would fail during register scavenging.

--- |
  define dso_local void @test_16bit_ops() {
  entry:
    %ptr0 = alloca [65536 x i32], align 4
    %ptr1 = alloca [65536 x i32], align 4
    ret void
  }

  define dso_local void @test_10bit_ops() {
  entry:
    %ptr0 = alloca [65536 x i32], align 4
    %ptr1 = alloca [65536 x i32], align 4
    ret void
  }

  define dso_local void @test_no_spill_slot() {
  entry:
    %ptr0 = alloca [65536 x i32], align 4
    %ptr1 = alloca [65536 x i32], align 4
    ret void
  }

  define dso_local void @test_incoming_args_spill() {
  entry:
    %ptr0 = alloca [65536 x i32], align 4
    %ptr1 = alloca [65536 x i32], align 4
    ret void
  }

  define dso_local void @test_incoming_args_no_spill_slot_used() {
  entry:
    %ptr0 = alloca [65536 x i32], align 4
    %ptr1 = alloca [65536 x i32], align 4
    ret void
  }

  define dso_local void @test_incoming_args_no_spill_slot_created() {
  entry:
    %ptr0 = alloca [65536 x i32], align 4
    %ptr1 = alloca [65536 x i32], align 4
    ret void
  }

...
---
name:            test_16bit_ops
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: ptr0, type: default, offset: 0, size: 32768, alignment: 4 }
  - { id: 1, name: ptr1, type: default, offset: 0, size: 8, alignment: 4 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_16bit_ops
    ; CHECK: id: 2, name: '', type: spill-slot, offset: -4, size: 4, alignment: 4
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup ADDIHA_aac $a10, 65535
    ; CHECK: $a10 = frame-setup LEA_aac $a10, 32752
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    ; CHECK: $d0 = MOV_dc 0
    ; CHECK: $d1 = MOV_dc 0
    ; CHECK: $d2 = MOV_dc 0
    ; CHECK: $d3 = MOV_dc 0
    ; CHECK: $d4 = MOV_dc 0
    ; CHECK: $d5 = MOV_dc 0
    ; CHECK: $d6 = MOV_dc 0
    ; CHECK: $d7 = MOV_dc 0
    ; CHECK: $d8 = MOV_dc 0
    ; CHECK: $d9 = MOV_dc 0
    ; CHECK: $d10 = MOV_dc 0
    ; CHECK: $d11 = MOV_dc 0
    ; CHECK: $d12 = MOV_dc 0
    ; CHECK: $d13 = MOV_dc 0
    ; CHECK: $d14 = MOV_dc 0
    ; CHECK: $d15 = MOV_dc 0
    ; CHECK: $a2 = MOVHA_ac 0
    ; CHECK: $a3 = MOVHA_ac 0
    ; CHECK: $a4 = MOVHA_ac 0
    ; CHECK: $a5 = MOVHA_ac 0
    ; CHECK: $a6 = MOVHA_ac 0
    ; CHECK: $a7 = MOVHA_ac 0
    ; CHECK: $a12 = MOVHA_ac 0
    ; CHECK: $a13 = MOVHA_ac 0
    ; CHECK: $a15 = MOVHA_ac 0
    ; CHECK: STA_alca $a14, -4, killed $a2 :: (store 4 into %stack.2)
    ; CHECK: $a2 = ADDIHA_aac $a14, 65535
    ; CHECK: $a2 = LEA_aac $a2, 32764
    ; CHECK: STW_alcd killed $a2, 0, $d4 :: (store 4)
    ; CHECK: $a2 = ADDIHA_aac $a14, 65535
    ; CHECK: $a2 = LEA_aac $a2, 32756
    ; CHECK: STW_alcd killed $a2, 0, $d4 :: (store 4)
    ; CHECK: $a2 = ADDIHA_aac $a14, 65535
    ; CHECK: $a2 = LEA_aac $a2, 32764
    ; CHECK: $d2 = LDW_dalc killed $a2, 0 :: (load 4)
    ; CHECK: $a2 = ADDIHA_aac $a14, 65535
    ; CHECK: $a2 = LEA_aac $a2, 32756
    ; CHECK: $d3 = LDW_dalc killed $a2, 0 :: (load 4)
    ; CHECK: $a2 = LDA_aalc $a14, -4 :: (load 4 from %stack.2)
    ; CHECK: RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15
    $d0 = MOV_dc 0
    $d1 = MOV_dc 0
    $d2 = MOV_dc 0
    $d3 = MOV_dc 0
    $d4 = MOV_dc 0
    $d5 = MOV_dc 0
    $d6 = MOV_dc 0
    $d7 = MOV_dc 0
    $d8 = MOV_dc 0
    $d9 = MOV_dc 0
    $d10 = MOV_dc 0
    $d11 = MOV_dc 0
    $d12 = MOV_dc 0
    $d13 = MOV_dc 0
    $d14 = MOV_dc 0
    $d15 = MOV_dc 0
    $a2 = MOVHA_ac 0
    $a3 = MOVHA_ac 0
    $a4 = MOVHA_ac 0
    $a5 = MOVHA_ac 0
    $a6 = MOVHA_ac 0
    $a7 = MOVHA_ac 0
    $a12 = MOVHA_ac 0
    $a13 = MOVHA_ac 0
    $a15 = MOVHA_ac 0
    STW_alcd %stack.0.ptr0, 0, $d4 :: (store 4)
    STW_alcd %stack.1.ptr1, 0, $d4 :: (store 4)
    $d2 = LDW_dalc %stack.0.ptr0, 0 :: (load 4)
    $d3 = LDW_dalc %stack.1.ptr1, 0 :: (load 4)
    RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15

...
---
name:            test_10bit_ops
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: ptr0, type: default, offset: 0, size: 512, alignment: 4 }
  - { id: 1, name: ptr1, type: default, offset: 0, size: 8, alignment: 4 }
body:             |
  bb.0.entry:
    liveins: $e4, $p4
    ; Tests that frame index operands inside instructions, which only take
    ; 10-bit immediates, are handled correctly

    ; CHECK-LABEL: name: test_10bit_ops
    ; CHECK: id: 2, name: '', type: spill-slot, offset: -4, size: 4, alignment: 4
    ; CHECK: liveins: $e4, $p4
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup LEA_aac $a10, -528
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    ; CHECK: $d0 = MOV_dc 0
    ; CHECK: $d1 = MOV_dc 0
    ; CHECK: $d2 = MOV_dc 0
    ; CHECK: $d3 = MOV_dc 0
    ; CHECK: $d4 = MOV_dc 0
    ; CHECK: $d5 = MOV_dc 0
    ; CHECK: $d6 = MOV_dc 0
    ; CHECK: $d7 = MOV_dc 0
    ; CHECK: $d8 = MOV_dc 0
    ; CHECK: $d9 = MOV_dc 0
    ; CHECK: $d10 = MOV_dc 0
    ; CHECK: $d11 = MOV_dc 0
    ; CHECK: $d12 = MOV_dc 0
    ; CHECK: $d13 = MOV_dc 0
    ; CHECK: $d14 = MOV_dc 0
    ; CHECK: $d15 = MOV_dc 0
    ; CHECK: $a2 = MOVHA_ac 0
    ; CHECK: $a3 = MOVHA_ac 0
    ; CHECK: $a4 = MOVHA_ac 0
    ; CHECK: $a5 = MOVHA_ac 0
    ; CHECK: $a6 = MOVHA_ac 0
    ; CHECK: $a7 = MOVHA_ac 0
    ; CHECK: $a12 = MOVHA_ac 0
    ; CHECK: $a13 = MOVHA_ac 0
    ; CHECK: $a15 = MOVHA_ac 0
    ; CHECK: STA_alca $a14, -4, killed $a6 :: (store 4 into %stack.2)
    ; CHECK: $a2 = LEA_aac $a14, -516
    ; CHECK: $e2 = LDD_eac killed $a2, 0
    ; CHECK: $a2 = LEA_aac $a14, -524
    ; CHECK: $e4 = LDD_eac killed $a2, 0
    ; CHECK: $a2 = LEA_aac $a14, -516
    ; CHECK: $p2 = LDDA_pac killed $a2, 0
    ; CHECK: $a4 = LEA_aac $a14, -524
    ; CHECK: $p4 = LDDA_pac killed $a4, 0
    ; CHECK: $a6 = LEA_aac $a14, -516
    ; CHECK: STD_ace killed $a6, 0, $e4
    ; CHECK: $a6 = LEA_aac $a14, -524
    ; CHECK: STD_ace killed $a6, 0, $e4
    ; CHECK: $a6 = LEA_aac $a14, -516
    ; CHECK: STDA_acp killed $a6, 0, $p4
    ; CHECK: $a6 = LEA_aac $a14, -524
    ; CHECK: STDA_acp killed $a6, 0, $p4
    ; CHECK: $a6 = LDA_aalc $a14, -4 :: (load 4 from %stack.2)
    ; CHECK: RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15
    $d0 = MOV_dc 0
    $d1 = MOV_dc 0
    $d2 = MOV_dc 0
    $d3 = MOV_dc 0
    $d4 = MOV_dc 0
    $d5 = MOV_dc 0
    $d6 = MOV_dc 0
    $d7 = MOV_dc 0
    $d8 = MOV_dc 0
    $d9 = MOV_dc 0
    $d10 = MOV_dc 0
    $d11 = MOV_dc 0
    $d12 = MOV_dc 0
    $d13 = MOV_dc 0
    $d14 = MOV_dc 0
    $d15 = MOV_dc 0
    $a2 = MOVHA_ac 0
    $a3 = MOVHA_ac 0
    $a4 = MOVHA_ac 0
    $a5 = MOVHA_ac 0
    $a6 = MOVHA_ac 0
    $a7 = MOVHA_ac 0
    $a12 = MOVHA_ac 0
    $a13 = MOVHA_ac 0
    $a15 = MOVHA_ac 0
    $e2 = LDD_eac %stack.0.ptr0, 0
    $e4 = LDD_eac %stack.1.ptr1, 0
    $p2 = LDDA_pac %stack.0.ptr0, 0
    $p4 = LDDA_pac %stack.1.ptr1, 0
    STD_ace %stack.0.ptr0, 0, $e4
    STD_ace %stack.1.ptr1, 0, $e4
    STDA_acp %stack.0.ptr0, 0, $p4
    STDA_acp %stack.1.ptr1, 0, $p4
    RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15

...
---
name:            test_no_spill_slot
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: ptr0, type: default, offset: 0, size: 512, alignment: 4 }
  - { id: 1, name: ptr1, type: default, offset: 0, size: 8, alignment: 4 }
body:             |
  bb.0.entry:
    liveins: $e4, $p4
    ; Tests that frame index operands inside instructions, which only take
    ; 10-bit immediates, are handled correctly

    ; CHECK-LABEL: name: test_no_spill_slot
    ; CHECK-NOT: type: spill-slot
    ; CHECK: liveins: $e4, $p4
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup LEA_aac $a10, -520
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    ; CHECK: $d0 = MOV_dc 0
    ; CHECK: $d1 = MOV_dc 0
    ; CHECK: $d2 = MOV_dc 0
    ; CHECK: $d3 = MOV_dc 0
    ; CHECK: $d4 = MOV_dc 0
    ; CHECK: $d5 = MOV_dc 0
    ; CHECK: $d6 = MOV_dc 0
    ; CHECK: $d7 = MOV_dc 0
    ; CHECK: $d8 = MOV_dc 0
    ; CHECK: $d9 = MOV_dc 0
    ; CHECK: $d10 = MOV_dc 0
    ; CHECK: $d11 = MOV_dc 0
    ; CHECK: $d12 = MOV_dc 0
    ; CHECK: $d13 = MOV_dc 0
    ; CHECK: $d14 = MOV_dc 0
    ; CHECK: $d15 = MOV_dc 0
    ; CHECK: $a2 = MOVHA_ac 0
    ; CHECK: $a3 = MOVHA_ac 0
    ; CHECK: $a4 = MOVHA_ac 0
    ; CHECK: $a5 = MOVHA_ac 0
    ; CHECK: $a6 = MOVHA_ac 0
    ; CHECK: $a7 = MOVHA_ac 0
    ; CHECK: $a12 = MOVHA_ac 0
    ; CHECK: $a13 = MOVHA_ac 0
    ; CHECK: $a15 = MOVHA_ac 0
    ; CHECK: RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15
    $d0 = MOV_dc 0
    $d1 = MOV_dc 0
    $d2 = MOV_dc 0
    $d3 = MOV_dc 0
    $d4 = MOV_dc 0
    $d5 = MOV_dc 0
    $d6 = MOV_dc 0
    $d7 = MOV_dc 0
    $d8 = MOV_dc 0
    $d9 = MOV_dc 0
    $d10 = MOV_dc 0
    $d11 = MOV_dc 0
    $d12 = MOV_dc 0
    $d13 = MOV_dc 0
    $d14 = MOV_dc 0
    $d15 = MOV_dc 0
    $a2 = MOVHA_ac 0
    $a3 = MOVHA_ac 0
    $a4 = MOVHA_ac 0
    $a5 = MOVHA_ac 0
    $a6 = MOVHA_ac 0
    $a7 = MOVHA_ac 0
    $a12 = MOVHA_ac 0
    $a13 = MOVHA_ac 0
    $a15 = MOVHA_ac 0
    RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15

...
---
name:            test_incoming_args_spill
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
fixedStack:
  - { id: 0, type: default, offset: 0, size: 1, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: ptr0, type: default, offset: 0, size: 32765, alignment: 4 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_incoming_args_spill
    ; CHECK: id: 1, name: '', type: spill-slot, offset: -4, size: 4, alignment: 4
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup ADDIHA_aac $a10, 65535
    ; CHECK: $a10 = frame-setup LEA_aac $a10, 32760
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    ; CHECK: $d0 = MOV_dc 0
    ; CHECK: $d1 = MOV_dc 0
    ; CHECK: $d2 = MOV_dc 0
    ; CHECK: $d3 = MOV_dc 0
    ; CHECK: $d4 = MOV_dc 0
    ; CHECK: $d5 = MOV_dc 0
    ; CHECK: $d6 = MOV_dc 0
    ; CHECK: $d7 = MOV_dc 0
    ; CHECK: $d8 = MOV_dc 0
    ; CHECK: $d9 = MOV_dc 0
    ; CHECK: $d10 = MOV_dc 0
    ; CHECK: $d11 = MOV_dc 0
    ; CHECK: $d12 = MOV_dc 0
    ; CHECK: $d13 = MOV_dc 0
    ; CHECK: $d14 = MOV_dc 0
    ; CHECK: $d15 = MOV_dc 0
    ; CHECK: $a2 = MOVHA_ac 0
    ; CHECK: $a3 = MOVHA_ac 0
    ; CHECK: $a4 = MOVHA_ac 0
    ; CHECK: $a5 = MOVHA_ac 0
    ; CHECK: $a6 = MOVHA_ac 0
    ; CHECK: $a7 = MOVHA_ac 0
    ; CHECK: $a12 = MOVHA_ac 0
    ; CHECK: $a13 = MOVHA_ac 0
    ; CHECK: $a15 = MOVHA_ac 0
    ; CHECK: STA_alca $a14, -4, killed $a2 :: (store 4 into %stack.1)
    ; CHECK: $a2 = ADDIHA_aac $a14, 65535
    ; CHECK: $a2 = LEA_aac $a2, 32764
    ; CHECK: STW_alcd killed $a2, 0, $d4 :: (store 4)
    ; CHECK: $a2 = ADDIHA_aac $a14, 65535
    ; CHECK: $a2 = LEA_aac $a2, 32764
    ; CHECK: $d2 = LDW_dalc killed $a2, 0 :: (load 4)
    ; CHECK: $a2 = LDA_aalc $a14, -4 :: (load 4 from %stack.1)
    ; CHECK: RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15
    $d0 = MOV_dc 0
    $d1 = MOV_dc 0
    $d2 = MOV_dc 0
    $d3 = MOV_dc 0
    $d4 = MOV_dc 0
    $d5 = MOV_dc 0
    $d6 = MOV_dc 0
    $d7 = MOV_dc 0
    $d8 = MOV_dc 0
    $d9 = MOV_dc 0
    $d10 = MOV_dc 0
    $d11 = MOV_dc 0
    $d12 = MOV_dc 0
    $d13 = MOV_dc 0
    $d14 = MOV_dc 0
    $d15 = MOV_dc 0
    $a2 = MOVHA_ac 0
    $a3 = MOVHA_ac 0
    $a4 = MOVHA_ac 0
    $a5 = MOVHA_ac 0
    $a6 = MOVHA_ac 0
    $a7 = MOVHA_ac 0
    $a12 = MOVHA_ac 0
    $a13 = MOVHA_ac 0
    $a15 = MOVHA_ac 0
    STW_alcd %stack.0.ptr0, 0, $d4 :: (store 4)
    $d2 = LDW_dalc %stack.0.ptr0, 0 :: (load 4)
    RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15

...
---
name:            test_incoming_args_no_spill_slot_used
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
fixedStack:
  - { id: 0, type: default, offset: 0, size: 1, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: ptr0, type: default, offset: 0, size: 32753, alignment: 4 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_incoming_args_no_spill_slot_used
    ; CHECK: id: 1, name: '', type: spill-slot, offset: -4, size: 4, alignment: 4
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup LEA_aac $a10, -32760
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    ; CHECK: $d0 = MOV_dc 0
    ; CHECK: $d1 = MOV_dc 0
    ; CHECK: $d2 = MOV_dc 0
    ; CHECK: $d3 = MOV_dc 0
    ; CHECK: $d4 = MOV_dc 0
    ; CHECK: $d5 = MOV_dc 0
    ; CHECK: $d6 = MOV_dc 0
    ; CHECK: $d7 = MOV_dc 0
    ; CHECK: $d8 = MOV_dc 0
    ; CHECK: $d9 = MOV_dc 0
    ; CHECK: $d10 = MOV_dc 0
    ; CHECK: $d11 = MOV_dc 0
    ; CHECK: $d12 = MOV_dc 0
    ; CHECK: $d13 = MOV_dc 0
    ; CHECK: $d14 = MOV_dc 0
    ; CHECK: $d15 = MOV_dc 0
    ; CHECK: $a2 = MOVHA_ac 0
    ; CHECK: $a3 = MOVHA_ac 0
    ; CHECK: $a4 = MOVHA_ac 0
    ; CHECK: $a5 = MOVHA_ac 0
    ; CHECK: $a6 = MOVHA_ac 0
    ; CHECK: $a7 = MOVHA_ac 0
    ; CHECK: $a12 = MOVHA_ac 0
    ; CHECK: $a13 = MOVHA_ac 0
    ; CHECK: $a15 = MOVHA_ac 0
    ; CHECK: STW_alcd $a14, -32760, $d4 :: (store 4)
    ; CHECK: $d2 = LDW_dalc $a14, -32760 :: (load 4)
    ; CHECK: RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15
    $d0 = MOV_dc 0
    $d1 = MOV_dc 0
    $d2 = MOV_dc 0
    $d3 = MOV_dc 0
    $d4 = MOV_dc 0
    $d5 = MOV_dc 0
    $d6 = MOV_dc 0
    $d7 = MOV_dc 0
    $d8 = MOV_dc 0
    $d9 = MOV_dc 0
    $d10 = MOV_dc 0
    $d11 = MOV_dc 0
    $d12 = MOV_dc 0
    $d13 = MOV_dc 0
    $d14 = MOV_dc 0
    $d15 = MOV_dc 0
    $a2 = MOVHA_ac 0
    $a3 = MOVHA_ac 0
    $a4 = MOVHA_ac 0
    $a5 = MOVHA_ac 0
    $a6 = MOVHA_ac 0
    $a7 = MOVHA_ac 0
    $a12 = MOVHA_ac 0
    $a13 = MOVHA_ac 0
    $a15 = MOVHA_ac 0
    STW_alcd %stack.0.ptr0, 0, $d4 :: (store 4)
    $d2 = LDW_dalc %stack.0.ptr0, 0 :: (load 4)
    RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15

...
---
name:            test_incoming_args_no_spill_slot_created
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
fixedStack:
  - { id: 0, type: default, offset: 0, size: 1, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: ptr0, type: default, offset: 0, size: 32752, alignment: 4 }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_incoming_args_no_spill_slot_created
    ; CHECK-NOT: type: spill-slot
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup LEA_aac $a10, -32752
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    ; CHECK: $d0 = MOV_dc 0
    ; CHECK: $d1 = MOV_dc 0
    ; CHECK: $d2 = MOV_dc 0
    ; CHECK: $d3 = MOV_dc 0
    ; CHECK: $d4 = MOV_dc 0
    ; CHECK: $d5 = MOV_dc 0
    ; CHECK: $d6 = MOV_dc 0
    ; CHECK: $d7 = MOV_dc 0
    ; CHECK: $d8 = MOV_dc 0
    ; CHECK: $d9 = MOV_dc 0
    ; CHECK: $d10 = MOV_dc 0
    ; CHECK: $d11 = MOV_dc 0
    ; CHECK: $d12 = MOV_dc 0
    ; CHECK: $d13 = MOV_dc 0
    ; CHECK: $d14 = MOV_dc 0
    ; CHECK: $d15 = MOV_dc 0
    ; CHECK: $a2 = MOVHA_ac 0
    ; CHECK: $a3 = MOVHA_ac 0
    ; CHECK: $a4 = MOVHA_ac 0
    ; CHECK: $a5 = MOVHA_ac 0
    ; CHECK: $a6 = MOVHA_ac 0
    ; CHECK: $a7 = MOVHA_ac 0
    ; CHECK: $a12 = MOVHA_ac 0
    ; CHECK: $a13 = MOVHA_ac 0
    ; CHECK: $a15 = MOVHA_ac 0
    ; CHECK: STW_alcd $a14, -32752, $d4 :: (store 4)
    ; CHECK: $d2 = LDW_dalc $a14, -32752 :: (load 4)
    ; CHECK: RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15
    $d0 = MOV_dc 0
    $d1 = MOV_dc 0
    $d2 = MOV_dc 0
    $d3 = MOV_dc 0
    $d4 = MOV_dc 0
    $d5 = MOV_dc 0
    $d6 = MOV_dc 0
    $d7 = MOV_dc 0
    $d8 = MOV_dc 0
    $d9 = MOV_dc 0
    $d10 = MOV_dc 0
    $d11 = MOV_dc 0
    $d12 = MOV_dc 0
    $d13 = MOV_dc 0
    $d14 = MOV_dc 0
    $d15 = MOV_dc 0
    $a2 = MOVHA_ac 0
    $a3 = MOVHA_ac 0
    $a4 = MOVHA_ac 0
    $a5 = MOVHA_ac 0
    $a6 = MOVHA_ac 0
    $a7 = MOVHA_ac 0
    $a12 = MOVHA_ac 0
    $a13 = MOVHA_ac 0
    $a15 = MOVHA_ac 0
    STW_alcd %stack.0.ptr0, 0, $d4 :: (store 4)
    $d2 = LDW_dalc %stack.0.ptr0, 0 :: (load 4)
    RET implicit $a11, implicit $d0, implicit $d1, implicit $d2, implicit $d3, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit $d8, implicit $d9, implicit $d10, implicit $d11, implicit $d12, implicit $d13, implicit $d14, implicit $d15, implicit $a2, implicit $a3, implicit $a4, implicit $a5, implicit $a6, implicit $a7, implicit $a12, implicit $a13, implicit $a15

...
