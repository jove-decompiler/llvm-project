# NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
# RUN: llc -O0 -mtriple=tricore -mattr=-tc18,+insn32-only \
# RUN: -global-isel -start-after=tricore-jump-tables --relocation-model=pic \
# RUN: -verify-machineinstrs -show-mc-encoding %s -o - | FileCheck %s

--- |
  define i32 @jt_test(i32 %x) {
  ; CHECK-LABEL: jt_test:
  ; CHECK:       # %bb.0: # %entry
  ; CHECK-NEXT:    mov.aa %a14, %a10 # encoding: [0x01,0xa0,0x00,0xe0]
  ; CHECK-NEXT:    lea %a10, [%a10], -16 # encoding: [0xd9,0xaa,0xf0,0xff]
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    mov %d15, 71 # encoding: [0x3b,0x70,0x04,0xf0]
  ; CHECK-NEXT:    mov %d0, 0 # encoding: [0x3b,0x00,0x00,0x00]
  ; CHECK-NEXT:    addi %d1, %d4, -4 # encoding: [0x1b,0xc4,0xff,0x1f]
  ; CHECK-NEXT:    st.w [%a14], -4, %d4 # 4-byte Folded Spill
  ; CHECK-NEXT:    # encoding: [0x59,0xe4,0xfc,0xff]
  ; CHECK-NEXT:    st.w [%a14], -8, %d1 # 4-byte Folded Spill
  ; CHECK-NEXT:    # encoding: [0x59,0xe1,0xf8,0xff]
  ; CHECK-NEXT:    st.w [%a14], -12, %d0 # 4-byte Folded Spill
  ; CHECK-NEXT:    # encoding: [0x59,0xe0,0xf4,0xff]
  ; CHECK-NEXT:    jlt.u %d15, %d1, .LBB0_5 # encoding: [0x3f,0x1f,A,0b1AAAAAAA]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_15rel
  ; CHECK-NEXT:  # %bb.1: # %entry
  ; CHECK-NEXT:    mov %d15, 0 # encoding: [0x3b,0x00,0x00,0xf0]
  ; CHECK-NEXT:    ld.w %d0, [%a14], -8 # 4-byte Folded Reload
  ; CHECK-NEXT:    # encoding: [0x19,0xe0,0xf8,0xff]
  ; CHECK-NEXT:    st.w [%a14], -12, %d15 # 4-byte Folded Spill
  ; CHECK-NEXT:    # encoding: [0x59,0xef,0xf4,0xff]
  ; CHECK-NEXT:    mov.aa %a2, %a11 # encoding: [0x01,0xb0,0x00,0x20]
  ; CHECK-NEXT:    jl .LPICOFF # encoding: [0x5d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LPICOFF, kind: fixup_24rel
  ; CHECK-NEXT:  .LPICOFF:
  ; CHECK-NEXT:    movh.a %a15, hi:.LPICOFF # encoding: [0x91,0bAAAA0000,A,0b1111AAAA]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: hi:.LPICOFF, kind: fixup_hi
  ; CHECK-NEXT:    lea %a15, [%a15], lo:.LPICOFF # encoding: [0xd9,0xff,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: lo:.LPICOFF, kind: fixup_lo2
  ; CHECK-NEXT:    sub.a %a11, %a11, %a15 # encoding: [0x01,0xfb,0x20,0xb0]
  ; CHECK-NEXT:    movh.a %a15, hi:.LJTI0_0 # encoding: [0x91,0bAAAA0000,A,0b1111AAAA]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: hi:.LJTI0_0, kind: fixup_hi
  ; CHECK-NEXT:    lea %a15, [%a15], lo:.LJTI0_0 # encoding: [0xd9,0xff,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: lo:.LJTI0_0, kind: fixup_lo2
  ; CHECK-NEXT:    add.a %a15, %a15, %a11 # encoding: [0x01,0xbf,0x10,0xf0]
  ; CHECK-NEXT:    mov.aa %a11, %a2 # encoding: [0x01,0x20,0x00,0xb0]
  ; CHECK-NEXT:    addsc.a %a15, %a15, %d0, 2 # encoding: [0x01,0xf0,0x02,0xf6]
  ; CHECK-NEXT:    ji %a15 # encoding: [0x2d,0x0f,0x30,0x00]
  ; CHECK-NEXT:  # %bb.2:
  ; CHECK-NEXT:    .p2align 2
  ; CHECK-NEXT:  .LJTI0_0:
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_4 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_4, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_4 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_4, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_4 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_4, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_3 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_3, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_3 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_3, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_3 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_3, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_3 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_3, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:    .code32
  ; CHECK-NEXT:    j .LBB0_3 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_3, kind: fixup_24rel
  ; CHECK-NEXT:  .LBB0_3: # %sw.bb
  ; CHECK-NEXT:    ld.w %d15, [%a14], -4 # 4-byte Folded Reload
  ; CHECK-NEXT:    # encoding: [0x19,0xef,0xfc,0xff]
  ; CHECK-NEXT:    addi %d0, %d15, 42 # encoding: [0x1b,0xaf,0x02,0x00]
  ; CHECK-NEXT:    st.w [%a14], -12, %d0 # 4-byte Folded Spill
  ; CHECK-NEXT:    # encoding: [0x59,0xe0,0xf4,0xff]
  ; CHECK-NEXT:    j .LBB0_5 # encoding: [0x1d,A,A,A]
  ; CHECK-NEXT:    # fixup A - offset: 0, value: .LBB0_5, kind: fixup_24rel
  ; CHECK-NEXT:  .LBB0_4: # %sw.bb1
  ; CHECK-NEXT:    ld.w %d15, [%a14], -4 # 4-byte Folded Reload
  ; CHECK-NEXT:    # encoding: [0x19,0xef,0xfc,0xff]
  ; CHECK-NEXT:    mul %d0, %d15, 3 # encoding: [0x53,0x3f,0x20,0x00]
  ; CHECK-NEXT:    st.w [%a14], -12, %d0 # 4-byte Folded Spill
  ; CHECK-NEXT:    # encoding: [0x59,0xe0,0xf4,0xff]
  ; CHECK-NEXT:  .LBB0_5: # %return
  ; CHECK-NEXT:    ld.w %d15, [%a14], -12 # 4-byte Folded Reload
  ; CHECK-NEXT:    # encoding: [0x19,0xef,0xf4,0xff]
  ; CHECK-NEXT:    mov %d2, %d15 # encoding: [0x0b,0xf0,0xf0,0x21]
  ; CHECK-NEXT:    ret # encoding: [0x0d,0x00,0x80,0x01]
  entry:
    switch i32 %x, label %return [
      i32 75, label %sw.bb
      i32 34, label %sw.bb
      i32 56, label %sw.bb
      i32 35, label %sw.bb
      i32 40, label %sw.bb
      i32 4, label %sw.bb1
      i32 5, label %sw.bb1
      i32 6, label %sw.bb1
    ]

  sw.bb:
    %add = add nsw i32 %x, 42
    br label %return

  sw.bb1:
    %mul = mul nsw i32 %x, 3
    br label %return

  return:
    %retval.0 = phi i32 [ %mul, %sw.bb1 ], [ %add, %sw.bb ], [ 0, %entry ]
    ret i32 %retval.0
  }

...
---
name:            jt_test
alignment:       4
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: '', type: spill-slot, offset: -4, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: spill-slot, offset: -8, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, name: '', type: spill-slot, offset: -12, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
jumpTable:
  kind:            inline
  entries:
    - id:              0
      blocks:          [ '%bb.3', '%bb.3', '%bb.3', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.2', '%bb.2', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.2', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.2', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.2' ]
body:             |
  bb.0.entry:
    successors: %bb.4(0x40000000), %bb.1(0x40000000)
    liveins: $d4

    $a14 = frame-setup MOVAA_aa $a10
    $a10 = frame-setup LEA_aac $a10, -16
    frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    $d15 = MOV_dc 71
    $d0 = MOV_dc 0
    $d1 = ADDI_ddc $d4, -4, implicit-def $psw
    STW_alcd $a14, -4, killed $d4 :: (store 4 into %stack.0)
    STW_alcd $a14, -8, $d1 :: (store 4 into %stack.1)
    STW_alcd $a14, -12, killed $d0 :: (store 4 into %stack.2)
    JLTU_ddc killed $d15, killed $d1, %bb.4

  bb.1.entry:
    successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)

    $d15 = MOV_dc 0
    $d0 = LDW_dalc $a14, -8 :: (load 4 from %stack.1)
    STW_alcd $a14, -12, killed $d15 :: (store 4 into %stack.2)
    $a15, $a2 = JIJumpTableTC16XPIC killed $d0, target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0

  bb.5:
    successors:

    JUMPTABLE_INSTS %jump-table.0, 288

  bb.2.sw.bb:
    successors: %bb.4(0x80000000)

    $d15 = LDW_dalc $a14, -4 :: (load 4 from %stack.0)
    $d0 = nsw ADDI_ddc killed $d15, 42, implicit-def $psw
    STW_alcd $a14, -12, killed $d0 :: (store 4 into %stack.2)
    J %bb.4

  bb.3.sw.bb1:
    successors: %bb.4(0x80000000)

    $d15 = LDW_dalc $a14, -4 :: (load 4 from %stack.0)
    $d0 = nsw MUL_ddc killed $d15, 3, implicit-def $psw
    STW_alcd $a14, -12, killed $d0 :: (store 4 into %stack.2)

  bb.4.return:
    $d15 = LDW_dalc $a14, -12 :: (load 4 from %stack.2)
    $d2 = MOV_dd killed $d15
    RET implicit $a11, implicit killed $d2

...
