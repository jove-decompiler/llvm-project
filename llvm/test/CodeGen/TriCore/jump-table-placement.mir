# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tricore -global-isel -run-pass=tricore-jump-tables -verify-machineinstrs %s -o - | FileCheck %s

--- |
  define i32 @jt_test(i32 %x) {
  entry:
    switch i32 %x, label %return [
      i32 75, label %sw.bb
      i32 34, label %sw.bb
      i32 56, label %sw.bb
      i32 35, label %sw.bb
      i32 40, label %sw.bb
      i32 4, label %sw.bb1
      i32 5, label %sw.bb1
      i32 6, label %sw.bb1
    ]

  sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry
    %add = add nsw i32 %x, 42
    br label %return

  sw.bb1:                                           ; preds = %entry, %entry, %entry
    %mul = mul nsw i32 %x, 3
    br label %return

  return:                                           ; preds = %sw.bb1, %sw.bb, %entry
    %retval.0 = phi i32 [ %mul, %sw.bb1 ], [ %add, %sw.bb ], [ 0, %entry ]
    ret i32 %retval.0
  }

  define i32 @jt_test_2(i32 %x) {
  entry:
    switch i32 %x, label %return [
      i32 75, label %sw.bb
      i32 34, label %sw.bb
      i32 56, label %sw.bb
      i32 35, label %sw.bb
      i32 40, label %sw.bb
      i32 4, label %sw.bb1
      i32 5, label %sw.bb1
      i32 6, label %sw.bb1
    ]

  sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry
    %add = add nsw i32 %x, 42
    br label %sw2.entry

  sw.bb1:                                           ; preds = %entry, %entry, %entry
    %mul = mul nsw i32 %x, 3
    br label %sw2.entry

  sw2.entry:
    switch i32 %x, label %return [
      i32 0, label %sw2.bb
      i32 1, label %sw2.bb
      i32 2, label %sw2.bb
      i32 3, label %sw2.bb1
      i32 4, label %sw2.bb1
      i32 5, label %sw2.bb1
    ]

  sw2.bb:
    br label %return

  sw2.bb1:
    br label %return

  return:                                           ; preds = %sw2.bb1, %sw2.bb, %sw2.entry, %entry
    %retval.0 = phi i32 [ 0, %sw2.bb1 ], [ 0, %sw2.bb ], [ 0, %sw2.entry ], [ 0, %entry ]
    ret i32 %retval.0
  }
  define i32 @jt_test_3(i32 %x) {
  entry:
    switch i32 %x, label %cntd [
      i32 75, label %sw.bb
      i32 34, label %sw.bb
      i32 56, label %sw.bb
      i32 35, label %sw.bb
      i32 40, label %sw.bb
      i32 4, label %sw.bb1
      i32 5, label %sw.bb1
      i32 6, label %sw.bb1
    ]

  cntd:
    switch i32 %x, label %return [
      i32 75, label %sw.bb
      i32 34, label %sw.bb
      i32 56, label %sw.bb
      i32 35, label %sw.bb
      i32 40, label %sw.bb
      i32 4, label %sw.bb1
      i32 5, label %sw.bb1
      i32 6, label %sw.bb1
    ]

  sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry
    %add = add nsw i32 %x, 42
    br label %return

  sw.bb1:                                           ; preds = %entry, %entry, %entry
    %mul = mul nsw i32 %x, 3
    br label %return

  return:                                           ; preds = %sw.bb1, %sw.bb, %entry
    %retval.0 = phi i32 [ %mul, %sw.bb1 ], [ %add, %sw.bb ], [ 0, %cntd ]
    ret i32 %retval.0
  }

...

---
name:            jt_test
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
jumpTable:
  kind:            inline
  entries:
    - id:              0
      blocks:          [ '%bb.2', '%bb.2', '%bb.2', '%bb.2', '%bb.2', '%bb.3',
                         '%bb.3', '%bb.3' ]
body:             |
  ; CHECK-LABEL: name: jt_test
  ; CHECK: bb.0.entry:
  ; CHECK:   liveins: $d4
  ; CHECK:   $a14 = frame-setup MOVAA_aa $a10
  ; CHECK:   $a15 = JIJumpTable killed $d4, target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0
  ; CHECK: bb.5:
  ; CHECK:   successors:
  ; CHECK:   JUMPTABLE_INSTS %jump-table.0, 32
  ; CHECK: bb.1.entry:
  ; CHECK:   successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)
  ; CHECK:   J %bb.4
  ; CHECK: bb.2.sw.bb:
  ; CHECK:   successors: %bb.4(0x80000000)
  ; CHECK:   J %bb.4
  ; CHECK: bb.3.sw.bb1:
  ; CHECK:   successors: %bb.4(0x80000000)
  ; CHECK: bb.4.return:
  ; CHECK:   RET implicit $a11
  bb.0.entry:
    liveins: $d4

    $a14 = frame-setup MOVAA_aa $a10
    $a15 = JIJumpTable killed $d4, target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0

  bb.1.entry:
    successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)

    J %bb.4

  bb.2.sw.bb:
    successors: %bb.4(0x80000000)

    J %bb.4

  bb.3.sw.bb1:
    successors: %bb.4(0x80000000)


  bb.4.return:
    RET implicit $a11

...

---
name:            jt_test_2
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
jumpTable:
  kind:            inline
  entries:
    - id:              0
      blocks:          [ '%bb.2', '%bb.2', '%bb.2', '%bb.2', '%bb.2', '%bb.3',
                         '%bb.3', '%bb.3' ]
    - id:              1
      blocks:          [ '%bb.6', '%bb.6', '%bb.6', '%bb.7', '%bb.7', '%bb.7' ]
body:             |
  ; CHECK-LABEL: name: jt_test_2
  ; CHECK: bb.0.entry:
  ; CHECK:   liveins: $d4
  ; CHECK:   $a14 = frame-setup MOVAA_aa $a10
  ; CHECK:   $a15 = JIJumpTable $d4, target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0
  ; CHECK: bb.9:
  ; CHECK:   successors:
  ; CHECK:   JUMPTABLE_INSTS %jump-table.0, 32
  ; CHECK: bb.1.entry:
  ; CHECK:   successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)
  ; CHECK:   J %bb.4
  ; CHECK: bb.2.sw.bb:
  ; CHECK:   successors: %bb.4(0x80000000)
  ; CHECK:   J %bb.4
  ; CHECK: bb.3.sw.bb1:
  ; CHECK:   successors: %bb.4(0x80000000)
  ; CHECK: bb.4.sw2.entry:
  ; CHECK:   liveins: $d4
  ; CHECK:   $a15 = JIJumpTable killed $d4, target-flags(tricore-hi) %jump-table.1, target-flags(tricore-lo) %jump-table.1
  ; CHECK: bb.8:
  ; CHECK:   successors:
  ; CHECK:   JUMPTABLE_INSTS %jump-table.1, 24
  ; CHECK: bb.5.sw2.bb:
  ; CHECK:   successors: %bb.7(0x80000000)
  ; CHECK:   J %bb.7
  ; CHECK: bb.6.sw2.bb1:
  ; CHECK:   successors: %bb.7(0x80000000)
  ; CHECK:   J %bb.7
  ; CHECK: bb.7.return:
  ; CHECK:   RET implicit $a11
  bb.0.entry:
    liveins: $d4

    $a14 = frame-setup MOVAA_aa $a10
    $a15 = JIJumpTable $d4, target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0

  bb.1.entry:
    successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)

    J %bb.4

  bb.2.sw.bb:
    successors: %bb.4(0x80000000)

    J %bb.4

  bb.3.sw.bb1:
    successors: %bb.4(0x80000000)


  bb.4.sw2.entry:
    liveins: $d4

    $a15 = JIJumpTable killed $d4, target-flags(tricore-hi) %jump-table.1, target-flags(tricore-lo) %jump-table.1

  bb.6.sw2.bb:
    J %bb.5

  bb.7.sw2.bb1:
    J %bb.5

  bb.5.return:
    RET implicit $a11

...

---
name:            jt_test_3
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
jumpTable:
  kind:            inline
  entries:
    - id:              0
      blocks:          [ '%bb.2', '%bb.2', '%bb.2', '%bb.2', '%bb.2', '%bb.3',
                         '%bb.3', '%bb.3' ]
body:             |
  ; CHECK-LABEL: name: jt_test_3
  ; CHECK: bb.0.entry:
  ; CHECK:   successors: %bb.1(0x80000000)
  ; CHECK:   liveins: $d4, $d5
  ; CHECK:   $a14 = frame-setup MOVAA_aa $a10
  ; CHECK:   JNE_ddc $d4, $d5, %bb.1
  ; CHECK:   $a15 = JIJumpTable $d4, target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0
  ; CHECK: bb.1.cntd:
  ; CHECK:   liveins: $d4
  ; CHECK:   $a15, $a2 = JIJumpTableTC16XPIC killed $d4, target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0
  ; CHECK: bb.6:
  ; CHECK:   successors:
  ; CHECK:   JUMPTABLE_INSTS %jump-table.0, 32
  ; CHECK: bb.2.entry:
  ; CHECK:   successors: %bb.4(0x2aaaaaab), %bb.5(0x2aaaaaab), %bb.3(0x2aaaaaab)
  ; CHECK:   J %bb.5
  ; CHECK: bb.3.sw.bb:
  ; CHECK:   successors: %bb.5(0x80000000)
  ; CHECK:   J %bb.5
  ; CHECK: bb.4.sw.bb1:
  ; CHECK:   successors: %bb.5(0x80000000)
  ; CHECK: bb.5.return:
  ; CHECK:   RET implicit $a11
  bb.0.entry:
    liveins: $d4, $d5

    $a14 = frame-setup MOVAA_aa $a10
    JNE_ddc $d4, $d5, %bb.5
    $a15 = JIJumpTable $d4, target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0

  bb.5.cntd:
    liveins: $d4

    $a15, $a2 = JIJumpTableTC16XPIC killed $d4, target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0

  bb.1.entry:
    successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)

    J %bb.4

  bb.2.sw.bb:
    successors: %bb.4(0x80000000)

    J %bb.4

  bb.3.sw.bb1:
    successors: %bb.4(0x80000000)


  bb.4.return:
    RET implicit $a11

...
