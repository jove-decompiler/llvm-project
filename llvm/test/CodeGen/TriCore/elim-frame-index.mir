# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tricore -run-pass=prologepilog -verify-machineinstrs %s -o - | FileCheck %s

--- |
  %struct.bar = type { i32, i32 }

  define dso_local void @test_local_vars() {
  entry:
    %ptr0 = alloca [65536 x i32], align 4
    %ptr1 = alloca [65536 x i32], align 4
    %ptr2 = alloca %struct.bar, align 4
    ret void
  }

  define dso_local void @test_incoming_args() {
  entry:
    unreachable
  }

  define dso_local void @test_10bit_imms() {
  entry:
    %ptr0 = alloca [65536 x i32], align 4
    %ptr1 = alloca [65536 x i32], align 4
    ret void
  }

...
---
name:            test_local_vars
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: ptr0, type: default, offset: 0, size: 262144, alignment: 4 }
  - { id: 1, name: ptr1, type: default, offset: 0, size: 262144, alignment: 4 }
  - { id: 2, name: ptr2, type: default, offset: 0, size: 8, alignment: 4 }
body:             |
  bb.0.entry:
    liveins: $d4
    ; Tests that local variables are referenced using the FP with a negative
    ; offset

    ; CHECK-LABEL: name: test_local_vars
    ; CHECK:      stackSize: 524304
    ; CHECK:      id: 0, name: ptr0, type: default, offset: -262148, size: 262144
    ; CHECK:      id: 1, name: ptr1, type: default, offset: -524292, size: 262144
    ; CHECK:      id: 2, name: ptr2, type: default, offset: -524300, size: 8
    ; CHECK:      id: 3, name: '', type: spill-slot, offset: -4, size: 4
    ; CHECK:      liveins: $d4
    ; CHECK:      $a14 = frame-setup MOVAA_aa $a10
    ; CHECK:      $a10 = frame-setup ADDIHA_aac $a10, 65528
    ; CHECK:      $a10 = frame-setup LEA_aac $a10, -16
    ; CHECK:      frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    ; CHECK:      $a2 = ADDIHA_aac $a14, 65532
    ; CHECK-NEXT: $a2 = LEA_aac $a2, -4
    ; CHECK:      $a3 = ADDIHA_aac $a14, 65528
    ; CHECK-NEXT: $a3 = LEA_aac $a3, -4
    ; CHECK:      $a4 = ADDIHA_aac $a14, 65528
    ; CHECK-NEXT: $a4 = LEA_aac $a4, -12
    ; CHECK:      $a15 = ADDIHA_aac $a14, 65532
    ; CHECK-NEXT: $a15 = LEA_aac $a15, -4
    ; CHECK-NEXT: STW_alcd killed $a15, 0, $d4 :: (store 4)
    ; CHECK:      $a15 = ADDIHA_aac $a14, 65528
    ; CHECK-NEXT: $a15 = LEA_aac $a15, -4
    ; CHECK-NEXT: STW_alcd killed $a15, 0, $d4 :: (store 4)
    ; CHECK:      $a15 = ADDIHA_aac $a14, 65528
    ; CHECK-NEXT: $a15 = LEA_aac $a15, -12
    ; CHECK-NEXT: STW_alcd killed $a15, 0, killed $d4 :: (store 4)
    ; CHECK:      $a15 = ADDIHA_aac $a14, 65532
    ; CHECK-NEXT: $a15 = LEA_aac $a15, -4
    ; CHECK-NEXT: $d2 = LDW_dalc killed $a15, 0 :: (load 4)
    ; CHECK:      $a15 = ADDIHA_aac $a14, 65528
    ; CHECK-NEXT: $a15 = LEA_aac $a15, -4
    ; CHECK-NEXT: $d3 = LDW_dalc killed $a15, 0 :: (load 4)
    ; CHECK:      $a15 = ADDIHA_aac $a14, 65528
    ; CHECK-NEXT: $a15 = LEA_aac $a15, -12
    ; CHECK-NEXT: $d4 = LDW_dalc killed $a15, 0 :: (load 4)
    $a2 = LEA_aac %stack.0.ptr0, 0
    $a3 = LEA_aac %stack.1.ptr1, 0
    $a4 = LEA_aac %stack.2.ptr2, 0
    STW_alcd %stack.0.ptr0, 0, $d4 :: (store 4)
    STW_alcd %stack.1.ptr1, 0, $d4 :: (store 4)
    STW_alcd %stack.2.ptr2, 0, killed $d4 :: (store 4)
    $d2 = LDW_dalc %stack.0.ptr0, 0 :: (load 4)
    $d3 = LDW_dalc %stack.1.ptr1, 0 :: (load 4)
    $d4 = LDW_dalc %stack.2.ptr2, 0 :: (load 4)

...
---
name:            test_incoming_args
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
fixedStack:
  - { id: 0, type: default, offset: 8, size: 4, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, type: default, offset: 0, size: 4, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.0.entry:
    liveins: $d4, $d5, $d6, $d7
    ; Tests that incoming arguments are referenced from the FP with a positive
    ; offset


    ; CHECK-LABEL: name: test_incoming_args
    ; CHECK:     stackSize: 0
    ; CHECK-DAG: id: [[ID0:[0-2]]], type: default, offset: 8, size: 4
    ; CHECK-DAG: id: [[ID1:[0-2]]], type: default, offset: 4, size: 4
    ; CHECK-DAG: id: [[ID2:[0-2]]], type: default, offset: 0, size: 4
    ; CHECK:     liveins: $d4, $d5, $d6, $d7
    ; CHECK:     $a14 = frame-setup MOVAA_aa $a10
    ; CHECK:     $d15 = LDW_dalc $a14, 0 :: (invariant load 4 from %fixed-stack.0, align 1)
    ; CHECK:     $d8 = LDW_dalc $a14, 4 :: (invariant load 4 from %fixed-stack.1, align 1)
    ; CHECK:     $d9 = LDW_dalc $a14, 8 :: (invariant load 4 from %fixed-stack.2, align 1)
    $d15 = LDW_dalc %fixed-stack.2, 0 :: (invariant load 4 from %fixed-stack.2, align 1)
    $d8 = LDW_dalc %fixed-stack.1, 0 :: (invariant load 4 from %fixed-stack.1, align 1)
    $d9 = LDW_dalc %fixed-stack.0, 0 :: (invariant load 4 from %fixed-stack.0, align 1)

...
---
name:            test_10bit_imms
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: ptr0, type: default, offset: 0, size: 512, alignment: 4 }
  - { id: 1, name: ptr1, type: default, offset: 0, size: 1, alignment: 4 }
body:             |
  bb.0.entry:
    liveins: $e4, $p4
    ; Tests that frame index operands inside instructions, which only take
    ; 10-bit immediates, are handled correctly

    ; CHECK-LABEL: name: test_10bit_imms
    ; CHECK:      stackSize: 520
    ; CHECK:      id: 0, name: ptr0, type: default, offset: -516, size: 512
    ; CHECK:      id: 1, name: ptr1, type: default, offset: -520, size: 1
    ; CHECK:      id: 2, name: '', type: spill-slot, offset: -4, size: 4
    ; CHECK:      liveins: $e4, $p4
    ; CHECK:      $a14 = frame-setup MOVAA_aa $a10
    ; CHECK:      $a10 = frame-setup LEA_aac $a10, -520
    ; CHECK:      frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    ; CHECK:      $a15 = LEA_aac $a14, -516
    ; CHECK-NEXT: STD_ace killed $a15, 0, $e4
    ; CHECK:      $a15 = LEA_aac $a14, -520
    ; CHECK-NEXT: STD_ace killed $a15, 0, $e4
    ; CHECK:      $a15 = LEA_aac $a14, -516
    ; CHECK-NEXT: STDA_acp killed $a15, 0, $p4
    ; CHECK:      $a15 = LEA_aac $a14, -520
    ; CHECK-NEXT: STDA_acp killed $a15, 0, $p4
    ; CHECK:      $a15 = LEA_aac $a14, -516
    ; CHECK-NEXT: $e2 = LDD_eac killed $a15, 0
    ; CHECK:      $a15 = LEA_aac $a14, -520
    ; CHECK-NEXT: $e4 = LDD_eac killed $a15, 0
    ; CHECK:      $a15 = LEA_aac $a14, -516
    ; CHECK-NEXT: $p2 = LDDA_pac killed $a15, 0
    ; CHECK:      $a15 = LEA_aac $a14, -520
    ; CHECK-NEXT: $p4 = LDDA_pac killed $a15, 0
    STD_ace %stack.0.ptr0, 0, $e4
    STD_ace %stack.1.ptr1, 0, $e4
    STDA_acp %stack.0.ptr0, 0, $p4
    STDA_acp %stack.1.ptr1, 0, $p4
    $e2 = LDD_eac %stack.0.ptr0, 0
    $e4 = LDD_eac %stack.1.ptr1, 0
    $p2 = LDDA_pac %stack.0.ptr0, 0
    $p4 = LDDA_pac %stack.1.ptr1, 0

...
