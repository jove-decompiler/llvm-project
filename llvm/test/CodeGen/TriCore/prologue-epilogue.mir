# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tricore -run-pass=prologepilog -verify-machineinstrs %s -o - | FileCheck %s

--- |
  ; ModuleID = 'foo.ll'
  source_filename = "foo.c"
  target datalayout = "e-m:e-i64:32-p:32:32-f64:32-n32-a:0:32-S64"
  target triple = "tricore"

  ; Function Attrs: noinline nounwind optnone
  define dso_local i32 @stackempty() #0 {
  entry:
    ret i32 42
  }

  ; Function Attrs: noinline nounwind optnone
  define dso_local i32 @stack16bitsigned() #0 {
  entry:
    %foo = alloca [32767 x i8], align 1
    ret i32 42
  }

  ; Function Attrs: noinline nounwind optnone
  define dso_local i32 @stack16bitunsigned() #0 {
  entry:
    %foo = alloca [65535 x i8], align 1
    ret i32 42
  }

  ; Function Attrs: noinline nounwind optnone
  define dso_local i32 @stack32bitsigned() #0 {
  entry:
    %foo = alloca [2147483647 x i8], align 1
    ret i32 42
  }

  ; Function Attrs: noinline nounwind optnone
  define dso_local i32 @stack32bitrandom() #0 {
  entry:
    %foo = alloca [19088743 x i8], align 1
    ret i32 42
  }

  define dso_local void @varsize(i32 %a) #0 {
  entry:
    %call = tail call i32 @func() #2
    %vla = alloca i32, i32 %call, align 4
    call void @func2(i32* nonnull %vla, i32 %a, i32 %a, i32 %a, i32 %a, i32 %a, i32 %a) #2
    ret void
  }

  define dso_local i32 @reservedFrameUsesBiggerCallFrameSize() #0 {
  entry:
    unreachable
  }

  define dso_local i32 @noCFIneeded() {
  entry:
    ret i32 42
  }

  define dso_local i32 @defCfaFP() {
  entry:
    %foo = alloca [32767 x i8], align 1
    ret i32 42
  }

  declare dso_local i32 @func() local_unnamed_addr #1

  declare dso_local void @func2(i32*, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1

  declare dso_local i32 @biggerCallFrame()

  declare dso_local i32 @smallerCallFrame()

  attributes #0 = { noinline nounwind optnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

  !llvm.module.flags = !{!0, !2, !3}
  !llvm.ident = !{!1}

  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{!"clang version 10.0.0 (ssh://git@bitbucket-server.software.htc:7999/toolchain/llvm-project.git bc1a0f0793ee40c1c1a78182b5457aae9ccdb2f2)"}
  !2 = !{i32 2, !"Dwarf Version", i32 4}
  !3 = !{i32 2, !"Debug Info Version", i32 3}

...
---
name:            stackempty
alignment:       1
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: stackempty
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $d2 = MOVU_dc 42
    ; CHECK: RET implicit $a11, implicit killed $d2
    $d2 = MOVU_dc 42
    RET implicit $a11, implicit killed $d2

...
---
name:            stack16bitsigned
alignment:       1
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: foo, type: default, offset: 0, size: 32767, alignment: 1,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: stack16bitsigned
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup LEA_aac $a10, -32768
    ; CHECK: $d2 = MOVU_dc 42
    ; CHECK: RET implicit $a11, implicit killed $d2
    $d2 = MOVU_dc 42
    RET implicit $a11, implicit killed $d2

...
---
name:            stack16bitunsigned
alignment:       1
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: foo, type: default, offset: 0, size: 65535, alignment: 1,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: stack16bitunsigned
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup ADDIHA_aac $a10, 65535
    ; CHECK: $d2 = MOVU_dc 42
    ; CHECK: RET implicit $a11, implicit killed $d2
    $d2 = MOVU_dc 42
    RET implicit $a11, implicit killed $d2

...
---
name:            stack32bitsigned
alignment:       1
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: foo, type: default, offset: 0, size: 2147483647, alignment: 1,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: stack32bitsigned
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup ADDIHA_aac $a10, 32768
    ; CHECK: $d2 = MOVU_dc 42
    ; CHECK: RET implicit $a11, implicit killed $d2
    $d2 = MOVU_dc 42
    RET implicit $a11, implicit killed $d2

...
---
name:            stack32bitrandom
alignment:       1
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: foo, type: default, offset: 0, size: 19088743, alignment: 1,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: stack32bitrandom
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup ADDIHA_aac $a10, 65245
    ; CHECK: $a10 = frame-setup LEA_aac $a10, 47768
    ; CHECK: $d2 = MOVU_dc 42
    ; CHECK: RET implicit $a11, implicit killed $d2
    $d2 = MOVU_dc 42
    RET implicit $a11, implicit killed $d2

...
---
name:            varsize
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: vla, type: variable-sized, offset: 0, alignment: 1,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.0.entry:
    liveins: $d4
    ; Tests that no call frame is reserved and that the stack pointer is
    ; dynamically updated in case of a variable-sized object.
    ;
    ; The GlobalISel legalizer takes care of lowering a G_DYN_STACKALLOC to
    ; a series of instructions that decrease and align the SP. Therefore in this
    ; test we are only interested in the generated prolog.
    ;
    ; CHECK-LABEL: name: varsize
    ; CHECK: liveins: $d4
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $d15 = COPY $d4
    ; CHECK: $d8 = MOV_dc 4
    ; CHECK: CALL @func, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit-def $d2
    ; CHECK: $d0 = MUL_ddd killed $d2, killed $d8, implicit-def $psw
    ; CHECK: $d1 = MOV_dc 7
    ; CHECK: $d0 = nuw ADD_ddd killed $d0, killed $d1, implicit-def $psw
    ; CHECK: $d1 = MOV_dc -8
    ; CHECK: $d0 = AND_ddd killed $d0, killed $d1
    ; CHECK: $d1 = COPY $a10
    ; CHECK: $d0 = SUB_ddd killed $d1, killed $d0, implicit-def $psw
    ; CHECK: $a10 = COPY $d0
    ; CHECK: $a10 = LEA_aac $a10, -8
    ; CHECK: $a4 = COPY killed $d0
    ; CHECK: $d4 = COPY $d15
    ; CHECK: $d5 = COPY $d15
    ; CHECK: $d6 = COPY $d15
    ; CHECK: $d7 = COPY $d15
    ; CHECK: STW_alcd killed $a10, 0, $d15 :: (store 4 into stack, align 1)
    ; CHECK: STW_alcd killed $a10, 4, killed $d15 :: (store 4 into stack + 4, align 1)
    ; CHECK: CALL @func2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit killed $a4, implicit $d4, implicit killed $d5, implicit killed $d6, implicit killed $d7
    ; CHECK: $a10 = LEA_aac $a10, 8
    ; CHECK: RET implicit $a11
    $d15 = COPY $d4
    $d8 = MOV_dc 4
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @func, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit-def $d2
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    $d0 = MUL_ddd killed $d2, killed $d8, implicit-def $psw
    $d1 = MOV_dc 7
    $d0 = nuw ADD_ddd killed $d0, killed $d1, implicit-def $psw
    $d1 = MOV_dc -8
    $d0 = AND_ddd killed $d0, killed $d1
    $d1 = COPY $a10
    $d0 = SUB_ddd killed $d1, killed $d0, implicit-def $psw
    $a10 = COPY $d0
    ADJCALLSTACKDOWN 8, 0, implicit-def $a10, implicit $a10
    $a4 = COPY killed $d0
    $d4 = COPY $d15
    $d5 = COPY $d15
    $d6 = COPY $d15
    $d7 = COPY $d15
    STW_alcd killed $a10, 0, $d15 :: (store 4 into stack, align 1)
    STW_alcd killed $a10, 4, killed $d15 :: (store 4 into stack + 4, align 1)
    CALL @func2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit killed $a4, implicit $d4, implicit killed $d5, implicit killed $d6, implicit killed $d7
    ADJCALLSTACKUP 8, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            reservedFrameUsesBiggerCallFrameSize
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $d4
    ; Tests the following C code:
    ;
    ; extern int bar(int a, int b, int c, int d, int e, int f, int g, int h, int i);
    ; extern int bar2(int a, int b, int c, int d, int e);
    ; int foo(int a, int b, int c, int d, int e, int f, int g) {
    ;     return bar(a, b, c, d, e, f, g, g, g) + bar2(a, b, c, d, e);
    ; }
    ;
    ; The function should reserve a call frame during the frame setup instead
    ; of adjusting the SP before and after each function call.
    ; The reserved frame should use the aligned size of the biggest call frame


    ; CHECK-LABEL: name: reservedFrameUsesBiggerCallFrameSize
    ; CHECK: liveins: $d4
    ; CHECK: $a14 = frame-setup MOVAA_aa $a10
    ; CHECK: $a10 = frame-setup LEA_aac $a10, -24
    ; CHECK: $d15 = COPY $d4
    ; CHECK: $d5 = COPY $d4
    ; CHECK: $d6 = COPY $d4
    ; CHECK: $d7 = COPY $d4
    ; CHECK: STW_alcd $a10, 0, $d4 :: (store 4 into stack, align 1)
    ; CHECK: STW_alcd $a10, 4, $d4 :: (store 4 into stack + 4, align 1)
    ; CHECK: STW_alcd $a10, 8, $d4 :: (store 4 into stack + 8, align 1)
    ; CHECK: STW_alcd $a10, 12, $d4 :: (store 4 into stack + 12, align 1)
    ; CHECK: STW_alcd $a10, 16, $d4 :: (store 4 into stack + 16, align 1)
    ; CHECK: CALL @biggerCallFrame, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit-def $d2
    ; CHECK: $d11 = COPY $d2
    ; CHECK: $d4 = COPY killed $d15
    ; CHECK: $d5 = COPY $d4
    ; CHECK: $d6 = COPY $d4
    ; CHECK: $d7 = COPY $d4
    ; CHECK: STW_alcd $a10, 0, $d4 :: (store 4 into stack, align 1)
    ; CHECK: CALL @smallerCallFrame, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit-def $d2
    ; CHECK: $d2 = nsw ADD_ddd killed $d2, killed $d11, implicit-def $psw
    ; CHECK: RET implicit $a11, implicit $d2
    $d15 = COPY $d4
    ADJCALLSTACKDOWN 20, 0, implicit-def $a10, implicit $a10
    $d5 = COPY $d4
    $d6 = COPY $d4
    $d7 = COPY $d4
    STW_alcd $a10, 0, $d4 :: (store 4 into stack, align 1)
    STW_alcd $a10, 4, $d4 :: (store 4 into stack + 4, align 1)
    STW_alcd $a10, 8, $d4 :: (store 4 into stack + 8, align 1)
    STW_alcd $a10, 12, $d4 :: (store 4 into stack + 12, align 1)
    STW_alcd $a10, 16, $d4 :: (store 4 into stack + 16, align 1)
    CALL @biggerCallFrame, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit-def $d2
    $d11 = COPY $d2
    ADJCALLSTACKUP 20, 0, implicit-def $a10, implicit $a10
    ADJCALLSTACKDOWN 4, 0, implicit-def $a10, implicit $a10
    $d4 = COPY killed $d15
    $d5 = COPY $d4
    $d6 = COPY $d4
    $d7 = COPY $d4
    STW_alcd $a10, 0, $d4 :: (store 4 into stack, align 1)
    CALL @smallerCallFrame, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $d4, implicit $d5, implicit $d6, implicit $d7, implicit-def $d2
    ADJCALLSTACKUP 4, 0, implicit-def $a10, implicit $a10
    $d2 = nsw ADD_ddd killed $d2, killed $d11, implicit-def $psw
    RET implicit $a11, implicit $d2

...
---
name:            noCFIneeded
alignment:       1
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: noCFIneeded
    ; CHECK-NOT: CFI_INSTRUCTION
    $d2 = MOVU_dc 42
    RET implicit $a11, implicit killed $d2

...
---
name:            defCfaFP
alignment:       1
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
stack:
  - { id: 0, name: foo, type: default, offset: 0, size: 32767, alignment: 1,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.1.entry:
    ; CHECK-LABEL: name: defCfaFP
    ; CHECK: frame-setup CFI_INSTRUCTION def_cfa $a14, 0
    $d2 = MOVU_dc 42
    RET implicit $a11, implicit killed $d2

...
