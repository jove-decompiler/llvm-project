# NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
# RUN: llc -mtriple=tricore -start-after=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

# This test is similar to the LLVM IR test, but checks the behavior of some
# corner cases through hand-written MIR.

--- |
  declare void @test_true()
  declare void @test_false()

  ; Function Attrs: nounwind
  define void @test_empty_block(i32 %in) {
  ; CHECK-LABEL: test_empty_block:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_no_terminator(i32 %in) {
  ; CHECK-LABEL: test_no_terminator:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    mov %d15, %d4
  ; CHECK-NEXT:    mov %d8, 42
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    mov %d2, %d15
  ; CHECK-NEXT:    mov %d3, %d8
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_misleading_terminator(i32 %in) {
  ; CHECK-LABEL: test_misleading_terminator:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_unconditional_jump(i32 %in) {
  ; CHECK-LABEL: test_unconditional_jump:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_conditional_jump(i32 %in) {
  ; CHECK-LABEL: test_conditional_jump:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    mov %d15, 42
  ; CHECK-NEXT:    jne %d4, %d15, .LBB4_2
  ; CHECK-NEXT:  # %bb.1:
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
  ; CHECK-NEXT:  .LBB4_2:
  ; CHECK-NEXT:    call test_false
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_conditional_jump_implicit_op(i32 %in) {
  ; CHECK-LABEL: test_conditional_jump_implicit_op:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    mov %d15, 42
  ; CHECK-NEXT:    jne %d4, %d15, .LBB5_2
  ; CHECK-NEXT:  # %bb.1:
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
  ; CHECK-NEXT:  .LBB5_2:
  ; CHECK-NEXT:    call test_false
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_indirect_jump(i32 %in) {
  ; CHECK-LABEL: test_indirect_jump:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    ji %a4
  ; CHECK-NEXT:  .LBB6_1:
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_remove_redundant_jumps(i32 %in) {
  ; CHECK-LABEL: test_remove_redundant_jumps:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    mov %d15, 42
  ; CHECK-NEXT:    add %d15, %d4
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    mov %d2, %d15
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_remove_redundant_jumps_2(i32 %in) {
  ; CHECK-LABEL: test_remove_redundant_jumps_2:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    mov %d15, 42
  ; CHECK-NEXT:    jne %d4, %d15, .LBB8_2
  ; CHECK-NEXT:  # %bb.1:
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
  ; CHECK-NEXT:  .LBB8_2:
  ; CHECK-NEXT:    call test_false
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_multiple_conditional_jumps(i32 %in) {
  ; CHECK-LABEL: test_multiple_conditional_jumps:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    mov %d15, 42
  ; CHECK-NEXT:    jlt %d4, %d15, .LBB9_2
  ; CHECK-NEXT:    jne %d4, %d15, .LBB9_3
  ; CHECK-NEXT:    j .LBB9_1
  ; CHECK-NEXT:  .LBB9_1:
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
  ; CHECK-NEXT:  .LBB9_2:
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:  .LBB9_3:
  ; CHECK-NEXT:    call test_false
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_conditional_jump_unconditional_jump(i32 %in) {
  ; CHECK-LABEL: test_conditional_jump_unconditional_jump:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    mov %d15, 42
  ; CHECK-NEXT:    jne %d4, %d15, .LBB10_2
  ; CHECK-NEXT:  # %bb.1:
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
  ; CHECK-NEXT:  .LBB10_2:
  ; CHECK-NEXT:    call test_false
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_indirect_jump_unconditional_jump(i32 %in) {
  ; CHECK-LABEL: test_indirect_jump_unconditional_jump:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    ji %a4
  ; CHECK-NEXT:  .LBB11_1:
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
  ; CHECK-NEXT:  .LBB11_2:
  ; CHECK-NEXT:    call test_false
  ; CHECK-NEXT:    ret
    unreachable
  }

  ; Function Attrs: nounwind
  define void @test_indirect_jump_conditional_jump(i32 %in) {
  ; CHECK-LABEL: test_indirect_jump_conditional_jump:
  ; CHECK:       # %bb.0:
  ; CHECK-NEXT:    mov.aa %a14, %a10
  ; CHECK-NEXT:    .cfi_def_cfa %a14, 0
  ; CHECK-NEXT:    mov %d15, 42
  ; CHECK-NEXT:    ji %a4
  ; CHECK-NEXT:  .LBB12_1:
  ; CHECK-NEXT:    call test_true
  ; CHECK-NEXT:    ret
  ; CHECK-NEXT:  .LBB12_2:
  ; CHECK-NEXT:    call test_false
  ; CHECK-NEXT:    ret
    unreachable
  }

...
---
name:            test_empty_block
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000)
    liveins: $d4

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_no_terminator
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000)
    liveins: $d4

    %0:dataregs = COPY $d4
    %1:dataregs = MOVImmDataReg 42

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    $d2 = COPY %0
    $d3 = COPY %1
    RET implicit $a11, implicit $d2, implicit $d3

...
---
name:            test_misleading_terminator
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000)
    liveins: $a4

    %0:addrregs = COPY $a4
    J %bb.2
    JI %0

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_unconditional_jump
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000)

    J %bb.2

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_conditional_jump
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $d4

    %0:dataregs = COPY $d4
    %1:dataregs = MOVImmDataReg 42
    JNE_ddc %0, %1, %bb.3

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

  bb.3:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_false, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_conditional_jump_implicit_op
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $e4

    %1:dataregs = MOVImmDataReg 42
    JNE_ddc $d4, %1, %bb.3, implicit $e4

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

  bb.3:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_false, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_indirect_jump
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000)
    liveins: $a4

    %0:addrregs = COPY $a4
    JI %0

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_remove_redundant_jumps
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000)
    liveins: $d4

    %0:dataregs = COPY $d4
    %1:dataregs = MOVImmDataReg 42
    %2:dataregs = ADD_ddd %0, %1, implicit-def $psw
    J %bb.2
    J %bb.2
    J %bb.2
    J %bb.3

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    $d2 = COPY %2
    RET implicit $a11, implicit $d2

  bb.3:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_false, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_remove_redundant_jumps_2
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $d4

    %0:dataregs = COPY $d4
    %1:dataregs = MOVImmDataReg 42
    JNE_ddc %0, %1, %bb.3
    J %bb.2
    J %bb.2
    J %bb.2
    J %bb.3

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

  bb.3:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_false, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_multiple_conditional_jumps
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000), %bb.4(0x40000000)
    liveins: $d4

    %0:dataregs = COPY $d4
    %1:dataregs = MOVImmDataReg 42
    JLT_ddc %0, %1, %bb.4
    JNE_ddc %0, %1, %bb.3
    J %bb.2

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

  bb.3:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_false, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

  bb.4:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_false, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_conditional_jump_unconditional_jump
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $d4

    %0:dataregs = COPY $d4
    %1:dataregs = MOVImmDataReg 42
    JNE_ddc %0, %1, %bb.3
    J %bb.2

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

  bb.3:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_false, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_indirect_jump_unconditional_jump
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a4

    %0:addrregs = COPY $a4
    JI %0
    J %bb.2

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

  bb.3:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_false, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
---
name:            test_indirect_jump_conditional_jump
legalized:       true
regBankSelected: true
selected:        true
tracksRegLiveness: true
body:             |
  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)
    liveins: $a4, $d4

    %0:dataregs = COPY $d4
    %2:addrregs = COPY $a4
    %1:dataregs = MOVImmDataReg 42
    JI %2
    JNE_ddc %0, %1, %bb.3

  bb.2:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_true, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

  bb.3:
    ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    CALL @test_false, csr_tricore_uppercontext, implicit-def $a11, implicit $psw
    ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    RET implicit $a11

...
