# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer \
# RUN: -verify-machineinstrs %s -o - | FileCheck %s


---
name:            test_vaarg
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_vaarg
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $d4
    ; CHECK: [[LOAD:%[0-9]+]]:_(p0) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[LOAD1:%[0-9]+]]:_(p0) = G_LOAD [[LOAD]](p0) :: (load 4)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[LOAD]], [[C]](s32)
    ; CHECK: G_STORE [[PTR_ADD]](p0), [[COPY]](p0) :: (store 4)
    ; CHECK: [[LOAD2:%[0-9]+]]:_(p0) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[LOAD2]], [[C1]](s32)
    ; CHECK: [[PTR_MASK:%[0-9]+]]:_(p0) = G_PTR_MASK [[PTR_ADD1]], 3
    ; CHECK: [[LOAD3:%[0-9]+]]:_(p0) = G_LOAD [[PTR_MASK]](p0) :: (load 4, align 8)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_MASK]], [[C2]](s32)
    ; CHECK: G_STORE [[PTR_ADD2]](p0), [[COPY]](p0) :: (store 4)
    ; CHECK: [[LOAD4:%[0-9]+]]:_(p0) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[LOAD5:%[0-9]+]]:_(s32) = G_LOAD [[LOAD4]](p0) :: (load 4)
    ; CHECK: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD3:%[0-9]+]]:_(p0) = G_PTR_ADD [[LOAD4]], [[C3]](s32)
    ; CHECK: G_STORE [[PTR_ADD3]](p0), [[COPY]](p0) :: (store 4)
    ; CHECK: [[LOAD6:%[0-9]+]]:_(p0) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK: [[PTR_ADD4:%[0-9]+]]:_(p0) = G_PTR_ADD [[LOAD6]], [[C4]](s32)
    ; CHECK: [[PTR_MASK1:%[0-9]+]]:_(p0) = G_PTR_MASK [[PTR_ADD4]], 3
    ; CHECK: [[LOAD7:%[0-9]+]]:_(s32) = G_LOAD [[PTR_MASK1]](p0) :: (load 4, align 8)
    ; CHECK: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD5:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_MASK1]], [[C5]](s32)
    ; CHECK: G_STORE [[PTR_ADD5]](p0), [[COPY]](p0) :: (store 4)
    ; CHECK: [[LOAD8:%[0-9]+]]:_(p0) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK: [[PTR_ADD6:%[0-9]+]]:_(p0) = G_PTR_ADD [[LOAD8]], [[C6]](s32)
    ; CHECK: [[PTR_MASK2:%[0-9]+]]:_(p0) = G_PTR_MASK [[PTR_ADD6]], 3
    ; CHECK: [[LOAD9:%[0-9]+]]:_(s64) = G_LOAD [[PTR_MASK2]](p0) :: (load 8)
    ; CHECK: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD7:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_MASK2]], [[C7]](s32)
    ; CHECK: G_STORE [[PTR_ADD7]](p0), [[COPY]](p0) :: (store 4)
    ; CHECK: [[LOAD10:%[0-9]+]]:_(p0) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK: [[PTR_ADD8:%[0-9]+]]:_(p0) = G_PTR_ADD [[LOAD10]], [[C8]](s32)
    ; CHECK: [[PTR_MASK3:%[0-9]+]]:_(p0) = G_PTR_MASK [[PTR_ADD8]], 4
    ; CHECK: [[LOAD11:%[0-9]+]]:_(s64) = G_LOAD [[PTR_MASK3]](p0) :: (load 8, align 16)
    ; CHECK: [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD9:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_MASK3]], [[C9]](s32)
    ; CHECK: G_STORE [[PTR_ADD9]](p0), [[COPY]](p0) :: (store 4)
    ; CHECK: $d2 = COPY [[LOAD1]](p0)
    ; CHECK: $d2 = COPY [[LOAD3]](p0)
    ; CHECK: $d2 = COPY [[LOAD5]](s32)
    ; CHECK: $d2 = COPY [[LOAD7]](s32)
    ; CHECK: $e2 = COPY [[LOAD9]](s64)
    ; CHECK: $e2 = COPY [[LOAD11]](s64)
    %0:_(p0) = COPY $d4
    %1:_(p0) = G_VAARG %0(p0), 4
    %2:_(p0) = G_VAARG %0(p0), 8
    %3:_(s32) = G_VAARG %0(p0), 4
    %4:_(s32) = G_VAARG %0(p0), 8
    %5:_(s64) = G_VAARG %0(p0), 8
    %6:_(s64) = G_VAARG %0(p0), 16
    $d2 = COPY %1(p0)
    $d2 = COPY %2(p0)
    $d2 = COPY %3(s32)
    $d2 = COPY %4(s32)
    $e2 = COPY %5(s64)
    $e2 = COPY %6(s64)
...
