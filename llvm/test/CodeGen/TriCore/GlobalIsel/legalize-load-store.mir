# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_load
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[LOAD]](s32)
    ; CHECK: $d2 = COPY [[COPY1]](s32)
    ; CHECK: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[LOAD1]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; CHECK: [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 2)
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[LOAD2]](s32)
    ; CHECK: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY3]], 16
    ; CHECK: $d2 = COPY [[SEXT_INREG]](s32)
    ; CHECK: [[LOAD3:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: $d2 = COPY [[LOAD3]](s32)
    ; CHECK: [[LOAD4:%[0-9]+]]:_(s64) = G_LOAD [[COPY]](p0) :: (load 8)
    ; CHECK: $e2 = COPY [[LOAD4]](s64)
    ; CHECK: [[LOAD5:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[LOAD5]](s32)
    ; CHECK: $e2 = COPY [[ANYEXT]](s64)
    ; CHECK: [[LOAD6:%[0-9]+]]:_(p0) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: $a2 = COPY [[LOAD6]](p0)
    ; CHECK: [[LOAD7:%[0-9]+]]:_(s64) = G_LOAD [[COPY]](p0) :: (load 8, align 16)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: [[LOAD8:%[0-9]+]]:_(s64) = G_LOAD [[PTR_ADD]](p0) :: (load 8)
    ; CHECK: $e2 = COPY [[LOAD7]](s64)
    ; CHECK: $e4 = COPY [[LOAD8]](s64)
    ; CHECK: [[LOAD9:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 4, align 2)
    ; CHECK: $d2 = COPY [[LOAD9]](s32)
    ; CHECK: [[LOAD10:%[0-9]+]]:_(s64) = G_LOAD [[COPY]](p0) :: (load 8, align 2)
    ; CHECK: $e2 = COPY [[LOAD10]](s64)
    %0:_(p0) = COPY $a4
    %1:_(s1) = G_LOAD %0(p0) :: (load 1)
    %2:_(s32) = G_ANYEXT %1(s1)
    $d2 = COPY %2(s32)
    %3:_(s8) = G_LOAD %0(p0) :: (load 1)
    %4:_(s32) = G_ZEXT %3(s8)
    $d2 = COPY %4(s32)
    %5:_(s16) = G_LOAD %0(p0) :: (load 2)
    %6:_(s32) = G_SEXT %5(s16)
    $d2 = COPY %6(s32)
    %7:_(s32) = G_LOAD %0(p0) :: (load 4)
    $d2 = COPY %7(s32)
    %8:_(s64) = G_LOAD %0(p0) :: (load 8)
    $e2 = COPY %8(s64)
    %9:_(s64) = G_LOAD %0(p0) :: (load 4)
    $e2 = COPY %9(s64)
    %10:_(p0) = G_LOAD %0(p0) :: (load 4)
    $a2 = COPY %10(p0)
    %11:_(s128) = G_LOAD %0(p0) :: (load 16)
    %12:_(s64), %13:_(s64) = G_UNMERGE_VALUES %11(s128)
    $e2 = COPY %12(s64)
    $e4 = COPY %13(s64)
    %14:_(s32) = G_LOAD %0(p0) :: (load 4, align 2)
    $d2 = COPY %14(s32)
    %15:_(s64) = G_LOAD %0(p0) :: (load 8, align 2)
    $e2 = COPY %15(s64)
...

---
name:            test_load_unaligned
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load_unaligned
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD]](s32)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD]](p0) :: (load 1)
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD1]](s32)
    ; CHECK: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[TRUNC]](s8), [[TRUNC1]](s8)
    ; CHECK: [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[MV]](s16)
    ; CHECK: $d2 = COPY [[SEXT]](s32)
    ; CHECK: [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD2]](s32)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: [[LOAD3:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD1]](p0) :: (load 1)
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD3]](s32)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s32)
    ; CHECK: [[LOAD4:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD2]](p0) :: (load 1)
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD4]](s32)
    ; CHECK: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD3:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C3]](s32)
    ; CHECK: [[LOAD5:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD3]](p0) :: (load 1)
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD5]](s32)
    ; CHECK: [[MV1:%[0-9]+]]:_(s32) = G_MERGE_VALUES [[TRUNC2]](s8), [[TRUNC3]](s8), [[TRUNC4]](s8), [[TRUNC5]](s8)
    ; CHECK: $d2 = COPY [[MV1]](s32)
    ; CHECK: [[LOAD6:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD6]](s32)
    ; CHECK: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD4:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C4]](s32)
    ; CHECK: [[LOAD7:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD4]](p0) :: (load 1)
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD7]](s32)
    ; CHECK: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD5:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C5]](s32)
    ; CHECK: [[LOAD8:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD5]](p0) :: (load 1)
    ; CHECK: [[TRUNC8:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD8]](s32)
    ; CHECK: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD6:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C6]](s32)
    ; CHECK: [[LOAD9:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD6]](p0) :: (load 1)
    ; CHECK: [[TRUNC9:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD9]](s32)
    ; CHECK: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD7:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C7]](s32)
    ; CHECK: [[LOAD10:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD7]](p0) :: (load 1)
    ; CHECK: [[TRUNC10:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD10]](s32)
    ; CHECK: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK: [[PTR_ADD8:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C8]](s32)
    ; CHECK: [[LOAD11:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD8]](p0) :: (load 1)
    ; CHECK: [[TRUNC11:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD11]](s32)
    ; CHECK: [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
    ; CHECK: [[PTR_ADD9:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C9]](s32)
    ; CHECK: [[LOAD12:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD9]](p0) :: (load 1)
    ; CHECK: [[TRUNC12:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD12]](s32)
    ; CHECK: [[C10:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK: [[PTR_ADD10:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C10]](s32)
    ; CHECK: [[LOAD13:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD10]](p0) :: (load 1)
    ; CHECK: [[TRUNC13:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD13]](s32)
    ; CHECK: [[MV2:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[TRUNC6]](s8), [[TRUNC7]](s8), [[TRUNC8]](s8), [[TRUNC9]](s8), [[TRUNC10]](s8), [[TRUNC11]](s8), [[TRUNC12]](s8), [[TRUNC13]](s8)
    ; CHECK: $e2 = COPY [[MV2]](s64)
    ; CHECK: [[LOAD14:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[TRUNC14:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD14]](s32)
    ; CHECK: [[C11:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD11:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C11]](s32)
    ; CHECK: [[LOAD15:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD11]](p0) :: (load 1)
    ; CHECK: [[TRUNC15:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD15]](s32)
    ; CHECK: [[C12:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD12:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C12]](s32)
    ; CHECK: [[LOAD16:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD12]](p0) :: (load 1)
    ; CHECK: [[TRUNC16:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD16]](s32)
    ; CHECK: [[C13:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD13:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C13]](s32)
    ; CHECK: [[LOAD17:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD13]](p0) :: (load 1)
    ; CHECK: [[TRUNC17:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD17]](s32)
    ; CHECK: [[MV3:%[0-9]+]]:_(p0) = G_MERGE_VALUES [[TRUNC14]](s8), [[TRUNC15]](s8), [[TRUNC16]](s8), [[TRUNC17]](s8)
    ; CHECK: $a2 = COPY [[MV3]](p0)
    ; CHECK: [[LOAD18:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 2)
    ; CHECK: [[TRUNC18:%[0-9]+]]:_(s16) = G_TRUNC [[LOAD18]](s32)
    ; CHECK: [[C14:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD14:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C14]](s32)
    ; CHECK: [[LOAD19:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD14]](p0) :: (load 2)
    ; CHECK: [[TRUNC19:%[0-9]+]]:_(s16) = G_TRUNC [[LOAD19]](s32)
    ; CHECK: [[MV4:%[0-9]+]]:_(p0) = G_MERGE_VALUES [[TRUNC18]](s16), [[TRUNC19]](s16)
    ; CHECK: $a2 = COPY [[MV4]](p0)
    %0:_(p0) = COPY $a4
    ; Unaligned loads
    %1:_(s16) = G_LOAD %0(p0) :: (load 2, align 1)
    %2:_(s32) = G_SEXT %1(s16)
    $d2 = COPY %2(s32)
    %3:_(s32) = G_LOAD %0(p0) :: (load 4, align 1)
    $d2 = COPY %3(s32)
    %4:_(s64) = G_LOAD %0(p0) :: (load 8, align 1)
    $e2 = COPY %4(s64)
    %5:_(p0) = G_LOAD %0(p0) :: (load 4, align 1)
    $a2 = COPY %5(p0)
    %6:_(p0) = G_LOAD %0(p0) :: (load 4, align 2)
    $a2 = COPY %6(p0)
...

---
name:            test_store
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[C]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[TRUNC]], [[COPY2]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[AND]](s32)
    ; CHECK: G_STORE [[TRUNC1]](s8), [[COPY]](p0) :: (store 1)
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC2]](s8), [[COPY]](p0) :: (store 1)
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC3]](s16), [[COPY]](p0) :: (store 2)
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC4]](s32), [[COPY]](p0) :: (store 4)
    ; CHECK: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store 8)
    ; CHECK: G_STORE [[COPY]](p0), [[COPY]](p0) :: (store 4)
    ; CHECK: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store 8, align 16)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: G_STORE [[COPY1]](s64), [[PTR_ADD]](p0) :: (store 8)
    ; CHECK: G_STORE [[TRUNC4]](s32), [[COPY]](p0) :: (store 4, align 2)
    ; CHECK: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store 8, align 2)
    %0:_(p0) = COPY $a4
    %1:_(s64) = COPY $e4
    %2:_(s1) = G_TRUNC %1(s64)
    G_STORE %2(s1), %0(p0) :: (store 1)
    %3:_(s8) = G_TRUNC %1(s64)
    G_STORE %3(s8), %0(p0) :: (store 1)
    %4:_(s16) = G_TRUNC %1(s64)
    G_STORE %4(s16), %0(p0) :: (store 2)
    %5:_(s32) = G_TRUNC %1(s64)
    G_STORE %5(s32), %0(p0) :: (store 4)
    G_STORE %1(s64), %0(p0) :: (store 8)
    G_STORE %0(p0), %0(p0) :: (store 4)
    %6:_(s128) = G_MERGE_VALUES %1(s64), %1(s64)
    G_STORE %6(s128), %0(p0) :: (store 16)
    G_STORE %5(s32), %0(p0) :: (store 4, align 2)
    G_STORE %1(s64), %0(p0) :: (store 8, align 2)
...

---
name:            test_store_unaligned
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store_unaligned
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s64)
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[TRUNC]](s16)
    ; CHECK: G_STORE [[UV]](s8), [[COPY]](p0) :: (store 1)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK: G_STORE [[UV1]](s8), [[PTR_ADD]](p0) :: (store 1)
    ; CHECK: [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8), [[UV4:%[0-9]+]]:_(s8), [[UV5:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[TRUNC1]](s32)
    ; CHECK: G_STORE [[UV2]](s8), [[COPY]](p0) :: (store 1)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: G_STORE [[UV3]](s8), [[PTR_ADD1]](p0) :: (store 1)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s32)
    ; CHECK: G_STORE [[UV4]](s8), [[PTR_ADD2]](p0) :: (store 1)
    ; CHECK: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD3:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C3]](s32)
    ; CHECK: G_STORE [[UV5]](s8), [[PTR_ADD3]](p0) :: (store 1)
    ; CHECK: [[UV6:%[0-9]+]]:_(s8), [[UV7:%[0-9]+]]:_(s8), [[UV8:%[0-9]+]]:_(s8), [[UV9:%[0-9]+]]:_(s8), [[UV10:%[0-9]+]]:_(s8), [[UV11:%[0-9]+]]:_(s8), [[UV12:%[0-9]+]]:_(s8), [[UV13:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s64)
    ; CHECK: G_STORE [[UV6]](s8), [[COPY]](p0) :: (store 1)
    ; CHECK: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD4:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C4]](s32)
    ; CHECK: G_STORE [[UV7]](s8), [[PTR_ADD4]](p0) :: (store 1)
    ; CHECK: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD5:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C5]](s32)
    ; CHECK: G_STORE [[UV8]](s8), [[PTR_ADD5]](p0) :: (store 1)
    ; CHECK: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD6:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C6]](s32)
    ; CHECK: G_STORE [[UV9]](s8), [[PTR_ADD6]](p0) :: (store 1)
    ; CHECK: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD7:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C7]](s32)
    ; CHECK: G_STORE [[UV10]](s8), [[PTR_ADD7]](p0) :: (store 1)
    ; CHECK: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK: [[PTR_ADD8:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C8]](s32)
    ; CHECK: G_STORE [[UV11]](s8), [[PTR_ADD8]](p0) :: (store 1)
    ; CHECK: [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
    ; CHECK: [[PTR_ADD9:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C9]](s32)
    ; CHECK: G_STORE [[UV12]](s8), [[PTR_ADD9]](p0) :: (store 1)
    ; CHECK: [[C10:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK: [[PTR_ADD10:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C10]](s32)
    ; CHECK: G_STORE [[UV13]](s8), [[PTR_ADD10]](p0) :: (store 1)
    ; CHECK: [[UV14:%[0-9]+]]:_(s8), [[UV15:%[0-9]+]]:_(s8), [[UV16:%[0-9]+]]:_(s8), [[UV17:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](p0)
    ; CHECK: G_STORE [[UV14]](s8), [[COPY]](p0) :: (store 1)
    ; CHECK: [[C11:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD11:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C11]](s32)
    ; CHECK: G_STORE [[UV15]](s8), [[PTR_ADD11]](p0) :: (store 1)
    ; CHECK: [[C12:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD12:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C12]](s32)
    ; CHECK: G_STORE [[UV16]](s8), [[PTR_ADD12]](p0) :: (store 1)
    ; CHECK: [[C13:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD13:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C13]](s32)
    ; CHECK: G_STORE [[UV17]](s8), [[PTR_ADD13]](p0) :: (store 1)
    ; CHECK: [[UV18:%[0-9]+]]:_(s16), [[UV19:%[0-9]+]]:_(s16) = G_UNMERGE_VALUES [[COPY]](p0)
    ; CHECK: G_STORE [[UV18]](s16), [[COPY]](p0) :: (store 2)
    ; CHECK: [[C14:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD14:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C14]](s32)
    ; CHECK: G_STORE [[UV19]](s16), [[PTR_ADD14]](p0) :: (store 2)
    %0:_(p0) = COPY $a4
    %1:_(s64) = COPY $e4
    %2:_(s16) = G_TRUNC %1(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    ; Unaligned stores
    G_STORE %2(s16), %0(p0) :: (store 2, align 1)
    G_STORE %3(s32), %0(p0) :: (store 4, align 1)
    G_STORE %1(s64), %0(p0) :: (store 8, align 1)
    G_STORE %0(p0), %0(p0) :: (store 4, align 1)
    G_STORE %0(p0), %0(p0) :: (store 4, align 2)
...
