# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_load
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[LOAD]](s32)
    ; CHECK: $d2 = COPY [[COPY1]](s32)
    ; CHECK: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[LOAD1]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; CHECK: [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 2)
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[LOAD2]](s32)
    ; CHECK: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY3]], 16
    ; CHECK: $d2 = COPY [[SEXT_INREG]](s32)
    ; CHECK: [[LOAD3:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: $d2 = COPY [[LOAD3]](s32)
    ; CHECK: [[LOAD4:%[0-9]+]]:_(s64) = G_LOAD [[COPY]](p0) :: (load 8)
    ; CHECK: $e2 = COPY [[LOAD4]](s64)
    ; CHECK: [[LOAD5:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[LOAD5]](s32)
    ; CHECK: $e2 = COPY [[ANYEXT]](s64)
    ; CHECK: [[LOAD6:%[0-9]+]]:_(p0) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: $a2 = COPY [[LOAD6]](p0)
    ; CHECK: [[LOAD7:%[0-9]+]]:_(s64) = G_LOAD [[COPY]](p0) :: (load 8, align 16)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: [[LOAD8:%[0-9]+]]:_(s64) = G_LOAD [[PTR_ADD]](p0) :: (load 8)
    ; CHECK: $e2 = COPY [[LOAD7]](s64)
    ; CHECK: $e4 = COPY [[LOAD8]](s64)
    %0:_(p0) = COPY $a4
    %1:_(s1) = G_LOAD %0(p0) :: (load 1)
    %2:_(s32) = G_ANYEXT %1(s1)
    $d2 = COPY %2(s32)
    %3:_(s8) = G_LOAD %0(p0) :: (load 1)
    %4:_(s32) = G_ZEXT %3(s8)
    $d2 = COPY %4(s32)
    %5:_(s16) = G_LOAD %0(p0) :: (load 2)
    %6:_(s32) = G_SEXT %5(s16)
    $d2 = COPY %6(s32)
    %7:_(s32) = G_LOAD %0(p0) :: (load 4)
    $d2 = COPY %7(s32)
    %8:_(s64) = G_LOAD %0(p0) :: (load 8)
    $e2 = COPY %8(s64)
    %9:_(s64) = G_LOAD %0(p0) :: (load 4)
    $e2 = COPY %9(s64)
    %10:_(p0) = G_LOAD %0(p0) :: (load 4)
    $a2 = COPY %10(p0)
    %11:_(s128) = G_LOAD %0(p0) :: (load 16)
    %12:_(s64), %13:_(s64) = G_UNMERGE_VALUES %11(s128)
    $e2 = COPY %12(s64)
    $e4 = COPY %13(s64)
...

---
name:            test_store
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[C]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[TRUNC]], [[COPY2]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[AND]](s32)
    ; CHECK: G_STORE [[TRUNC1]](s8), [[COPY]](p0) :: (store 1)
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC2]](s8), [[COPY]](p0) :: (store 1)
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC3]](s16), [[COPY]](p0) :: (store 2)
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC4]](s32), [[COPY]](p0) :: (store 4)
    ; CHECK: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store 8)
    ; CHECK: G_STORE [[COPY]](p0), [[COPY]](p0) :: (store 4)
    ; CHECK: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store 8, align 16)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: G_STORE [[COPY1]](s64), [[PTR_ADD]](p0) :: (store 8)
    %0:_(p0) = COPY $a4
    %1:_(s64) = COPY $e4
    %2:_(s1) = G_TRUNC %1(s64)
    G_STORE %2(s1), %0(p0) :: (store 1)
    %3:_(s8) = G_TRUNC %1(s64)
    G_STORE %3(s8), %0(p0) :: (store 1)
    %4:_(s16) = G_TRUNC %1(s64)
    G_STORE %4(s16), %0(p0) :: (store 2)
    %5:_(s32) = G_TRUNC %1(s64)
    G_STORE %5(s32), %0(p0) :: (store 4)
    G_STORE %1(s64), %0(p0) :: (store 8)
    G_STORE %0(p0), %0(p0) :: (store 4)
    %6:_(s128) = G_MERGE_VALUES %1(s64), %1(s64)
    G_STORE %6(s128), %0(p0) :: (store 16)
...
