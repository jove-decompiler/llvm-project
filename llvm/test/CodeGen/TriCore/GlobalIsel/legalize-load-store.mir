# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_load
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[LOAD]](s32)
    ; CHECK: $d2 = COPY [[COPY1]](s32)
    ; CHECK: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[LOAD1]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; CHECK: [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 2)
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[LOAD2]](s32)
    ; CHECK: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY3]], 16
    ; CHECK: $d2 = COPY [[SEXT_INREG]](s32)
    ; CHECK: [[LOAD3:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: $d2 = COPY [[LOAD3]](s32)
    ; CHECK: [[LOAD4:%[0-9]+]]:_(s64) = G_LOAD [[COPY]](p0) :: (load 8)
    ; CHECK: $e2 = COPY [[LOAD4]](s64)
    ; CHECK: [[LOAD5:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[LOAD5]](s32)
    ; CHECK: $e2 = COPY [[ANYEXT]](s64)
    ; CHECK: [[LOAD6:%[0-9]+]]:_(p0) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: $a2 = COPY [[LOAD6]](p0)
    ; CHECK: [[LOAD7:%[0-9]+]]:_(s64) = G_LOAD [[COPY]](p0) :: (load 8, align 16)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: [[LOAD8:%[0-9]+]]:_(s64) = G_LOAD [[PTR_ADD]](p0) :: (load 8 + 8)
    ; CHECK: $e2 = COPY [[LOAD7]](s64)
    ; CHECK: $e4 = COPY [[LOAD8]](s64)
    ; CHECK: [[LOAD9:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 4, align 2)
    ; CHECK: $d2 = COPY [[LOAD9]](s32)
    ; CHECK: [[LOAD10:%[0-9]+]]:_(s64) = G_LOAD [[COPY]](p0) :: (load 8, align 2)
    ; CHECK: $e2 = COPY [[LOAD10]](s64)
    ; CHECK: [[LOAD11:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 4)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[LOAD11]](s32)
    ; CHECK: $e2 = COPY [[ANYEXT1]](s64)
    %0:_(p0) = COPY $a4
    %1:_(s1) = G_LOAD %0(p0) :: (load 1)
    %2:_(s32) = G_ANYEXT %1(s1)
    $d2 = COPY %2(s32)
    %3:_(s8) = G_LOAD %0(p0) :: (load 1)
    %4:_(s32) = G_ZEXT %3(s8)
    $d2 = COPY %4(s32)
    %5:_(s16) = G_LOAD %0(p0) :: (load 2)
    %6:_(s32) = G_SEXT %5(s16)
    $d2 = COPY %6(s32)
    %7:_(s32) = G_LOAD %0(p0) :: (load 4)
    $d2 = COPY %7(s32)
    %8:_(s64) = G_LOAD %0(p0) :: (load 8)
    $e2 = COPY %8(s64)
    %9:_(s64) = G_LOAD %0(p0) :: (load 4)
    $e2 = COPY %9(s64)
    %10:_(p0) = G_LOAD %0(p0) :: (load 4)
    $a2 = COPY %10(p0)
    %11:_(s128) = G_LOAD %0(p0) :: (load 16)
    %12:_(s64), %13:_(s64) = G_UNMERGE_VALUES %11(s128)
    $e2 = COPY %12(s64)
    $e4 = COPY %13(s64)
    %14:_(s32) = G_LOAD %0(p0) :: (load 4, align 2)
    $d2 = COPY %14(s32)
    %15:_(s64) = G_LOAD %0(p0) :: (load 8, align 2)
    $e2 = COPY %15(s64)
    %16:_(s64) = G_LOAD %0(p0) :: (load 4)
    $e2 = COPY %16(s64)
...

---
name:            test_load_unaligned
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load_unaligned
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD]](s32)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD]](p0) :: (load 1 + 1)
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD1]](s32)
    ; CHECK: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES [[TRUNC]](s8), [[TRUNC1]](s8)
    ; CHECK: [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[MV]](s16)
    ; CHECK: $d2 = COPY [[SEXT]](s32)
    ; CHECK: [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD2]](s32)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: [[LOAD3:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD1]](p0) :: (load 1 + 1)
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD3]](s32)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s32)
    ; CHECK: [[LOAD4:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD2]](p0) :: (load 1 + 2)
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD4]](s32)
    ; CHECK: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD3:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C3]](s32)
    ; CHECK: [[LOAD5:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD3]](p0) :: (load 1 + 3)
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD5]](s32)
    ; CHECK: [[MV1:%[0-9]+]]:_(s32) = G_MERGE_VALUES [[TRUNC2]](s8), [[TRUNC3]](s8), [[TRUNC4]](s8), [[TRUNC5]](s8)
    ; CHECK: $d2 = COPY [[MV1]](s32)
    ; CHECK: [[LOAD6:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD6]](s32)
    ; CHECK: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD4:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C4]](s32)
    ; CHECK: [[LOAD7:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD4]](p0) :: (load 1 + 1)
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD7]](s32)
    ; CHECK: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD5:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C5]](s32)
    ; CHECK: [[LOAD8:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD5]](p0) :: (load 1 + 2)
    ; CHECK: [[TRUNC8:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD8]](s32)
    ; CHECK: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD6:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C6]](s32)
    ; CHECK: [[LOAD9:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD6]](p0) :: (load 1 + 3)
    ; CHECK: [[TRUNC9:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD9]](s32)
    ; CHECK: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD7:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C7]](s32)
    ; CHECK: [[LOAD10:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD7]](p0) :: (load 1 + 4)
    ; CHECK: [[TRUNC10:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD10]](s32)
    ; CHECK: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK: [[PTR_ADD8:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C8]](s32)
    ; CHECK: [[LOAD11:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD8]](p0) :: (load 1 + 5)
    ; CHECK: [[TRUNC11:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD11]](s32)
    ; CHECK: [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
    ; CHECK: [[PTR_ADD9:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C9]](s32)
    ; CHECK: [[LOAD12:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD9]](p0) :: (load 1 + 6)
    ; CHECK: [[TRUNC12:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD12]](s32)
    ; CHECK: [[C10:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK: [[PTR_ADD10:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C10]](s32)
    ; CHECK: [[LOAD13:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD10]](p0) :: (load 1 + 7)
    ; CHECK: [[TRUNC13:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD13]](s32)
    ; CHECK: [[MV2:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[TRUNC6]](s8), [[TRUNC7]](s8), [[TRUNC8]](s8), [[TRUNC9]](s8), [[TRUNC10]](s8), [[TRUNC11]](s8), [[TRUNC12]](s8), [[TRUNC13]](s8)
    ; CHECK: $e2 = COPY [[MV2]](s64)
    ; CHECK: [[LOAD14:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 1)
    ; CHECK: [[TRUNC14:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD14]](s32)
    ; CHECK: [[C11:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD11:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C11]](s32)
    ; CHECK: [[LOAD15:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD11]](p0) :: (load 1 + 1)
    ; CHECK: [[TRUNC15:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD15]](s32)
    ; CHECK: [[C12:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD12:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C12]](s32)
    ; CHECK: [[LOAD16:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD12]](p0) :: (load 1 + 2)
    ; CHECK: [[TRUNC16:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD16]](s32)
    ; CHECK: [[C13:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD13:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C13]](s32)
    ; CHECK: [[LOAD17:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD13]](p0) :: (load 1 + 3)
    ; CHECK: [[TRUNC17:%[0-9]+]]:_(s8) = G_TRUNC [[LOAD17]](s32)
    ; CHECK: [[MV3:%[0-9]+]]:_(p0) = G_MERGE_VALUES [[TRUNC14]](s8), [[TRUNC15]](s8), [[TRUNC16]](s8), [[TRUNC17]](s8)
    ; CHECK: $a2 = COPY [[MV3]](p0)
    ; CHECK: [[LOAD18:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load 2)
    ; CHECK: [[TRUNC18:%[0-9]+]]:_(s16) = G_TRUNC [[LOAD18]](s32)
    ; CHECK: [[C14:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD14:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C14]](s32)
    ; CHECK: [[LOAD19:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD14]](p0) :: (load 2 + 2)
    ; CHECK: [[TRUNC19:%[0-9]+]]:_(s16) = G_TRUNC [[LOAD19]](s32)
    ; CHECK: [[MV4:%[0-9]+]]:_(p0) = G_MERGE_VALUES [[TRUNC18]](s16), [[TRUNC19]](s16)
    ; CHECK: $a2 = COPY [[MV4]](p0)
    %0:_(p0) = COPY $a4
    ; Unaligned loads
    %1:_(s16) = G_LOAD %0(p0) :: (load 2, align 1)
    %2:_(s32) = G_SEXT %1(s16)
    $d2 = COPY %2(s32)
    %3:_(s32) = G_LOAD %0(p0) :: (load 4, align 1)
    $d2 = COPY %3(s32)
    %4:_(s64) = G_LOAD %0(p0) :: (load 8, align 1)
    $e2 = COPY %4(s64)
    %5:_(p0) = G_LOAD %0(p0) :: (load 4, align 1)
    $a2 = COPY %5(p0)
    %6:_(p0) = G_LOAD %0(p0) :: (load 4, align 2)
    $a2 = COPY %6(p0)
...

---
name:            test_nonpow2_load
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_nonpow2_load
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load 2)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD]](p0) :: (load 1 + 2, align 2)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[LOAD]], [[C1]](s32)
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[OR]](s32)
    ; CHECK: $d2 = COPY [[COPY1]](s32)
    %0:_(p0) = COPY $a4
    %1:_(s24) = G_LOAD %0(p0) :: (load 3, align 2)
    %2:_(s32) = G_ANYEXT %1(s24)
    $d2 = COPY %2(s32)
...

---
name:            test_store
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[TRUNC]], [[C]]
    ; CHECK: G_STORE [[AND]](s32), [[COPY]](p0) :: (store 1)
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC1]](s32), [[COPY]](p0) :: (store 1)
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC2]](s32), [[COPY]](p0) :: (store 2)
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC3]](s32), [[COPY]](p0) :: (store 4)
    ; CHECK: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store 8)
    ; CHECK: G_STORE [[COPY]](p0), [[COPY]](p0) :: (store 4)
    ; CHECK: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store 8, align 16)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: G_STORE [[COPY1]](s64), [[PTR_ADD]](p0) :: (store 8 + 8)
    ; CHECK: G_STORE [[TRUNC3]](s32), [[COPY]](p0) :: (store 4, align 2)
    ; CHECK: G_STORE [[COPY1]](s64), [[COPY]](p0) :: (store 8, align 2)
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: G_STORE [[TRUNC4]](s32), [[COPY]](p0) :: (store 4)
    %0:_(p0) = COPY $a4
    %1:_(s64) = COPY $e4
    %2:_(s1) = G_TRUNC %1(s64)
    G_STORE %2(s1), %0(p0) :: (store 1)
    %3:_(s8) = G_TRUNC %1(s64)
    G_STORE %3(s8), %0(p0) :: (store 1)
    %4:_(s16) = G_TRUNC %1(s64)
    G_STORE %4(s16), %0(p0) :: (store 2)
    %5:_(s32) = G_TRUNC %1(s64)
    G_STORE %5(s32), %0(p0) :: (store 4)
    G_STORE %1(s64), %0(p0) :: (store 8)
    G_STORE %0(p0), %0(p0) :: (store 4)
    %6:_(s128) = G_MERGE_VALUES %1(s64), %1(s64)
    G_STORE %6(s128), %0(p0) :: (store 16)
    G_STORE %5(s32), %0(p0) :: (store 4, align 2)
    G_STORE %1(s64), %0(p0) :: (store 8, align 2)
    G_STORE %1(s64), %0(p0) :: (store 4)
...

---
name:            test_store_unaligned
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store_unaligned
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8), [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8), [[UV4:%[0-9]+]]:_(s8), [[UV5:%[0-9]+]]:_(s8), [[UV6:%[0-9]+]]:_(s8), [[UV7:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s64)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[UV]](s8)
    ; CHECK: G_STORE [[ANYEXT]](s32), [[COPY]](p0) :: (store 1)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C]](s32)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s32) = G_ANYEXT [[UV1]](s8)
    ; CHECK: G_STORE [[ANYEXT1]](s32), [[PTR_ADD]](p0) :: (store 1 + 1)
    ; CHECK: [[UV8:%[0-9]+]]:_(s8), [[UV9:%[0-9]+]]:_(s8), [[UV10:%[0-9]+]]:_(s8), [[UV11:%[0-9]+]]:_(s8), [[UV12:%[0-9]+]]:_(s8), [[UV13:%[0-9]+]]:_(s8), [[UV14:%[0-9]+]]:_(s8), [[UV15:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s64)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s32) = G_ANYEXT [[UV8]](s8)
    ; CHECK: G_STORE [[ANYEXT2]](s32), [[COPY]](p0) :: (store 1)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s32) = G_ANYEXT [[UV9]](s8)
    ; CHECK: G_STORE [[ANYEXT3]](s32), [[PTR_ADD1]](p0) :: (store 1 + 1)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C2]](s32)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s32) = G_ANYEXT [[UV10]](s8)
    ; CHECK: G_STORE [[ANYEXT4]](s32), [[PTR_ADD2]](p0) :: (store 1 + 2)
    ; CHECK: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD3:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C3]](s32)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s32) = G_ANYEXT [[UV11]](s8)
    ; CHECK: G_STORE [[ANYEXT5]](s32), [[PTR_ADD3]](p0) :: (store 1 + 3)
    ; CHECK: [[UV16:%[0-9]+]]:_(s8), [[UV17:%[0-9]+]]:_(s8), [[UV18:%[0-9]+]]:_(s8), [[UV19:%[0-9]+]]:_(s8), [[UV20:%[0-9]+]]:_(s8), [[UV21:%[0-9]+]]:_(s8), [[UV22:%[0-9]+]]:_(s8), [[UV23:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY1]](s64)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s32) = G_ANYEXT [[UV16]](s8)
    ; CHECK: G_STORE [[ANYEXT6]](s32), [[COPY]](p0) :: (store 1)
    ; CHECK: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD4:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C4]](s32)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s32) = G_ANYEXT [[UV17]](s8)
    ; CHECK: G_STORE [[ANYEXT7]](s32), [[PTR_ADD4]](p0) :: (store 1 + 1)
    ; CHECK: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD5:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C5]](s32)
    ; CHECK: [[ANYEXT8:%[0-9]+]]:_(s32) = G_ANYEXT [[UV18]](s8)
    ; CHECK: G_STORE [[ANYEXT8]](s32), [[PTR_ADD5]](p0) :: (store 1 + 2)
    ; CHECK: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD6:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C6]](s32)
    ; CHECK: [[ANYEXT9:%[0-9]+]]:_(s32) = G_ANYEXT [[UV19]](s8)
    ; CHECK: G_STORE [[ANYEXT9]](s32), [[PTR_ADD6]](p0) :: (store 1 + 3)
    ; CHECK: [[C7:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD7:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C7]](s32)
    ; CHECK: [[ANYEXT10:%[0-9]+]]:_(s32) = G_ANYEXT [[UV20]](s8)
    ; CHECK: G_STORE [[ANYEXT10]](s32), [[PTR_ADD7]](p0) :: (store 1 + 4)
    ; CHECK: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 5
    ; CHECK: [[PTR_ADD8:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C8]](s32)
    ; CHECK: [[ANYEXT11:%[0-9]+]]:_(s32) = G_ANYEXT [[UV21]](s8)
    ; CHECK: G_STORE [[ANYEXT11]](s32), [[PTR_ADD8]](p0) :: (store 1 + 5)
    ; CHECK: [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 6
    ; CHECK: [[PTR_ADD9:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C9]](s32)
    ; CHECK: [[ANYEXT12:%[0-9]+]]:_(s32) = G_ANYEXT [[UV22]](s8)
    ; CHECK: G_STORE [[ANYEXT12]](s32), [[PTR_ADD9]](p0) :: (store 1 + 6)
    ; CHECK: [[C10:%[0-9]+]]:_(s32) = G_CONSTANT i32 7
    ; CHECK: [[PTR_ADD10:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C10]](s32)
    ; CHECK: [[ANYEXT13:%[0-9]+]]:_(s32) = G_ANYEXT [[UV23]](s8)
    ; CHECK: G_STORE [[ANYEXT13]](s32), [[PTR_ADD10]](p0) :: (store 1 + 7)
    ; CHECK: [[UV24:%[0-9]+]]:_(s8), [[UV25:%[0-9]+]]:_(s8), [[UV26:%[0-9]+]]:_(s8), [[UV27:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[COPY]](p0)
    ; CHECK: [[ANYEXT14:%[0-9]+]]:_(s32) = G_ANYEXT [[UV24]](s8)
    ; CHECK: G_STORE [[ANYEXT14]](s32), [[COPY]](p0) :: (store 1)
    ; CHECK: [[C11:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[PTR_ADD11:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C11]](s32)
    ; CHECK: [[ANYEXT15:%[0-9]+]]:_(s32) = G_ANYEXT [[UV25]](s8)
    ; CHECK: G_STORE [[ANYEXT15]](s32), [[PTR_ADD11]](p0) :: (store 1 + 1)
    ; CHECK: [[C12:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD12:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C12]](s32)
    ; CHECK: [[ANYEXT16:%[0-9]+]]:_(s32) = G_ANYEXT [[UV26]](s8)
    ; CHECK: G_STORE [[ANYEXT16]](s32), [[PTR_ADD12]](p0) :: (store 1 + 2)
    ; CHECK: [[C13:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
    ; CHECK: [[PTR_ADD13:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C13]](s32)
    ; CHECK: [[ANYEXT17:%[0-9]+]]:_(s32) = G_ANYEXT [[UV27]](s8)
    ; CHECK: G_STORE [[ANYEXT17]](s32), [[PTR_ADD13]](p0) :: (store 1 + 3)
    ; CHECK: [[UV28:%[0-9]+]]:_(s16), [[UV29:%[0-9]+]]:_(s16) = G_UNMERGE_VALUES [[COPY]](p0)
    ; CHECK: [[ANYEXT18:%[0-9]+]]:_(s32) = G_ANYEXT [[UV28]](s16)
    ; CHECK: G_STORE [[ANYEXT18]](s32), [[COPY]](p0) :: (store 2)
    ; CHECK: [[C14:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD14:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C14]](s32)
    ; CHECK: [[ANYEXT19:%[0-9]+]]:_(s32) = G_ANYEXT [[UV29]](s16)
    ; CHECK: G_STORE [[ANYEXT19]](s32), [[PTR_ADD14]](p0) :: (store 2 + 2)
    %0:_(p0) = COPY $a4
    %1:_(s64) = COPY $e4
    %2:_(s16) = G_TRUNC %1(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    ; Unaligned stores
    G_STORE %2(s16), %0(p0) :: (store 2, align 1)
    G_STORE %3(s32), %0(p0) :: (store 4, align 1)
    G_STORE %1(s64), %0(p0) :: (store 8, align 1)
    G_STORE %0(p0), %0(p0) :: (store 4, align 1)
    G_STORE %0(p0), %0(p0) :: (store 4, align 2)
...

---
name:            test_nonpow2_store
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_nonpow2_store
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY2]], [[C]](s32)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: G_STORE [[COPY2]](s32), [[COPY]](p0) :: (store 2)
    ; CHECK: G_STORE [[LSHR]](s32), [[PTR_ADD]](p0) :: (store 1 + 2, align 2)
    %0:_(p0) = COPY $a4
    %1:_(s32) = COPY $d4
    %2:_(s24) = G_TRUNC %1(s32)
    G_STORE %2(s24), %0(p0) :: (store 3, align 2)
...

---
name:            test_s104_load_store
body:             |
  bb.0:
    ; This test is modelled after an actual SuperTest failure that we had
    ; CHECK-LABEL: name: test_s104_load_store
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[LOAD:%[0-9]+]]:_(s64) = G_LOAD [[COPY]](p0) :: (load 8, align 2)
    ; CHECK: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C1]](s32)
    ; CHECK: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD]](p0) :: (load 4 + 8, align 2)
    ; CHECK: [[ZEXT:%[0-9]+]]:_(s64) = G_ZEXT [[LOAD1]](s32)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD1:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_ADD]], [[C2]](s32)
    ; CHECK: [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[PTR_ADD1]](p0) :: (load 1 + 12, align 2)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[LOAD2]](s32)
    ; CHECK: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[ANYEXT]](s64)
    ; CHECK: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[C3]], [[C4]]
    ; CHECK: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[C4]], [[C3]]
    ; CHECK: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[C3]](s32), [[C4]]
    ; CHECK: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[C3]](s32), [[C5]]
    ; CHECK: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[UV]], [[C3]](s32)
    ; CHECK: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[UV]], [[SUB1]](s32)
    ; CHECK: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[UV1]], [[C3]](s32)
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[LSHR]], [[SHL1]]
    ; CHECK: [[C6:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[UV]], [[SUB]](s32)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[COPY1]](s32), [[SHL]], [[C6]]
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[COPY2]](s32), [[OR]], [[SHL2]]
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP1]](s32)
    ; CHECK: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[COPY3]](s32), [[UV1]], [[SELECT1]]
    ; CHECK: [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[ZEXT]](s64)
    ; CHECK: [[OR1:%[0-9]+]]:_(s32) = G_OR [[SELECT]], [[UV2]]
    ; CHECK: [[OR2:%[0-9]+]]:_(s32) = G_OR [[SELECT2]], [[UV3]]
    ; CHECK: [[DEF:%[0-9]+]]:_(s64) = G_IMPLICIT_DEF
    ; CHECK: [[C7:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK: [[C8:%[0-9]+]]:_(s32) = G_CONSTANT i32 64
    ; CHECK: [[C9:%[0-9]+]]:_(s32) = G_CONSTANT i32 64
    ; CHECK: [[SUB2:%[0-9]+]]:_(s32) = G_SUB [[C8]], [[C9]]
    ; CHECK: [[SUB3:%[0-9]+]]:_(s32) = G_SUB [[C9]], [[C8]]
    ; CHECK: [[C10:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[C8]](s32), [[C9]]
    ; CHECK: [[ICMP3:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[C8]](s32), [[C10]]
    ; CHECK: [[C11:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[SUB4:%[0-9]+]]:_(s32) = G_SUB [[C8]], [[C11]]
    ; CHECK: [[SUB5:%[0-9]+]]:_(s32) = G_SUB [[C11]], [[C8]]
    ; CHECK: [[C12:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP4:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[C8]](s32), [[C11]]
    ; CHECK: [[ICMP5:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[C8]](s32), [[C12]]
    ; CHECK: [[SHL3:%[0-9]+]]:_(s32) = G_SHL [[OR1]], [[C8]](s32)
    ; CHECK: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[OR1]], [[SUB5]](s32)
    ; CHECK: [[SHL4:%[0-9]+]]:_(s32) = G_SHL [[OR2]], [[C8]](s32)
    ; CHECK: [[OR3:%[0-9]+]]:_(s32) = G_OR [[LSHR1]], [[SHL4]]
    ; CHECK: [[C13:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[SHL5:%[0-9]+]]:_(s32) = G_SHL [[OR1]], [[SUB4]](s32)
    ; CHECK: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ICMP4]](s32)
    ; CHECK: [[SELECT3:%[0-9]+]]:_(s32) = G_SELECT [[COPY4]](s32), [[SHL3]], [[C13]]
    ; CHECK: [[COPY5:%[0-9]+]]:_(s32) = COPY [[ICMP4]](s32)
    ; CHECK: [[SELECT4:%[0-9]+]]:_(s32) = G_SELECT [[COPY5]](s32), [[OR3]], [[SHL5]]
    ; CHECK: [[COPY6:%[0-9]+]]:_(s32) = COPY [[ICMP5]](s32)
    ; CHECK: [[SELECT5:%[0-9]+]]:_(s32) = G_SELECT [[COPY6]](s32), [[OR2]], [[SELECT4]]
    ; CHECK: [[C14:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[SUB6:%[0-9]+]]:_(s32) = G_SUB [[SUB3]], [[C14]]
    ; CHECK: [[SUB7:%[0-9]+]]:_(s32) = G_SUB [[C14]], [[SUB3]]
    ; CHECK: [[C15:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP6:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[SUB3]](s32), [[C14]]
    ; CHECK: [[ICMP7:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[SUB3]](s32), [[C15]]
    ; CHECK: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[OR2]], [[SUB3]](s32)
    ; CHECK: [[LSHR3:%[0-9]+]]:_(s32) = G_LSHR [[OR1]], [[SUB3]](s32)
    ; CHECK: [[SHL6:%[0-9]+]]:_(s32) = G_SHL [[OR2]], [[SUB7]](s32)
    ; CHECK: [[OR4:%[0-9]+]]:_(s32) = G_OR [[LSHR3]], [[SHL6]]
    ; CHECK: [[C16:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[LSHR4:%[0-9]+]]:_(s32) = G_LSHR [[OR2]], [[SUB6]](s32)
    ; CHECK: [[COPY7:%[0-9]+]]:_(s32) = COPY [[ICMP6]](s32)
    ; CHECK: [[SELECT6:%[0-9]+]]:_(s32) = G_SELECT [[COPY7]](s32), [[OR4]], [[LSHR4]]
    ; CHECK: [[COPY8:%[0-9]+]]:_(s32) = COPY [[ICMP7]](s32)
    ; CHECK: [[SELECT7:%[0-9]+]]:_(s32) = G_SELECT [[COPY8]](s32), [[OR1]], [[SELECT6]]
    ; CHECK: [[COPY9:%[0-9]+]]:_(s32) = COPY [[ICMP6]](s32)
    ; CHECK: [[SELECT8:%[0-9]+]]:_(s32) = G_SELECT [[COPY9]](s32), [[LSHR2]], [[C16]]
    ; CHECK: [[C17:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[UV4:%[0-9]+]]:_(s32), [[UV5:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[DEF]](s64)
    ; CHECK: [[SUB8:%[0-9]+]]:_(s32) = G_SUB [[C8]], [[C17]]
    ; CHECK: [[SUB9:%[0-9]+]]:_(s32) = G_SUB [[C17]], [[C8]]
    ; CHECK: [[C18:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP8:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[C8]](s32), [[C17]]
    ; CHECK: [[ICMP9:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[C8]](s32), [[C18]]
    ; CHECK: [[SHL7:%[0-9]+]]:_(s32) = G_SHL [[UV4]], [[C8]](s32)
    ; CHECK: [[LSHR5:%[0-9]+]]:_(s32) = G_LSHR [[UV4]], [[SUB9]](s32)
    ; CHECK: [[SHL8:%[0-9]+]]:_(s32) = G_SHL [[UV5]], [[C8]](s32)
    ; CHECK: [[OR5:%[0-9]+]]:_(s32) = G_OR [[LSHR5]], [[SHL8]]
    ; CHECK: [[C19:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[SHL9:%[0-9]+]]:_(s32) = G_SHL [[UV4]], [[SUB8]](s32)
    ; CHECK: [[COPY10:%[0-9]+]]:_(s32) = COPY [[ICMP8]](s32)
    ; CHECK: [[SELECT9:%[0-9]+]]:_(s32) = G_SELECT [[COPY10]](s32), [[SHL7]], [[C19]]
    ; CHECK: [[COPY11:%[0-9]+]]:_(s32) = COPY [[ICMP8]](s32)
    ; CHECK: [[SELECT10:%[0-9]+]]:_(s32) = G_SELECT [[COPY11]](s32), [[OR5]], [[SHL9]]
    ; CHECK: [[COPY12:%[0-9]+]]:_(s32) = COPY [[ICMP9]](s32)
    ; CHECK: [[SELECT11:%[0-9]+]]:_(s32) = G_SELECT [[COPY12]](s32), [[UV5]], [[SELECT10]]
    ; CHECK: [[OR6:%[0-9]+]]:_(s32) = G_OR [[SELECT7]], [[SELECT9]]
    ; CHECK: [[OR7:%[0-9]+]]:_(s32) = G_OR [[SELECT8]], [[SELECT11]]
    ; CHECK: [[C20:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK: [[C21:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[SUB10:%[0-9]+]]:_(s32) = G_SUB [[SUB2]], [[C21]]
    ; CHECK: [[SUB11:%[0-9]+]]:_(s32) = G_SUB [[C21]], [[SUB2]]
    ; CHECK: [[C22:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP10:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[SUB2]](s32), [[C21]]
    ; CHECK: [[ICMP11:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[SUB2]](s32), [[C22]]
    ; CHECK: [[SHL10:%[0-9]+]]:_(s32) = G_SHL [[OR1]], [[SUB2]](s32)
    ; CHECK: [[LSHR6:%[0-9]+]]:_(s32) = G_LSHR [[OR1]], [[SUB11]](s32)
    ; CHECK: [[SHL11:%[0-9]+]]:_(s32) = G_SHL [[OR2]], [[SUB2]](s32)
    ; CHECK: [[OR8:%[0-9]+]]:_(s32) = G_OR [[LSHR6]], [[SHL11]]
    ; CHECK: [[C23:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[SHL12:%[0-9]+]]:_(s32) = G_SHL [[OR1]], [[SUB10]](s32)
    ; CHECK: [[COPY13:%[0-9]+]]:_(s32) = COPY [[ICMP10]](s32)
    ; CHECK: [[SELECT12:%[0-9]+]]:_(s32) = G_SELECT [[COPY13]](s32), [[SHL10]], [[C23]]
    ; CHECK: [[COPY14:%[0-9]+]]:_(s32) = COPY [[ICMP10]](s32)
    ; CHECK: [[SELECT13:%[0-9]+]]:_(s32) = G_SELECT [[COPY14]](s32), [[OR8]], [[SHL12]]
    ; CHECK: [[COPY15:%[0-9]+]]:_(s32) = COPY [[ICMP11]](s32)
    ; CHECK: [[SELECT14:%[0-9]+]]:_(s32) = G_SELECT [[COPY15]](s32), [[OR2]], [[SELECT13]]
    ; CHECK: [[UV6:%[0-9]+]]:_(s32), [[UV7:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C20]](s64)
    ; CHECK: [[COPY16:%[0-9]+]]:_(s32) = COPY [[ICMP2]](s32)
    ; CHECK: [[SELECT15:%[0-9]+]]:_(s32) = G_SELECT [[COPY16]](s32), [[SELECT3]], [[UV6]]
    ; CHECK: [[COPY17:%[0-9]+]]:_(s32) = COPY [[ICMP2]](s32)
    ; CHECK: [[SELECT16:%[0-9]+]]:_(s32) = G_SELECT [[COPY17]](s32), [[SELECT5]], [[UV7]]
    ; CHECK: [[COPY18:%[0-9]+]]:_(s32) = COPY [[ICMP2]](s32)
    ; CHECK: [[SELECT17:%[0-9]+]]:_(s32) = G_SELECT [[COPY18]](s32), [[OR6]], [[SELECT12]]
    ; CHECK: [[COPY19:%[0-9]+]]:_(s32) = COPY [[ICMP2]](s32)
    ; CHECK: [[SELECT18:%[0-9]+]]:_(s32) = G_SELECT [[COPY19]](s32), [[OR7]], [[SELECT14]]
    ; CHECK: [[UV8:%[0-9]+]]:_(s32), [[UV9:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[DEF]](s64)
    ; CHECK: [[COPY20:%[0-9]+]]:_(s32) = COPY [[ICMP3]](s32)
    ; CHECK: [[SELECT19:%[0-9]+]]:_(s32) = G_SELECT [[COPY20]](s32), [[UV8]], [[SELECT17]]
    ; CHECK: [[COPY21:%[0-9]+]]:_(s32) = COPY [[ICMP3]](s32)
    ; CHECK: [[SELECT20:%[0-9]+]]:_(s32) = G_SELECT [[COPY21]](s32), [[UV9]], [[SELECT18]]
    ; CHECK: [[UV10:%[0-9]+]]:_(s32), [[UV11:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[LOAD]](s64)
    ; CHECK: [[UV12:%[0-9]+]]:_(s32), [[UV13:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C]](s64)
    ; CHECK: [[OR9:%[0-9]+]]:_(s32) = G_OR [[SELECT15]], [[UV10]]
    ; CHECK: [[OR10:%[0-9]+]]:_(s32) = G_OR [[SELECT16]], [[UV11]]
    ; CHECK: [[OR11:%[0-9]+]]:_(s32) = G_OR [[SELECT19]], [[UV12]]
    ; CHECK: [[OR12:%[0-9]+]]:_(s32) = G_OR [[SELECT20]], [[UV13]]
    ; CHECK: [[C24:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK: [[C25:%[0-9]+]]:_(s32) = G_CONSTANT i32 64
    ; CHECK: [[C26:%[0-9]+]]:_(s32) = G_CONSTANT i32 64
    ; CHECK: [[SUB12:%[0-9]+]]:_(s32) = G_SUB [[C25]], [[C26]]
    ; CHECK: [[SUB13:%[0-9]+]]:_(s32) = G_SUB [[C26]], [[C25]]
    ; CHECK: [[C27:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP12:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[C25]](s32), [[C26]]
    ; CHECK: [[ICMP13:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[C25]](s32), [[C27]]
    ; CHECK: [[C28:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[SUB14:%[0-9]+]]:_(s32) = G_SUB [[C25]], [[C28]]
    ; CHECK: [[SUB15:%[0-9]+]]:_(s32) = G_SUB [[C28]], [[C25]]
    ; CHECK: [[C29:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP14:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[C25]](s32), [[C28]]
    ; CHECK: [[ICMP15:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[C25]](s32), [[C29]]
    ; CHECK: [[LSHR7:%[0-9]+]]:_(s32) = G_LSHR [[OR12]], [[C25]](s32)
    ; CHECK: [[LSHR8:%[0-9]+]]:_(s32) = G_LSHR [[OR11]], [[C25]](s32)
    ; CHECK: [[SHL13:%[0-9]+]]:_(s32) = G_SHL [[OR12]], [[SUB15]](s32)
    ; CHECK: [[OR13:%[0-9]+]]:_(s32) = G_OR [[LSHR8]], [[SHL13]]
    ; CHECK: [[C30:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[LSHR9:%[0-9]+]]:_(s32) = G_LSHR [[OR12]], [[SUB14]](s32)
    ; CHECK: [[COPY22:%[0-9]+]]:_(s32) = COPY [[ICMP14]](s32)
    ; CHECK: [[SELECT21:%[0-9]+]]:_(s32) = G_SELECT [[COPY22]](s32), [[OR13]], [[LSHR9]]
    ; CHECK: [[COPY23:%[0-9]+]]:_(s32) = COPY [[ICMP15]](s32)
    ; CHECK: [[SELECT22:%[0-9]+]]:_(s32) = G_SELECT [[COPY23]](s32), [[OR11]], [[SELECT21]]
    ; CHECK: [[COPY24:%[0-9]+]]:_(s32) = COPY [[ICMP14]](s32)
    ; CHECK: [[SELECT23:%[0-9]+]]:_(s32) = G_SELECT [[COPY24]](s32), [[LSHR7]], [[C30]]
    ; CHECK: [[C31:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[SUB16:%[0-9]+]]:_(s32) = G_SUB [[C25]], [[C31]]
    ; CHECK: [[SUB17:%[0-9]+]]:_(s32) = G_SUB [[C31]], [[C25]]
    ; CHECK: [[C32:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP16:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[C25]](s32), [[C31]]
    ; CHECK: [[ICMP17:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[C25]](s32), [[C32]]
    ; CHECK: [[LSHR10:%[0-9]+]]:_(s32) = G_LSHR [[OR10]], [[C25]](s32)
    ; CHECK: [[LSHR11:%[0-9]+]]:_(s32) = G_LSHR [[OR9]], [[C25]](s32)
    ; CHECK: [[SHL14:%[0-9]+]]:_(s32) = G_SHL [[OR10]], [[SUB17]](s32)
    ; CHECK: [[OR14:%[0-9]+]]:_(s32) = G_OR [[LSHR11]], [[SHL14]]
    ; CHECK: [[C33:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[LSHR12:%[0-9]+]]:_(s32) = G_LSHR [[OR10]], [[SUB16]](s32)
    ; CHECK: [[COPY25:%[0-9]+]]:_(s32) = COPY [[ICMP16]](s32)
    ; CHECK: [[SELECT24:%[0-9]+]]:_(s32) = G_SELECT [[COPY25]](s32), [[OR14]], [[LSHR12]]
    ; CHECK: [[COPY26:%[0-9]+]]:_(s32) = COPY [[ICMP17]](s32)
    ; CHECK: [[SELECT25:%[0-9]+]]:_(s32) = G_SELECT [[COPY26]](s32), [[OR9]], [[SELECT24]]
    ; CHECK: [[COPY27:%[0-9]+]]:_(s32) = COPY [[ICMP16]](s32)
    ; CHECK: [[SELECT26:%[0-9]+]]:_(s32) = G_SELECT [[COPY27]](s32), [[LSHR10]], [[C33]]
    ; CHECK: [[C34:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[SUB18:%[0-9]+]]:_(s32) = G_SUB [[SUB13]], [[C34]]
    ; CHECK: [[SUB19:%[0-9]+]]:_(s32) = G_SUB [[C34]], [[SUB13]]
    ; CHECK: [[C35:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP18:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[SUB13]](s32), [[C34]]
    ; CHECK: [[ICMP19:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[SUB13]](s32), [[C35]]
    ; CHECK: [[SHL15:%[0-9]+]]:_(s32) = G_SHL [[OR11]], [[SUB13]](s32)
    ; CHECK: [[LSHR13:%[0-9]+]]:_(s32) = G_LSHR [[OR11]], [[SUB19]](s32)
    ; CHECK: [[SHL16:%[0-9]+]]:_(s32) = G_SHL [[OR12]], [[SUB13]](s32)
    ; CHECK: [[OR15:%[0-9]+]]:_(s32) = G_OR [[LSHR13]], [[SHL16]]
    ; CHECK: [[C36:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[SHL17:%[0-9]+]]:_(s32) = G_SHL [[OR11]], [[SUB18]](s32)
    ; CHECK: [[COPY28:%[0-9]+]]:_(s32) = COPY [[ICMP18]](s32)
    ; CHECK: [[SELECT27:%[0-9]+]]:_(s32) = G_SELECT [[COPY28]](s32), [[SHL15]], [[C36]]
    ; CHECK: [[COPY29:%[0-9]+]]:_(s32) = COPY [[ICMP18]](s32)
    ; CHECK: [[SELECT28:%[0-9]+]]:_(s32) = G_SELECT [[COPY29]](s32), [[OR15]], [[SHL17]]
    ; CHECK: [[COPY30:%[0-9]+]]:_(s32) = COPY [[ICMP19]](s32)
    ; CHECK: [[SELECT29:%[0-9]+]]:_(s32) = G_SELECT [[COPY30]](s32), [[OR12]], [[SELECT28]]
    ; CHECK: [[OR16:%[0-9]+]]:_(s32) = G_OR [[SELECT25]], [[SELECT27]]
    ; CHECK: [[OR17:%[0-9]+]]:_(s32) = G_OR [[SELECT26]], [[SELECT29]]
    ; CHECK: [[C37:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK: [[C38:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[SUB20:%[0-9]+]]:_(s32) = G_SUB [[SUB12]], [[C38]]
    ; CHECK: [[SUB21:%[0-9]+]]:_(s32) = G_SUB [[C38]], [[SUB12]]
    ; CHECK: [[C39:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP20:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[SUB12]](s32), [[C38]]
    ; CHECK: [[ICMP21:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[SUB12]](s32), [[C39]]
    ; CHECK: [[LSHR14:%[0-9]+]]:_(s32) = G_LSHR [[OR12]], [[SUB12]](s32)
    ; CHECK: [[LSHR15:%[0-9]+]]:_(s32) = G_LSHR [[OR11]], [[SUB12]](s32)
    ; CHECK: [[SHL18:%[0-9]+]]:_(s32) = G_SHL [[OR12]], [[SUB21]](s32)
    ; CHECK: [[OR18:%[0-9]+]]:_(s32) = G_OR [[LSHR15]], [[SHL18]]
    ; CHECK: [[C40:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[LSHR16:%[0-9]+]]:_(s32) = G_LSHR [[OR12]], [[SUB20]](s32)
    ; CHECK: [[COPY31:%[0-9]+]]:_(s32) = COPY [[ICMP20]](s32)
    ; CHECK: [[SELECT30:%[0-9]+]]:_(s32) = G_SELECT [[COPY31]](s32), [[OR18]], [[LSHR16]]
    ; CHECK: [[COPY32:%[0-9]+]]:_(s32) = COPY [[ICMP21]](s32)
    ; CHECK: [[SELECT31:%[0-9]+]]:_(s32) = G_SELECT [[COPY32]](s32), [[OR11]], [[SELECT30]]
    ; CHECK: [[COPY33:%[0-9]+]]:_(s32) = COPY [[ICMP20]](s32)
    ; CHECK: [[SELECT32:%[0-9]+]]:_(s32) = G_SELECT [[COPY33]](s32), [[LSHR14]], [[C40]]
    ; CHECK: [[COPY34:%[0-9]+]]:_(s32) = COPY [[ICMP12]](s32)
    ; CHECK: [[SELECT33:%[0-9]+]]:_(s32) = G_SELECT [[COPY34]](s32), [[OR16]], [[SELECT31]]
    ; CHECK: [[COPY35:%[0-9]+]]:_(s32) = COPY [[ICMP12]](s32)
    ; CHECK: [[SELECT34:%[0-9]+]]:_(s32) = G_SELECT [[COPY35]](s32), [[OR17]], [[SELECT32]]
    ; CHECK: [[COPY36:%[0-9]+]]:_(s32) = COPY [[ICMP13]](s32)
    ; CHECK: [[SELECT35:%[0-9]+]]:_(s32) = G_SELECT [[COPY36]](s32), [[OR9]], [[SELECT33]]
    ; CHECK: [[COPY37:%[0-9]+]]:_(s32) = COPY [[ICMP13]](s32)
    ; CHECK: [[SELECT36:%[0-9]+]]:_(s32) = G_SELECT [[COPY37]](s32), [[OR10]], [[SELECT34]]
    ; CHECK: [[UV14:%[0-9]+]]:_(s32), [[UV15:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C37]](s64)
    ; CHECK: [[COPY38:%[0-9]+]]:_(s32) = COPY [[ICMP12]](s32)
    ; CHECK: [[SELECT37:%[0-9]+]]:_(s32) = G_SELECT [[COPY38]](s32), [[SELECT22]], [[UV14]]
    ; CHECK: [[COPY39:%[0-9]+]]:_(s32) = COPY [[ICMP12]](s32)
    ; CHECK: [[SELECT38:%[0-9]+]]:_(s32) = G_SELECT [[COPY39]](s32), [[SELECT23]], [[UV15]]
    ; CHECK: [[C41:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[PTR_ADD2:%[0-9]+]]:_(p0) = G_PTR_ADD [[COPY]], [[C41]](s32)
    ; CHECK: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[OR9]](s32), [[OR10]](s32)
    ; CHECK: G_STORE [[MV]](s64), [[COPY]](p0) :: (store 8, align 2)
    ; CHECK: [[C42:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[C43:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[SUB22:%[0-9]+]]:_(s32) = G_SUB [[C42]], [[C43]]
    ; CHECK: [[SUB23:%[0-9]+]]:_(s32) = G_SUB [[C43]], [[C42]]
    ; CHECK: [[C44:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP22:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[C42]](s32), [[C43]]
    ; CHECK: [[ICMP23:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[C42]](s32), [[C44]]
    ; CHECK: [[LSHR17:%[0-9]+]]:_(s32) = G_LSHR [[SELECT36]], [[C42]](s32)
    ; CHECK: [[LSHR18:%[0-9]+]]:_(s32) = G_LSHR [[SELECT35]], [[C42]](s32)
    ; CHECK: [[SHL19:%[0-9]+]]:_(s32) = G_SHL [[SELECT36]], [[SUB23]](s32)
    ; CHECK: [[OR19:%[0-9]+]]:_(s32) = G_OR [[LSHR18]], [[SHL19]]
    ; CHECK: [[C45:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[LSHR19:%[0-9]+]]:_(s32) = G_LSHR [[SELECT36]], [[SUB22]](s32)
    ; CHECK: [[COPY40:%[0-9]+]]:_(s32) = COPY [[ICMP22]](s32)
    ; CHECK: [[SELECT39:%[0-9]+]]:_(s32) = G_SELECT [[COPY40]](s32), [[OR19]], [[LSHR19]]
    ; CHECK: [[COPY41:%[0-9]+]]:_(s32) = COPY [[ICMP23]](s32)
    ; CHECK: [[SELECT40:%[0-9]+]]:_(s32) = G_SELECT [[COPY41]](s32), [[SELECT35]], [[SELECT39]]
    ; CHECK: [[COPY42:%[0-9]+]]:_(s32) = COPY [[ICMP22]](s32)
    ; CHECK: [[SELECT41:%[0-9]+]]:_(s32) = G_SELECT [[COPY42]](s32), [[LSHR17]], [[C45]]
    ; CHECK: [[C46:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
    ; CHECK: [[PTR_ADD3:%[0-9]+]]:_(p0) = G_PTR_ADD [[PTR_ADD2]], [[C46]](s32)
    ; CHECK: G_STORE [[SELECT35]](s32), [[PTR_ADD2]](p0) :: (store 4 + 8, align 2)
    ; CHECK: G_STORE [[SELECT40]](s32), [[PTR_ADD3]](p0) :: (store 1 + 12, align 2)
    %0:_(p0) = COPY $a4
    %1:_(s104) = G_LOAD %0(p0) :: (load 13, align 2)
    G_STORE %1(s104), %0(p0) :: (store 13, align 2)
...
