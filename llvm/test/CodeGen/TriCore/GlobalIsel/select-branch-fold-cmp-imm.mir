# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

---
name:            conditional_branch_ne_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_ne_min
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JNE_dcc [[COPY]], -8, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -8
    %2(s32) = G_ICMP intpred(ne), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_ne_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_ne_max
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JNE_dcc [[COPY]], 7, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 7
    %2(s32) = G_ICMP intpred(ne), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_ne_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_ne_too_small
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967287
  ; CHECK:   JNE_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -9
    %2(s32) = G_ICMP intpred(ne), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_ne_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_ne_too_big
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 8
  ; CHECK:   JNE_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 8
    %2(s32) = G_ICMP intpred(ne), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_eq_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_eq_min
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JEQ_dcc [[COPY]], -8, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -8
    %2(s32) = G_ICMP intpred(eq), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_eq_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_eq_max
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JEQ_dcc [[COPY]], 7, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 7
    %2(s32) = G_ICMP intpred(eq), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_eq_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_eq_too_small
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967287
  ; CHECK:   JEQ_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -9
    %2(s32) = G_ICMP intpred(eq), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_eq_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_eq_too_big
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 8
  ; CHECK:   JEQ_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 8
    %2(s32) = G_ICMP intpred(eq), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_sge_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_sge_min
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JGE_dcc [[COPY]], -8, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -8
    %2(s32) = G_ICMP intpred(sge), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_sge_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_sge_max
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JGE_dcc [[COPY]], 7, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 7
    %2(s32) = G_ICMP intpred(sge), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_sge_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_sge_too_small
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967287
  ; CHECK:   JGE_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -9
    %2(s32) = G_ICMP intpred(sge), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_sge_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_sge_too_big
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 8
  ; CHECK:   JGE_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 8
    %2(s32) = G_ICMP intpred(sge), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_uge_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_uge_min
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JGEU_dcc [[COPY]], 0, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 0
    %2(s32) = G_ICMP intpred(uge), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_uge_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_uge_max
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JGEU_dcc [[COPY]], 15, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 15
    %2(s32) = G_ICMP intpred(uge), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_uge_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_uge_too_big
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 16
  ; CHECK:   JGEU_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 16
    %2(s32) = G_ICMP intpred(uge), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_slt_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_slt_min
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JLT_dcc [[COPY]], -8, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -8
    %2(s32) = G_ICMP intpred(slt), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_slt_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_slt_max
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JLT_dcc [[COPY]], 7, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 7
    %2(s32) = G_ICMP intpred(slt), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_slt_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_slt_too_small
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967287
  ; CHECK:   JLT_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -9
    %2(s32) = G_ICMP intpred(slt), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_slt_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_slt_too_big
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 8
  ; CHECK:   JLT_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 8
    %2(s32) = G_ICMP intpred(slt), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_ult_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_ult_min
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JLTU_dcc [[COPY]], 0, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 0
    %2(s32) = G_ICMP intpred(ult), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_ult_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_ult_max
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   JLTU_dcc [[COPY]], 15, %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 15
    %2(s32) = G_ICMP intpred(ult), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...

---
name:            conditional_branch_ult_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
body:             |
  ; CHECK-LABEL: name: conditional_branch_ult_too_big
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 16
  ; CHECK:   JLTU_ddc [[COPY]], [[MOVImmDataReg]], %bb.1
  ; CHECK:   J %bb.0
  ; CHECK: bb.1:
  bb.0:
    successors: %bb.0, %bb.1
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 16
    %2(s32) = G_ICMP intpred(ult), %0(s32), %1
    %3(s1) = G_TRUNC %2
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.0
  bb.1:
...
