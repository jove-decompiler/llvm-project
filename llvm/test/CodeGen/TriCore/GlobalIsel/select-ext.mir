# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_sext
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
  - { id: 5, class: dataregbank }
  - { id: 6, class: dataregbank }
  - { id: 7, class: dataregbank }
  - { id: 8, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_sext
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDB_dalc:%[0-9]+]]:dataregs = LDB_dalc [[COPY]], 0 :: (load 1)
    ; CHECK: [[EXTR_ddcc:%[0-9]+]]:dataregs = EXTR_ddcc [[LDB_dalc]], 0, 8
    ; CHECK: $d2 = COPY [[EXTR_ddcc]]
    ; CHECK: [[EXTR_ddcc1:%[0-9]+]]:dataregs = EXTR_ddcc [[LDB_dalc]], 0, 8
    ; CHECK: [[SHA_ddc:%[0-9]+]]:dataregs = SHA_ddc [[EXTR_ddcc1]], -31, implicit-def $psw
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:extdataregs = REG_SEQUENCE [[EXTR_ddcc1]], %subreg.dsub0, [[SHA_ddc]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE]]
    ; CHECK: [[LDD_eac:%[0-9]+]]:extdataregs = LDD_eac [[COPY]], 0 :: (load 8)
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY [[LDD_eac]].dsub1
    ; CHECK: [[EXTR_ddcc2:%[0-9]+]]:dataregs = EXTR_ddcc [[COPY1]], 0, 16
    ; CHECK: [[INSERT_SUBREG:%[0-9]+]]:extdataregs = INSERT_SUBREG [[LDD_eac]], [[EXTR_ddcc2]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[INSERT_SUBREG]]
    ; CHECK: [[MUL_edc:%[0-9]+]]:extdataregs = MUL_edc [[LDB_dalc]], 1, implicit-def $psw
    ; CHECK: $e2 = COPY [[MUL_edc]]
    %0(p0) = COPY $a4
    %1(s32) = G_LOAD %0(p0) :: (load 1)
    %2(s8) = G_TRUNC %1(s32)
    %3(s32) = G_SEXT %2(s8)
    $d2 = COPY %3(s32)
    %4(s64) = G_SEXT %2(s8)
    $e2 = COPY %4(s64)
    %5(s64) = G_LOAD %0(p0) :: (load 8)
    %6(s48) = G_TRUNC %5(s64)
    %7(s64) = G_SEXT %6(s48)
    $e2 = COPY %7(s64)
    %8(s64) = G_SEXT %1(s32)
    $e2 = COPY %8(s64)
...

---
name:            test_zext
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
  - { id: 5, class: dataregbank }
  - { id: 6, class: dataregbank }
  - { id: 7, class: dataregbank }
  - { id: 8, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_zext
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDB_dalc:%[0-9]+]]:dataregs = LDB_dalc [[COPY]], 0 :: (load 1)
    ; CHECK: [[INSERT_ddccc:%[0-9]+]]:dataregs = INSERT_ddccc [[LDB_dalc]], 0, 8, 24
    ; CHECK: $d2 = COPY [[INSERT_ddccc]]
    ; CHECK: [[INSERT_ddccc1:%[0-9]+]]:dataregs = INSERT_ddccc [[LDB_dalc]], 0, 8, 24
    ; CHECK: [[MOV_dc:%[0-9]+]]:dataregs = MOV_dc 0
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:extdataregs = REG_SEQUENCE [[INSERT_ddccc1]], %subreg.dsub0, [[MOV_dc]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE]]
    ; CHECK: [[LDD_eac:%[0-9]+]]:extdataregs = LDD_eac [[COPY]], 0 :: (load 8)
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY [[LDD_eac]].dsub1
    ; CHECK: [[INSERT_ddccc2:%[0-9]+]]:dataregs = INSERT_ddccc [[COPY1]], 0, 16, 16
    ; CHECK: [[INSERT_SUBREG:%[0-9]+]]:extdataregs = INSERT_SUBREG [[LDD_eac]], [[INSERT_ddccc2]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[INSERT_SUBREG]]
    ; CHECK: [[MOV_dc1:%[0-9]+]]:dataregs = MOV_dc 0
    ; CHECK: [[REG_SEQUENCE1:%[0-9]+]]:extdataregs = REG_SEQUENCE [[LDB_dalc]], %subreg.dsub0, [[MOV_dc1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE1]]
    %0(p0) = COPY $a4
    %1(s32) = G_LOAD %0(p0) :: (load 1)
    %2(s8) = G_TRUNC %1(s32)
    %3(s32) = G_ZEXT %2(s8)
    $d2 = COPY %3(s32)
    %4(s64) = G_ZEXT %2(s8)
    $e2 = COPY %4(s64)
    %5(s64) = G_LOAD %0(p0) :: (load 8)
    %6(s48) = G_TRUNC %5(s64)
    %7(s64) = G_ZEXT %6(s48)
    $e2 = COPY %7(s64)
    %8(s64) = G_ZEXT %1(s32)
    $e2 = COPY %8(s64)
...

---
name:            test_anyext
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
  - { id: 5, class: dataregbank }
  - { id: 6, class: dataregbank }
  - { id: 7, class: dataregbank }
  - { id: 8, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_anyext
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDB_dalc:%[0-9]+]]:dataregs = LDB_dalc [[COPY]], 0 :: (load 1)
    ; CHECK: $d2 = COPY [[LDB_dalc]]
    ; CHECK: [[DEF:%[0-9]+]]:extdataregs = IMPLICIT_DEF
    ; CHECK: [[INSERT_SUBREG:%[0-9]+]]:extdataregs = INSERT_SUBREG [[DEF]], [[LDB_dalc]], %subreg.dsub0
    ; CHECK: $e2 = COPY [[INSERT_SUBREG]]
    ; CHECK: [[LDD_eac:%[0-9]+]]:extdataregs = LDD_eac [[COPY]], 0 :: (load 8)
    ; CHECK: $e2 = COPY [[LDD_eac]]
    ; CHECK: [[DEF2:%[0-9]+]]:extdataregs = IMPLICIT_DEF
    ; CHECK: [[INSERT_SUBREG2:%[0-9]+]]:extdataregs = INSERT_SUBREG [[DEF2]], [[LDB_dalc]], %subreg.dsub0
    ; CHECK: $e2 = COPY [[INSERT_SUBREG2]]
    %0(p0) = COPY $a4
    %1(s32) = G_LOAD %0(p0) :: (load 1)
    %2(s8) = G_TRUNC %1(s32)
    %3(s32) = G_ANYEXT %2(s8)
    $d2 = COPY %3(s32)
    %4(s64) = G_ANYEXT %2(s8)
    $e2 = COPY %4(s64)
    %5(s64) = G_LOAD %0(p0) :: (load 8)
    %6(s48) = G_TRUNC %5(s64)
    %7(s64) = G_ANYEXT %6(s48)
    $e2 = COPY %7(s64)
    %8(s64) = G_ANYEXT %1(s32)
    $e2 = COPY %8(s64)
...

---
name:            test_sext_inreg
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
  - { id: 5, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_sext_inreg
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[EXTR_ddcc:%[0-9]+]]:dataregs = EXTR_ddcc [[COPY]], 0, 16
    ; CHECK: $d2 = COPY [[EXTR_ddcc]]
    ; CHECK: [[COPY1:%[0-9]+]]:extdataregs = COPY $e4
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[COPY1]].dsub1
    ; CHECK: [[EXTR_ddcc1:%[0-9]+]]:dataregs = EXTR_ddcc [[COPY2]], 0, 16
    ; CHECK: [[INSERT_SUBREG:%[0-9]+]]:extdataregs = INSERT_SUBREG [[COPY1]], [[EXTR_ddcc1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[INSERT_SUBREG]]
    ; CHECK: [[COPY3:%[0-9]+]]:dataregs = COPY [[COPY1]].dsub0
    ; CHECK: [[EXTR_ddcc2:%[0-9]+]]:dataregs = EXTR_ddcc [[COPY3]], 0, 16
    ; CHECK: [[SHA_ddc:%[0-9]+]]:dataregs = SHA_ddc [[EXTR_ddcc2]], -31, implicit-def $psw
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:extdataregs = REG_SEQUENCE [[EXTR_ddcc2]], %subreg.dsub0, [[SHA_ddc]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE]]
    ; CHECK: [[COPY4:%[0-9]+]]:dataregs = COPY [[COPY1]].dsub0
    ; CHECK: [[MUL_edc:%[0-9]+]]:extdataregs = MUL_edc [[COPY4]], 1, implicit-def $psw
    ; CHECK: $e2 = COPY [[MUL_edc]]
    %0(s32) = COPY $d4
    %1(s32) = G_SEXT_INREG %0(s32), 16
    $d2 = COPY %1(s32)
    %2(s64) = COPY $e4
    %3(s64) = G_SEXT_INREG %2(s64), 48
    $e2 = COPY %3(s64)
    %4(s64) = G_SEXT_INREG %2(s64), 16
    $e2 = COPY %4(s64)
    %5(s64) = G_SEXT_INREG %2(s64), 32
    $e2 = COPY %5(s64)
...
