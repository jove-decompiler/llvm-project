# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -global-isel-abort=2 -pass-remarks-missed='gisel*' -run-pass=legalizer -verify-machineinstrs %s -o - 2>&1 | FileCheck %s --check-prefix=ERROR

# The GlobalISel legalizer does not know how to legalize the big type of a
# merge/unmerge. The following tests have in common a legal small type with an
# illegal big type. Therefore legalization cannot succeed for them.
#
# Since this is not something we don't support yet, but simply a short-coming of
# the current GlobalISel framework, this is not an XFAIL test but rather an
# invalid test. If this at one point starts failing we know that this is now
# supported and we can then check whether we handle them correctly.

# ERROR-NOT: remark:
# ERROR: remark: <unknown>:0:0: unable to legalize instruction: %6:_(s96) = G_MERGE_VALUES %0:_(s16), %1:_(s16), %2:_(s16), %3:_(s16), %4:_(s16), %5:_(s16) (in function: test_merge_s96_s16)
# ERROR: remark: <unknown>:0:0: unable to legalize instruction: %7:_(s56) = G_MERGE_VALUES %0:_(s8), %1:_(s8), %2:_(s8), %3:_(s8), %4:_(s8), %5:_(s8), %6:_(s8) (in function: test_merge_s56_s8)
# ERROR-NOT: remark:

---
name: test_merge_s96_s16
body: |
  bb.0:
    %0:_(s16) = G_CONSTANT i16 0
    %1:_(s16) = G_CONSTANT i16 1
    %2:_(s16) = G_CONSTANT i16 2
    %3:_(s16) = G_CONSTANT i16 3
    %4:_(s16) = G_CONSTANT i16 4
    %5:_(s16) = G_CONSTANT i16 5
    %8:_(s96) = G_MERGE_VALUES %0, %1, %2, %3, %4, %5
    %9:_(s64) = G_TRUNC %8
    $e0 = COPY %9
...

---
name: test_merge_s56_s8
body: |
  bb.0:
    %0:_(s8) = G_CONSTANT i8 0
    %1:_(s8) = G_CONSTANT i8 1
    %2:_(s8) = G_CONSTANT i8 2
    %3:_(s8) = G_CONSTANT i8 3
    %4:_(s8) = G_CONSTANT i8 4
    %5:_(s8) = G_CONSTANT i8 5
    %6:_(s8) = G_CONSTANT i8 6
    %7:_(s56) = G_MERGE_VALUES %0, %1, %2, %3, %4, %5, %6
    %8:_(s64) = G_ANYEXT %7
    $e0 = COPY %8
...
