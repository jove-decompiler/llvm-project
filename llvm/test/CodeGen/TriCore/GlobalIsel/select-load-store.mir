# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_load
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: addrregbank }
  - { id: 5, class: dataregbank }
  - { id: 6, class: addrregbank }
  - { id: 7, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDB_dalc:%[0-9]+]]:dataregs = LDB_dalc [[COPY]], 0 :: (load 1)
    ; CHECK: $d2 = COPY [[LDB_dalc]]
    ; CHECK: [[LDH_dalc:%[0-9]+]]:dataregs = LDH_dalc [[COPY]], 0 :: (load 2)
    ; CHECK: $d2 = COPY [[LDH_dalc]]
    ; CHECK: [[LDW_dalc:%[0-9]+]]:dataregs = LDW_dalc [[COPY]], 0 :: (load 4)
    ; CHECK: $d2 = COPY [[LDW_dalc]]
    ; CHECK: [[LDA_aalc:%[0-9]+]]:addrregs = LDA_aalc [[COPY]], 0 :: (load 4)
    ; CHECK: $a2 = COPY [[LDA_aalc]]
    ; CHECK: [[LDD_eac:%[0-9]+]]:extdataregs = LDD_eac [[COPY]], 0 :: (load 8)
    ; CHECK: $e2 = COPY [[LDD_eac]]
    ; CHECK: [[LDDA_pac:%[0-9]+]]:extaddrregs = LDDA_pac [[COPY]], 0 :: (load 8)
    ; CHECK: $p2 = COPY [[LDDA_pac]]
    ; CHECK: [[LDA_aalc1:%[0-9]+]]:addrregs = LDA_aalc [[COPY]], 0 :: (load 4)
    ; CHECK: $a2 = COPY [[LDA_aalc1]]
    %0(p0) = COPY $a4
    %1(s32) = G_LOAD %0(p0) :: (load 1)
    $d2 = COPY %1(s32)
    %2(s32) = G_LOAD %0(p0) :: (load 2)
    $d2 = COPY %2(s32)
    %3(s32) = G_LOAD %0(p0) :: (load 4)
    $d2 = COPY %3(s32)
    %4(s32) = G_LOAD %0(p0) :: (load 4)
    $a2 = COPY %4(s32)
    %5(s64) = G_LOAD %0(p0) :: (load 8)
    $e2 = COPY %5(s64)
    %6(s64) = G_LOAD %0(p0) :: (load 8)
    $p2 = COPY %6(s64)
    %7(p0) = G_LOAD %0(p0) :: (load 4)
    $a2 = COPY %7(p0)
...

---
name:            test_store
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY2:%[0-9]+]]:extdataregs = COPY $e4
    ; CHECK: [[COPY3:%[0-9]+]]:addrregs = COPY [[COPY1]]
    ; CHECK: [[COPY4:%[0-9]+]]:extaddrregs = COPY [[COPY2]]
    ; CHECK: STB_alcd [[COPY]], 0, [[COPY1]] :: (store 1)
    ; CHECK: STH_alcd [[COPY]], 0, [[COPY1]] :: (store 2)
    ; CHECK: STW_alcd [[COPY]], 0, [[COPY1]] :: (store 4)
    ; CHECK: STA_alca [[COPY]], 0, [[COPY3]] :: (store 4)
    ; CHECK: STD_ace [[COPY]], 0, [[COPY2]] :: (store 8)
    ; CHECK: STDA_acp [[COPY]], 0, [[COPY4]] :: (store 8)
    ; CHECK: STA_alca [[COPY]], 0, [[COPY]] :: (store 4)
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    %2(s64) = COPY $e4
    %3(s32) = COPY %1(s32)
    %4(s64) = COPY %2(s64)
    G_STORE %1(s32), %0(p0) :: (store 1)
    G_STORE %1(s32), %0(p0) :: (store 2)
    G_STORE %1(s32), %0(p0) :: (store 4)
    G_STORE %3(s32), %0(p0) :: (store 4)
    G_STORE %2(s64), %0(p0) :: (store 8)
    G_STORE %4(s64), %0(p0) :: (store 8)
    G_STORE %0(p0), %0(p0) :: (store 4)
...

