# RUN: llc -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

--- |
  define void @test_constant_s32() {
  entry:
    ret void
  }
  define void @test_constant_small_s32() {
  entry:
    ret void
  }
  define void @test_constant_negative_s32() {
  entry:
    ret void
  }
  define void @test_constant_s64() {
  entry:
    ret void
  }
  define void @test_constant_small_s64() {
  entry:
    ret void
  }
  define void @test_constant_negative_s64() {
  entry:
    ret void
  }
  define void @test_constant_nullptr_p0() {
  entry:
    ret void
  }
  define void @test_constant_p0() {
  entry:
    ret void
  }
  define void @test_fconst_s16() {
  entry:
    ret void
  }
  define void @test_fconst_s32() {
  entry:
    ret void
  }
  define void @test_fconst_s64() {
  entry:
    ret void
  }
  define void @test_fconst_s16_0() {
  entry:
    ret void
  }
  define void @test_fconst_s32_0() {
  entry:
    ret void
  }
  define void @test_fconst_s64_0() {
  entry:
    ret void
  }
  define void @test_fconstant_negative_s16() {
  entry:
    ret void
  }
  define void @test_fconstant_negative_s32() {
  entry:
    ret void
  }
  define void @test_fconstant_negative_s64() {
  entry:
    ret void
  }
  define void @test_fconstant_infinity_s16() {
  entry:
    ret void
  }
  define void @test_fconstant_infinity_s32() {
  entry:
    ret void
  }
  define void @test_fconstant_infinity_s64() {
  entry:
    ret void
  }
  define void @test_fconstant_negative_infinity_s16() {
  entry:
    ret void
  }
  define void @test_fconstant_negative_infinity_s32() {
  entry:
    ret void
  }
  define void @test_fconstant_negative_infinity_s64() {
  entry:
    ret void
  }
  define void @test_fconstant_nan_s16() {
  entry:
    ret void
  }
  define void @test_fconstant_nan_s32() {
  entry:
    ret void
  }
  define void @test_fconstant_nan_s64() {
  entry:
    ret void
  }
  @var = global i8 0
  define i8* @test_global() {
  entry:
    ret i8* undef
  }
...

---
name:            test_constant_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_constant_s32
    ; CHECK: [[LOWER:%[0-9]+]]:dataregs = MOVU_dc 722
    ; CHECK: [[HIGHER:%[0-9]+]]:dataregs = ADDIH_ddc [[LOWER]], 18838, implicit-def $psw
    ; CHECK: $d2 = COPY [[HIGHER]]
    %0(s32) = G_CONSTANT i32 1234567890
    $d2 = COPY %0(s32)
...

---
name:            test_constant_small_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_constant_small_s32
    ; CHECK: [[LOWER:%[0-9]+]]:dataregs = MOVU_dc 42
    ; CHECK: [[HIGHER:%[0-9]+]]:dataregs = ADDIH_ddc [[LOWER]], 0, implicit-def $psw
    ; CHECK: $d2 = COPY [[HIGHER]]
    %0(s32) = G_CONSTANT i32 42
    $d2 = COPY %0(s32)
...
---
name:            test_constant_negative_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_constant_negative_s32
    ; CHECK: [[LOWER:%[0-9]+]]:dataregs = MOVU_dc 65535
    ; CHECK: [[HIGHER:%[0-9]+]]:dataregs = ADDIH_ddc [[LOWER]], 65535, implicit-def $psw
    ; CHECK: $d2 = COPY [[HIGHER]]
    %0(s32) = G_CONSTANT i32 -1
    $d2 = COPY %0(s32)
...

---
name:            test_constant_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_constant_s64
    ; CHECK: [[LOWER:%[0-9]+]]:dataregs = MOVU_dc 28849
    ; CHECK: [[HIGHER:%[0-9]+]]:dataregs = ADDIH_ddc [[LOWER]], 56423, implicit-def $psw
    ; CHECK: [[LOWER1:%[0-9]+]]:dataregs = MOVU_dc 43404
    ; CHECK: [[HIGHER1:%[0-9]+]]:dataregs = ADDIH_ddc [[LOWER1]], 43860, implicit-def $psw
    ; CHECK: [[REG_SEQ:%[0-9]+]]:extdataregs = REG_SEQUENCE [[HIGHER]], %subreg.dsub0, [[HIGHER1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQ]]
    %0(s64) = G_CONSTANT i64 12345678900987654321
    $e2 = COPY %0(s64)
...

---
name:            test_constant_small_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_constant_small_s64
    ; CHECK: [[LOWER:%[0-9]+]]:dataregs = MOVU_dc 10
    ; CHECK: [[HIGHER:%[0-9]+]]:dataregs = ADDIH_ddc [[LOWER]], 0, implicit-def $psw
    ; CHECK: [[LOWER1:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[HIGHER1:%[0-9]+]]:dataregs = ADDIH_ddc [[LOWER1]], 0, implicit-def $psw
    ; CHECK: [[REG_SEQ:%[0-9]+]]:extdataregs = REG_SEQUENCE [[HIGHER]], %subreg.dsub0, [[HIGHER1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQ]]
    %0(s64) = G_CONSTANT i64 10
    $e2 = COPY %0(s64)
...

---
name:            test_constant_negative_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_constant_negative_s64
    ; CHECK: [[LOWER:%[0-9]+]]:dataregs = MOVU_dc 65535
    ; CHECK: [[HIGHER:%[0-9]+]]:dataregs = ADDIH_ddc [[LOWER]], 65535, implicit-def $psw
    ; CHECK: [[LOWER1:%[0-9]+]]:dataregs = MOVU_dc 65535
    ; CHECK: [[HIGHER1:%[0-9]+]]:dataregs = ADDIH_ddc [[LOWER1]], 65535, implicit-def $psw
    ; CHECK: [[REG_SEQ:%[0-9]+]]:extdataregs = REG_SEQUENCE [[HIGHER]], %subreg.dsub0, [[HIGHER1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQ]]
    %0(s64) = G_CONSTANT i64 -1
    $e2 = COPY %0(s64)
...

---
name:            test_constant_nullptr_p0
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_constant_nullptr_p0
    ; CHECK: [[HIGHER:%[0-9]+]]:addrregs = MOVHA_ac 0
    ; CHECK: [[LOWER:%[0-9]+]]:addrregs = LEA_aac [[HIGHER]], 0
    ; CHECK: $a2 = COPY [[LOWER]]
    %0(p0) = G_CONSTANT i32 0
    $a2 = COPY %0(p0)
...

---
name:            test_constant_p0
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_constant_p0
    ; CHECK: [[HIGHER:%[0-9]+]]:addrregs = MOVHA_ac 43691
    ; CHECK: [[LOWER:%[0-9]+]]:addrregs = LEA_aac [[HIGHER]], 43690
    ; CHECK: $a2 = COPY [[LOWER]]
    %0(p0) = G_CONSTANT i32 2863311530
    $a2 = COPY %0(p0)
...

---
name:            test_fconst_s16
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconst_s16
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 16640
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[HPTOF_dd:%[0-9]+]]:dataregs = HPTOF_dd [[ADDIH_ddc]], implicit-def $psw
    ; CHECK: $d2 = COPY [[HPTOF_dd]]
    %0:dataregbank(s16) = G_FCONSTANT half 2.5
    %1:dataregbank(s32) = G_FPEXT %0
    $d2 = COPY %1(s32)
...

---
name:            test_fconst_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconst_s32
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 16480, implicit-def $psw
    ; CHECK: $d2 = COPY [[ADDIH_ddc]]
    %0(s32) = G_FCONSTANT float 3.5
    $d2 = COPY %0(s32)
...

---
name:            test_fconst_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconst_s64
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 16368, implicit-def $psw
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:extdataregs = REG_SEQUENCE [[ADDIH_ddc]], %subreg.dsub0, [[ADDIH_ddc1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE]]
    %0(s64) = G_FCONSTANT double 1.0
    $e2 = COPY %0(s64)
...

---
name:            test_fconst_s16_0
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconst_s16_0
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[HPTOF_dd:%[0-9]+]]:dataregs = HPTOF_dd [[ADDIH_ddc]], implicit-def $psw
    ; CHECK: $d2 = COPY [[HPTOF_dd]]
    %0:dataregbank(s16) = G_FCONSTANT half 0.0
    %1:dataregbank(s32) = G_FPEXT %0
    $d2 = COPY %1(s32)
...

---
name:            test_fconst_s32_0
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconst_s32_0
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: $d2 = COPY [[ADDIH_ddc]]
    %0(s32) = G_FCONSTANT float 0.0
    $d2 = COPY %0(s32)
...

---
name:            test_fconst_s64_0
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconst_s64_0
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:extdataregs = REG_SEQUENCE [[ADDIH_ddc]], %subreg.dsub0, [[ADDIH_ddc1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE]]
    %0(s64) = G_FCONSTANT double 0.0
    $e2 = COPY %0(s64)
...

---
name:            test_fconstant_negative_s16
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_negative_s16
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 48128
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[HPTOF_dd:%[0-9]+]]:dataregs = HPTOF_dd [[ADDIH_ddc]], implicit-def $psw
    ; CHECK: $d2 = COPY [[HPTOF_dd]]
    %0:dataregbank(s16) = G_FCONSTANT half -1.0
    %1:dataregbank(s32) = G_FPEXT %0
    $d2 = COPY %1(s32)
...

---
name:            test_fconstant_negative_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_negative_s32
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 49024, implicit-def $psw
    ; CHECK: $d2 = COPY [[ADDIH_ddc]]
    %0(s32) = G_FCONSTANT float -1.0
    $d2 = COPY %0(s32)
...

---
name:            test_fconstant_negative_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_negative_s64
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 49136, implicit-def $psw
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:extdataregs = REG_SEQUENCE [[ADDIH_ddc]], %subreg.dsub0, [[ADDIH_ddc1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE]]
    %0(s64) = G_FCONSTANT double -1.0
    $e2 = COPY %0(s64)
...

---
name:            test_fconstant_infinity_s16
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_infinity_s16
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 31744
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[HPTOF_dd:%[0-9]+]]:dataregs = HPTOF_dd [[ADDIH_ddc]], implicit-def $psw
    ; CHECK: $d2 = COPY [[HPTOF_dd]]
    %0:dataregbank(s16) = G_FCONSTANT half 0x7FF0000000000000
    %1:dataregbank(s32) = G_FPEXT %0
    $d2 = COPY %1(s32)
...

---
name:            test_fconstant_infinity_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_infinity_s32
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 32640, implicit-def $psw
    ; CHECK: $d2 = COPY [[ADDIH_ddc]]
    %0:dataregbank(s32) = G_FCONSTANT float 0x7FF0000000000000
    $d2 = COPY %0(s32)
...

---
name:            test_fconstant_infinity_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_infinity_s64
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 32752, implicit-def $psw
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:extdataregs = REG_SEQUENCE [[ADDIH_ddc]], %subreg.dsub0, [[ADDIH_ddc1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE]]
    %0:dataregbank(s64) = G_FCONSTANT double 0x7FF0000000000000
    $e2 = COPY %0(s64)
...


---
name:            test_fconstant_negative_infinity_s16
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_negative_infinity_s16
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 64512
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[HPTOF_dd:%[0-9]+]]:dataregs = HPTOF_dd [[ADDIH_ddc]], implicit-def $psw
    ; CHECK: $d2 = COPY [[HPTOF_dd]]
    %0:dataregbank(s16) = G_FCONSTANT half 0xFFF0000000000000
    %1:dataregbank(s32) = G_FPEXT %0
    $d2 = COPY %1(s32)
...

---
name:            test_fconstant_negative_infinity_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_negative_infinity_s32
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65408, implicit-def $psw
    ; CHECK: $d2 = COPY [[ADDIH_ddc]]
    %0:dataregbank(s32) = G_FCONSTANT float 0xFFF0000000000000
    $d2 = COPY %0(s32)
...

---
name:            test_fconstant_negative_infinity_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_negative_infinity_s64
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 65520, implicit-def $psw
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:extdataregs = REG_SEQUENCE [[ADDIH_ddc]], %subreg.dsub0, [[ADDIH_ddc1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE]]
    %0:dataregbank(s64) = G_FCONSTANT double 0xFFF0000000000000
    $e2 = COPY %0(s64)
...

---
name:            test_fconstant_nan_s16
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_nan_s16
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 32256
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[HPTOF_dd:%[0-9]+]]:dataregs = HPTOF_dd [[ADDIH_ddc]], implicit-def $psw
    ; CHECK: $d2 = COPY [[HPTOF_dd]]
    %0:dataregbank(s16) = G_FCONSTANT half 0x7FF8000000000000
    %1:dataregbank(s32) = G_FPEXT %0
    $d2 = COPY %1(s32)
...

---
name:            test_fconstant_nan_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_nan_s32
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 32704, implicit-def $psw
    ; CHECK: $d2 = COPY [[ADDIH_ddc]]
    %0:dataregbank(s32) = G_FCONSTANT float 0x7FF8000000000000
    $d2 = COPY %0(s32)
...

---
name:            test_fconstant_nan_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fconstant_nan_s64
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 0, implicit-def $psw
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 0
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 32760, implicit-def $psw
    ; CHECK: [[REG_SEQUENCE:%[0-9]+]]:extdataregs = REG_SEQUENCE [[ADDIH_ddc]], %subreg.dsub0, [[ADDIH_ddc1]], %subreg.dsub1
    ; CHECK: $e2 = COPY [[REG_SEQUENCE]]
    %0:dataregbank(s64) = G_FCONSTANT double 0x7FF8000000000000
    $e2 = COPY %0(s64)
...

---
name:            test_global
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_global
    ; CHECK: [[MOV:%[0-9]+]]:addrregs = MOVHA_ac target-flags(tricore-hi) @var
    ; CHECK: [[LEA:%[0-9]+]]:addrregs = LEA_aac [[MOV]], target-flags(tricore-lo) @var
    ; CHECK: $a2 = COPY [[LEA]]
    %0(p0) = G_GLOBAL_VALUE @var
    $a2 = COPY %0(p0)
...
