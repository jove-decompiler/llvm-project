# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=STATICTC18
# RUN: llc -mattr=-tc18 -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=STATICTNOTTC18
# RUN: llc --relocation-model=pic -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=PICTC18
# RUN: llc --relocation-model=pic -mattr=-tc18 -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s --check-prefix=PICNOTTC18

--- |
  define i32 @jt_test(i32 %x) {
  entry:
    switch i32 %x, label %return [
      i32 75, label %sw.bb
      i32 34, label %sw.bb
      i32 56, label %sw.bb
      i32 35, label %sw.bb
      i32 40, label %sw.bb
      i32 4, label %sw.bb1
      i32 5, label %sw.bb1
      i32 6, label %sw.bb1
    ]

  sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry
    %add = add nsw i32 %x, 42
    br label %return

  sw.bb1:                                           ; preds = %entry, %entry, %entry
    %mul = mul nsw i32 %x, 3
    br label %return

  return:                                           ; preds = %sw.bb1, %sw.bb, %entry
    %retval.0 = phi i32 [ %mul, %sw.bb1 ], [ %add, %sw.bb ], [ 0, %entry ]
    ret i32 %retval.0
  }

...
---
name:            jt_test
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: addrregbank }
tracksRegLiveness: true
jumpTable:
  kind:            inline
  entries:
    - id:              0
      blocks:          [ '%bb.3', '%bb.3', '%bb.3', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.2', '%bb.2', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.2', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.2', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4',
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.2' ]
body:             |
  ; STATICTC18-LABEL: name: jt_test
  ; STATICTC18: bb.0.entry:
  ; STATICTC18:   successors: %bb.1(0x80000000)
  ; STATICTC18:   liveins: $d4
  ; STATICTC18:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; STATICTC18:   [[JIJumpTable:%[0-9]+]]:addrregs = JIJumpTable [[COPY]], target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0
  ; STATICTC18: bb.1.entry:
  ; STATICTC18:   successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)
  ; STATICTC18:   J %bb.4
  ; STATICTC18: bb.2.sw.bb:
  ; STATICTC18:   successors: %bb.4(0x80000000)
  ; STATICTC18:   J %bb.4
  ; STATICTC18: bb.3.sw.bb1:
  ; STATICTC18:   successors: %bb.4(0x80000000)
  ; STATICTC18: bb.4.return:
  ; STATICTC18:   RET implicit $a11
  ; STATICTNOTTC18-LABEL: name: jt_test
  ; STATICTNOTTC18: bb.0.entry:
  ; STATICTNOTTC18:   successors: %bb.1(0x80000000)
  ; STATICTNOTTC18:   liveins: $d4
  ; STATICTNOTTC18:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; STATICTNOTTC18:   [[JIJumpTable:%[0-9]+]]:addrregs = JIJumpTable [[COPY]], target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0
  ; STATICTNOTTC18: bb.1.entry:
  ; STATICTNOTTC18:   successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)
  ; STATICTNOTTC18:   J %bb.4
  ; STATICTNOTTC18: bb.2.sw.bb:
  ; STATICTNOTTC18:   successors: %bb.4(0x80000000)
  ; STATICTNOTTC18:   J %bb.4
  ; STATICTNOTTC18: bb.3.sw.bb1:
  ; STATICTNOTTC18:   successors: %bb.4(0x80000000)
  ; STATICTNOTTC18: bb.4.return:
  ; STATICTNOTTC18:   RET implicit $a11
  ; PICTC18-LABEL: name: jt_test
  ; PICTC18: bb.0.entry:
  ; PICTC18:   successors: %bb.1(0x80000000)
  ; PICTC18:   liveins: $d4
  ; PICTC18:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; PICTC18:   [[JIJumpTable:%[0-9]+]]:addrregs = JIJumpTable [[COPY]], target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0
  ; PICTC18: bb.1.entry:
  ; PICTC18:   successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)
  ; PICTC18:   J %bb.4
  ; PICTC18: bb.2.sw.bb:
  ; PICTC18:   successors: %bb.4(0x80000000)
  ; PICTC18:   J %bb.4
  ; PICTC18: bb.3.sw.bb1:
  ; PICTC18:   successors: %bb.4(0x80000000)
  ; PICTC18: bb.4.return:
  ; PICTC18:   RET implicit $a11
  ; PICNOTTC18-LABEL: name: jt_test
  ; PICNOTTC18: bb.0.entry:
  ; PICNOTTC18:   successors: %bb.1(0x80000000)
  ; PICNOTTC18:   liveins: $d4
  ; PICNOTTC18:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; PICNOTTC18:   [[JIJumpTableTC16XPIC:%[0-9]+]]:addrregs, [[JIJumpTableTC16XPIC1:%[0-9]+]]:addrregs = JIJumpTableTC16XPIC [[COPY]], target-flags(tricore-hi) %jump-table.0, target-flags(tricore-lo) %jump-table.0
  ; PICNOTTC18: bb.1.entry:
  ; PICNOTTC18:   successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)
  ; PICNOTTC18:   J %bb.4
  ; PICNOTTC18: bb.2.sw.bb:
  ; PICNOTTC18:   successors: %bb.4(0x80000000)
  ; PICNOTTC18:   J %bb.4
  ; PICNOTTC18: bb.3.sw.bb1:
  ; PICNOTTC18:   successors: %bb.4(0x80000000)
  ; PICNOTTC18: bb.4.return:
  ; PICNOTTC18:   RET implicit $a11
  bb.0.entry:
    liveins: $d4

    %0(s32) = COPY $d4
    %1(p0) = G_JUMP_TABLE %jump-table.0
    G_BRJT %1(p0), %jump-table.0, %0(s32)

  bb.1.entry:
    successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)

    G_BR %bb.4

  bb.2.sw.bb:
    G_BR %bb.4

  bb.3.sw.bb1:

  bb.4.return:
    RET implicit $a11

...
