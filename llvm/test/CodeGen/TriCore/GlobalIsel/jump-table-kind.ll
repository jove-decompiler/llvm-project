; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
; RUN: llc -mtriple=tricore -global-isel -stop-after=irtranslator -verify-machineinstrs %s -o - | FileCheck %s

define i32 @jt_test(i32 %x) {
  ; CHECK-LABEL: name: jt_test
  ; CHECK:      jumpTable:
  ; CHECK-NEXT:   kind: inline
  ; CHECK:      bb.1.entry:
  ; CHECK:        successors: %bb.4(0x40000000), %bb.5(0x40000000)
  ; CHECK:        liveins: $d4
  ; CHECK:        [[COPY:%[0-9]+]]:_(s32) = COPY $d4
  ; CHECK:        [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 71
  ; CHECK:        [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 3
  ; CHECK:        [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 42
  ; CHECK:        [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
  ; CHECK:        [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 4
  ; CHECK:        [[SUB:%[0-9]+]]:_(s32) = G_SUB [[COPY]], [[C4]]
  ; CHECK:        [[COPY1:%[0-9]+]]:_(s32) = COPY [[SUB]](s32)
  ; CHECK:        [[COPY2:%[0-9]+]]:_(s32) = COPY [[C]](s32)
  ; CHECK:        [[ICMP:%[0-9]+]]:_(s1) = G_ICMP intpred(ugt), [[COPY1]](s32), [[COPY2]]
  ; CHECK:        G_BRCOND [[ICMP]](s1), %bb.4
  ; CHECK:      bb.5.entry:
  ; CHECK:        successors: %bb.3(0x2aaaaaab), %bb.4(0x2aaaaaab), %bb.2(0x2aaaaaab)
  ; CHECK:        [[JUMP_TABLE:%[0-9]+]]:_(p0) = G_JUMP_TABLE %jump-table.0
  ; CHECK:        G_BRJT [[JUMP_TABLE]](p0), %jump-table.0, [[COPY1]](s32)
  ; CHECK:      bb.2.sw.bb:
  ; CHECK:        successors: %bb.4(0x80000000)
  ; CHECK:        [[ADD:%[0-9]+]]:_(s32) = nsw G_ADD [[COPY]], [[C2]]
  ; CHECK:        G_BR %bb.4
  ; CHECK:      bb.3.sw.bb1:
  ; CHECK:        successors: %bb.4(0x80000000)
  ; CHECK:        [[MUL:%[0-9]+]]:_(s32) = nsw G_MUL [[COPY]], [[C1]]
  ; CHECK:      bb.4.return:
  ; CHECK:        [[PHI:%[0-9]+]]:_(s32) = G_PHI [[MUL]](s32), %bb.3, [[ADD]](s32), %bb.2, [[C3]](s32), %bb.1, [[C3]](s32), %bb.5
  ; CHECK:        $d2 = COPY [[PHI]](s32)
  ; CHECK:        RET implicit $a11, implicit $d2
entry:
switch i32 %x, label %return [
    i32 75, label %sw.bb
    i32 34, label %sw.bb
    i32 56, label %sw.bb
    i32 35, label %sw.bb
    i32 40, label %sw.bb
    i32 4, label %sw.bb1
    i32 5, label %sw.bb1
    i32 6, label %sw.bb1
]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry
%add = add nsw i32 %x, 42
br label %return

sw.bb1:                                           ; preds = %entry, %entry, %entry
%mul = mul nsw i32 %x, 3
br label %return

return:                                           ; preds = %sw.bb1, %sw.bb, %entry
%retval.0 = phi i32 [ %mul, %sw.bb1 ], [ %add, %sw.bb ], [ 0, %entry ]
ret i32 %retval.0
}
