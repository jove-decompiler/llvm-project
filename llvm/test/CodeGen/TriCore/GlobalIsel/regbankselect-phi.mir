# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tricore -global-isel -run-pass=regbankselect -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_phi_s8
legalized:         true
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
  - { id: 6, class: _ }
  - { id: 7, class: _ }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_s8
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $d4
  ; CHECK:   [[COPY:%[0-9]+]]:dataregbank(s32) = COPY $d4
  ; CHECK:   [[C:%[0-9]+]]:dataregbank(s32) = G_CONSTANT i32 42
  ; CHECK:   [[TRUNC:%[0-9]+]]:dataregbank(s8) = G_TRUNC [[C]](s32)
  ; CHECK:   [[C1:%[0-9]+]]:dataregbank(s32) = G_CONSTANT i32 -42
  ; CHECK:   [[TRUNC1:%[0-9]+]]:dataregbank(s8) = G_TRUNC [[C1]](s32)
  ; CHECK:   [[TRUNC2:%[0-9]+]]:dataregbank(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK:   G_BRCOND [[TRUNC2]](s1), %bb.1
  ; CHECK:   G_BR %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:dataregbank(s8) = G_PHI [[TRUNC1]](s8), %bb.0, [[TRUNC]](s8), %bb.1
  ; CHECK:   [[SEXT:%[0-9]+]]:dataregbank(s32) = G_SEXT [[PHI]](s8)
  ; CHECK:   $d2 = COPY [[SEXT]](s32)
  ; CHECK:   RET implicit $a11, implicit $d2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $d4

    %0(s32) = COPY $d4
    %6(s32) = G_CONSTANT i32 42
    %1(s8) = G_TRUNC %6(s32)
    %7(s32) = G_CONSTANT i32 -42
    %2(s8) = G_TRUNC %7(s32)
    %3(s1) = G_TRUNC %0(s32)
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %4(s8) = G_PHI %2(s8), %bb.0, %1(s8), %bb.1
    %5(s32) = G_SEXT %4(s8)
    $d2 = COPY %5(s32)
    RET implicit $a11, implicit $d2

...

---
name:            test_phi_s16
legalized:         true
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
  - { id: 6, class: _ }
  - { id: 7, class: _ }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_s16
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $d4
  ; CHECK:   [[COPY:%[0-9]+]]:dataregbank(s32) = COPY $d4
  ; CHECK:   [[C:%[0-9]+]]:dataregbank(s32) = G_CONSTANT i32 42
  ; CHECK:   [[TRUNC:%[0-9]+]]:dataregbank(s16) = G_TRUNC [[C]](s32)
  ; CHECK:   [[C1:%[0-9]+]]:dataregbank(s32) = G_CONSTANT i32 -42
  ; CHECK:   [[TRUNC1:%[0-9]+]]:dataregbank(s16) = G_TRUNC [[C1]](s32)
  ; CHECK:   [[TRUNC2:%[0-9]+]]:dataregbank(s1) = G_TRUNC [[COPY]](s32)
  ; CHECK:   G_BRCOND [[TRUNC2]](s1), %bb.1
  ; CHECK:   G_BR %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:dataregbank(s16) = G_PHI [[TRUNC1]](s16), %bb.0, [[TRUNC]](s16), %bb.1
  ; CHECK:   [[SEXT:%[0-9]+]]:dataregbank(s32) = G_SEXT [[PHI]](s16)
  ; CHECK:   $d2 = COPY [[SEXT]](s32)
  ; CHECK:   RET implicit $a11, implicit $d2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $d4

    %0(s32) = COPY $d4
    %6(s32) = G_CONSTANT i32 42
    %1(s16) = G_TRUNC %6(s32)
    %7(s32) = G_CONSTANT i32 -42
    %2(s16) = G_TRUNC %7(s32)
    %3(s1) = G_TRUNC %0(s32)
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %4(s16) = G_PHI %2(s16), %bb.0, %1(s16), %bb.1
    %5(s32) = G_SEXT %4(s16)
    $d2 = COPY %5(s32)
    RET implicit $a11, implicit $d2

...

---
name:            test_phi_s32
legalized:         true
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_s32
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $d4, $d5, $d6
  ; CHECK:   [[COPY:%[0-9]+]]:dataregbank(s32) = COPY $d4
  ; CHECK:   [[COPY1:%[0-9]+]]:dataregbank(s32) = COPY $d5
  ; CHECK:   [[COPY2:%[0-9]+]]:dataregbank(s32) = COPY $d6
  ; CHECK:   [[TRUNC:%[0-9]+]]:dataregbank(s1) = G_TRUNC [[COPY2]](s32)
  ; CHECK:   G_BRCOND [[TRUNC]](s1), %bb.1
  ; CHECK:   G_BR %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:dataregbank(s32) = G_PHI [[COPY]](s32), %bb.0, [[COPY1]](s32), %bb.1
  ; CHECK:   $d2 = COPY [[PHI]](s32)
  ; CHECK:   RET implicit $a11, implicit $d2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $d4, $d5, $d6

    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = COPY $d6
    %3(s1) = G_TRUNC %2(s32)
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %4(s32) = G_PHI %0(s32), %bb.0, %1(s32), %bb.1
    $d2 = COPY %4(s32)
    RET implicit $a11, implicit $d2

...

---
name:            test_phi_s64
legalized:         true
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_s64
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $e4, $e6, $d7
  ; CHECK:   [[COPY:%[0-9]+]]:dataregbank(s64) = COPY $e4
  ; CHECK:   [[COPY1:%[0-9]+]]:dataregbank(s64) = COPY $e6
  ; CHECK:   [[COPY2:%[0-9]+]]:dataregbank(s32) = COPY $d7
  ; CHECK:   [[TRUNC:%[0-9]+]]:dataregbank(s1) = G_TRUNC [[COPY2]](s32)
  ; CHECK:   G_BRCOND [[TRUNC]](s1), %bb.1
  ; CHECK:   G_BR %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:dataregbank(s64) = G_PHI [[COPY]](s64), %bb.0, [[COPY1]](s64), %bb.1
  ; CHECK:   $e2 = COPY [[PHI]](s64)
  ; CHECK:   RET implicit $a11, implicit $e2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $e4, $e6, $d7

    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s32) = COPY $d7
    %3(s1) = G_TRUNC %2(s32)
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %4(s64) = G_PHI %0(s64), %bb.0, %1(s64), %bb.1
    $e2 = COPY %4(s64)
    RET implicit $a11, implicit $e2

...

---
name:            test_phi_ptr
legalized:         true
tracksRegLiveness: true
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_ptr
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $d4, $a4, $a5
  ; CHECK:   [[COPY:%[0-9]+]]:addrregbank(p0) = COPY $a4
  ; CHECK:   [[COPY1:%[0-9]+]]:addrregbank(p0) = COPY $a5
  ; CHECK:   [[COPY2:%[0-9]+]]:dataregbank(s32) = COPY $d4
  ; CHECK:   [[TRUNC:%[0-9]+]]:dataregbank(s1) = G_TRUNC [[COPY2]](s32)
  ; CHECK:   G_BRCOND [[TRUNC]](s1), %bb.1
  ; CHECK:   G_BR %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:addrregbank(p0) = G_PHI [[COPY]](p0), %bb.0, [[COPY1]](p0), %bb.1
  ; CHECK:   $a2 = COPY [[PHI]](p0)
  ; CHECK:   RET implicit $a11, implicit $a2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $d4, $a4, $a5

    %0(p0) = COPY $a4
    %1(p0) = COPY $a5
    %4(s32) = COPY $d4
    %2(s1) = G_TRUNC %4(s32)
    G_BRCOND %2(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %3(p0) = G_PHI %0(p0), %bb.0, %1(p0), %bb.1
    $a2 = COPY %3(p0)
    RET implicit $a11, implicit $a2

...
