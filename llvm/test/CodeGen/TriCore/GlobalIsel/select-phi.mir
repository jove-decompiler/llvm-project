# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_phi_s32
legalized:         true
regBankSelected:   true
tracksRegLiveness: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_s32
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $d4, $d5, $d6
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[COPY1:%[0-9]+]]:dataregs = COPY $d5
  ; CHECK:   [[COPY2:%[0-9]+]]:dataregs = COPY $d6
  ; CHECK:   JNE_dcc [[COPY2]], 0, %bb.1
  ; CHECK:   J %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:dataregs = PHI [[COPY]], %bb.0, [[COPY1]], %bb.1
  ; CHECK:   $d2 = COPY [[PHI]]
  ; CHECK:   RET implicit $a11, implicit $d2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $d4, $d5, $d6

    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = COPY $d6
    %3(s1) = G_TRUNC %2(s32)
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %4(s32) = G_PHI %0(s32), %bb.0, %1(s32), %bb.1
    $d2 = COPY %4(s32)
    RET implicit $a11, implicit $d2

...

---
name:            test_phi_s64
legalized:         true
regBankSelected:   true
tracksRegLiveness: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_s64
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $e4, $e6, $d7
  ; CHECK:   [[COPY:%[0-9]+]]:extdataregs = COPY $e4
  ; CHECK:   [[COPY1:%[0-9]+]]:extdataregs = COPY $e6
  ; CHECK:   [[COPY2:%[0-9]+]]:dataregs = COPY $d7
  ; CHECK:   JNE_dcc [[COPY2]], 0, %bb.1
  ; CHECK:   J %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:extdataregs = PHI [[COPY]], %bb.0, [[COPY1]], %bb.1
  ; CHECK:   $e2 = COPY [[PHI]]
  ; CHECK:   RET implicit $a11, implicit $e2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $e4, $e6, $d7

    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s32) = COPY $d7
    %3(s1) = G_TRUNC %2(s32)
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %4(s64) = G_PHI %0(s64), %bb.0, %1(s64), %bb.1
    $e2 = COPY %4(s64)
    RET implicit $a11, implicit $e2

...

---
name:            test_phi_s32_addrregbank
legalized:         true
regBankSelected:   true
tracksRegLiveness: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: addrregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_s32_addrregbank
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $a4, $a5, $a6
  ; CHECK:   [[COPY:%[0-9]+]]:addrregs = COPY $a4
  ; CHECK:   [[COPY1:%[0-9]+]]:addrregs = COPY $a5
  ; CHECK:   [[COPY2:%[0-9]+]]:addrregs = COPY $a6
  ; CHECK:   JNZA_ac [[COPY2]], %bb.1
  ; CHECK:   J %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:addrregs = PHI [[COPY]], %bb.0, [[COPY1]], %bb.1
  ; CHECK:   $a2 = COPY [[PHI]]
  ; CHECK:   RET implicit $a11, implicit $a2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $a4, $a5, $a6

    %0(s32) = COPY $a4
    %1(s32) = COPY $a5
    %2(s32) = COPY $a6
    %3(s1) = G_TRUNC %2(s32)
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %4(s32) = G_PHI %0(s32), %bb.0, %1(s32), %bb.1
    $a2 = COPY %4(s32)
    RET implicit $a11, implicit $a2

...

---
name:            test_phi_s64_addrregbank
legalized:         true
regBankSelected:   true
tracksRegLiveness: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: addrregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_s64_addrregbank
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $p4, $p6, $a7
  ; CHECK:   [[COPY:%[0-9]+]]:extaddrregs = COPY $p4
  ; CHECK:   [[COPY1:%[0-9]+]]:extaddrregs = COPY $p6
  ; CHECK:   [[COPY2:%[0-9]+]]:addrregs = COPY $a7
  ; CHECK:   JNZA_ac [[COPY2]], %bb.1
  ; CHECK:   J %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:extaddrregs = PHI [[COPY]], %bb.0, [[COPY1]], %bb.1
  ; CHECK:   $p2 = COPY [[PHI]]
  ; CHECK:   RET implicit $a11, implicit $p2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $p4, $p6, $a7

    %0(s64) = COPY $p4
    %1(s64) = COPY $p6
    %2(s32) = COPY $a7
    %3(s1) = G_TRUNC %2(s32)
    G_BRCOND %3(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %4(s64) = G_PHI %0(s64), %bb.0, %1(s64), %bb.1
    $p2 = COPY %4(s64)
    RET implicit $a11, implicit $p2

...

---
name:            test_phi_ptr
legalized:         true
regBankSelected:   true
tracksRegLiveness: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: addrregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_ptr
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $d4, $a4, $a5
  ; CHECK:   [[COPY:%[0-9]+]]:addrregs = COPY $a4
  ; CHECK:   [[COPY1:%[0-9]+]]:addrregs = COPY $a5
  ; CHECK:   [[COPY2:%[0-9]+]]:addrregs = COPY $d4
  ; CHECK:   JNZA_ac [[COPY2]], %bb.1
  ; CHECK:   J %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:addrregs = PHI [[COPY]], %bb.0, [[COPY1]], %bb.1
  ; CHECK:   $a2 = COPY [[PHI]]
  ; CHECK:   RET implicit $a11, implicit $a2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $d4, $a4, $a5

    %0(p0) = COPY $a4
    %1(p0) = COPY $a5
    %4(s32) = COPY $d4
    %2(s1) = G_TRUNC %4(s32)
    G_BRCOND %2(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %3(p0) = G_PHI %0(p0), %bb.0, %1(p0), %bb.1
    $a2 = COPY %3(p0)
    RET implicit $a11, implicit $a2

...

---
name:            test_phi_ptr_dataregbank
legalized:         true
regBankSelected:   true
tracksRegLiveness: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
liveins:
body:             |
  ; CHECK-LABEL: name: test_phi_ptr_dataregbank
  ; CHECK: bb.0:
  ; CHECK:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK:   liveins: $d4, $d5, $d6
  ; CHECK:   [[COPY:%[0-9]+]]:dataregs = COPY $d4
  ; CHECK:   [[COPY1:%[0-9]+]]:dataregs = COPY $d5
  ; CHECK:   [[COPY2:%[0-9]+]]:dataregs = COPY $d6
  ; CHECK:   JNE_dcc [[COPY2]], 0, %bb.1
  ; CHECK:   J %bb.2
  ; CHECK: bb.1:
  ; CHECK:   successors: %bb.2(0x80000000)
  ; CHECK: bb.2:
  ; CHECK:   [[PHI:%[0-9]+]]:dataregs = PHI [[COPY]], %bb.0, [[COPY1]], %bb.1
  ; CHECK:   $d2 = COPY [[PHI]]
  ; CHECK:   RET implicit $a11, implicit $d2
  bb.0:
    successors: %bb.1, %bb.2
    liveins: $d4, $d5, $d6

    %0(p0) = COPY $d4
    %1(p0) = COPY $d5
    %4(s32) = COPY $d6
    %2(s1) = G_TRUNC %4(s32)
    G_BRCOND %2(s1), %bb.1
    G_BR %bb.2

  bb.1:
    successors: %bb.2

  bb.2:
    %3(p0) = G_PHI %0(p0), %bb.0, %1(p0), %bb.1
    $d2 = COPY %3(p0)
    RET implicit $a11, implicit $d2

...
