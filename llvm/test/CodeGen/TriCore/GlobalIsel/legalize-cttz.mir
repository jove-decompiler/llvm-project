# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s


---
name:            test_cttz_s32_s32
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: test_cttz_s32_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[C]]
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK: [[CTPOP:%[0-9]+]]:_(s32) = G_CTPOP [[AND]](s32)
    ; CHECK: $d2 = COPY [[CTPOP]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = G_CTTZ %0
    $d2 = COPY %1(s32)
...

---
name:            test_cttz_smaller_s32_smaller_s32
body:             |
  bb.0.entry:


    ; CHECK-LABEL: name: test_cttz_smaller_s32_smaller_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 256
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[AND]], [[C1]]
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[OR]], [[C2]]
    ; CHECK: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[OR]], [[C2]]
    ; CHECK: [[AND1:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK: [[CTPOP:%[0-9]+]]:_(s32) = G_CTPOP [[AND1]](s32)
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[CTPOP]](s32)
    ; CHECK: $d2 = COPY [[COPY2]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s8) = G_TRUNC %0:_(s32)
    %2:_(s8) = G_CTTZ %1
    %3:_(s32) = G_ANYEXT %2:_(s8)
    $d2 = COPY %3(s32)
...

---
name:            test_cttz_smaller_s32_s32
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: test_cttz_smaller_s32_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[C]]
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK: [[CTPOP:%[0-9]+]]:_(s32) = G_CTPOP [[AND]](s32)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[CTPOP]](s32)
    ; CHECK: $d2 = COPY [[COPY1]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s8) = G_CTTZ %0
    %2:_(s32) = G_ANYEXT %1:_(s8)
    $d2 = COPY %2(s32)
...

---
name:            test_cttz_smaller_s32_bigger_s32
body:             |
  bb.0.entry:


    ; CHECK-LABEL: name: test_cttz_smaller_s32_bigger_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[COPY]](s32)
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[ANYEXT]](s64)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[UV]](s32), [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[UV1]], [[C1]]
    ; CHECK: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[UV1]], [[C1]]
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK: [[CTPOP:%[0-9]+]]:_(s32) = G_CTPOP [[AND]](s32)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[CTPOP]](s32)
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[C2]](s32)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[COPY1]], [[COPY2]]
    ; CHECK: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[UV]], [[C3]]
    ; CHECK: [[ADD2:%[0-9]+]]:_(s32) = G_ADD [[UV]], [[C3]]
    ; CHECK: [[AND1:%[0-9]+]]:_(s32) = G_AND [[XOR1]], [[ADD2]]
    ; CHECK: [[CTPOP1:%[0-9]+]]:_(s32) = G_CTPOP [[AND1]](s32)
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ADD1]](s32)
    ; CHECK: [[COPY4:%[0-9]+]]:_(s32) = COPY [[CTPOP1]](s32)
    ; CHECK: [[COPY5:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[COPY5]](s32), [[COPY3]], [[COPY4]]
    ; CHECK: [[COPY6:%[0-9]+]]:_(s32) = COPY [[SELECT]](s32)
    ; CHECK: $d2 = COPY [[COPY6]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s64) = G_ANYEXT %0:_(s32)
    %2:_(s16) = G_CTTZ %1
    %3:_(s32) = G_ANYEXT %2:_(s16)
    $d2 = COPY %3(s32)
...

---
name:            test_cttz_s32_smaller_s32
body:             |
  bb.0.entry:

    ; CHECK-LABEL: name: test_cttz_s32_smaller_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 256
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[AND]], [[C1]]
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[OR]], [[C2]]
    ; CHECK: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[OR]], [[C2]]
    ; CHECK: [[AND1:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK: [[CTPOP:%[0-9]+]]:_(s32) = G_CTPOP [[AND1]](s32)
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[CTPOP]](s32)
    ; CHECK: $d2 = COPY [[COPY2]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s8) = G_TRUNC %0:_(s32)
    %2:_(s32) = G_CTTZ %1
    $d2 = COPY %2(s32)
...

---
name:            test_cttz_s32_bigger_s32
body:             |
  bb.0.entry:


    ; CHECK-LABEL: name: test_cttz_s32_bigger_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[COPY]](s32)
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[ANYEXT]](s64)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[UV]](s32), [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[UV1]], [[C1]]
    ; CHECK: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[UV1]], [[C1]]
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK: [[CTPOP:%[0-9]+]]:_(s32) = G_CTPOP [[AND]](s32)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[CTPOP]], [[C2]]
    ; CHECK: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[UV]], [[C3]]
    ; CHECK: [[ADD2:%[0-9]+]]:_(s32) = G_ADD [[UV]], [[C3]]
    ; CHECK: [[AND1:%[0-9]+]]:_(s32) = G_AND [[XOR1]], [[ADD2]]
    ; CHECK: [[CTPOP1:%[0-9]+]]:_(s32) = G_CTPOP [[AND1]](s32)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[COPY1]](s32), [[ADD1]], [[CTPOP1]]
    ; CHECK: $d2 = COPY [[SELECT]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s64) = G_ANYEXT %0:_(s32)
    %2:_(s32) = G_CTTZ %1
    $d2 = COPY %2(s32)
...

---
name:            test_cttz_bigger_s32_smaller_s32
body:             |
  bb.0.entry:


    ; CHECK-LABEL: name: test_cttz_bigger_s32_smaller_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 256
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[AND]], [[C1]]
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[OR]], [[C2]]
    ; CHECK: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[OR]], [[C2]]
    ; CHECK: [[AND1:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK: [[CTPOP:%[0-9]+]]:_(s32) = G_CTPOP [[AND1]](s32)
    ; CHECK: [[ZEXT:%[0-9]+]]:_(s64) = G_ZEXT [[CTPOP]](s32)
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[ZEXT]](s64)
    ; CHECK: $d2 = COPY [[TRUNC]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s8) = G_TRUNC %0:_(s32)
    %2:_(s64) = G_CTTZ %1
    %3:_(s32) = G_TRUNC %2:_(s64)
    $d2 = COPY %3(s32)
...

---
name:            test_cttz_bigger_s32_s32
body:             |
  bb.0.entry:


    ; CHECK-LABEL: name: test_cttz_bigger_s32_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[COPY]], [[C]]
    ; CHECK: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[COPY]], [[C]]
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK: [[CTPOP:%[0-9]+]]:_(s32) = G_CTPOP [[AND]](s32)
    ; CHECK: [[ZEXT:%[0-9]+]]:_(s64) = G_ZEXT [[CTPOP]](s32)
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[ZEXT]](s64)
    ; CHECK: $d2 = COPY [[TRUNC]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s64) = G_CTTZ %0
    %2:_(s32) = G_TRUNC %1:_(s64)
    $d2 = COPY %2(s32)
...

---
name:            test_cttz_bigger_s32_bigger_s32
body:             |
  bb.0.entry:


    ; CHECK-LABEL: name: test_cttz_bigger_s32_bigger_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[COPY]](s32)
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[ANYEXT]](s64)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[UV]](s32), [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR:%[0-9]+]]:_(s32) = G_XOR [[UV1]], [[C1]]
    ; CHECK: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[UV1]], [[C1]]
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[XOR]], [[ADD]]
    ; CHECK: [[CTPOP:%[0-9]+]]:_(s32) = G_CTPOP [[AND]](s32)
    ; CHECK: [[ZEXT:%[0-9]+]]:_(s64) = G_ZEXT [[CTPOP]](s32)
    ; CHECK: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 32
    ; CHECK: [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[ZEXT]](s64)
    ; CHECK: [[UV4:%[0-9]+]]:_(s32), [[UV5:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C2]](s64)
    ; CHECK: [[UADDO:%[0-9]+]]:_(s32), [[UADDO1:%[0-9]+]]:_(s1) = G_UADDO [[UV2]], [[UV4]]
    ; CHECK: [[UADDE:%[0-9]+]]:_(s32), [[UADDE1:%[0-9]+]]:_(s1) = G_UADDE [[UV3]], [[UV5]], [[UADDO1]]
    ; CHECK: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK: [[XOR1:%[0-9]+]]:_(s32) = G_XOR [[UV]], [[C3]]
    ; CHECK: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[UV]], [[C3]]
    ; CHECK: [[AND1:%[0-9]+]]:_(s32) = G_AND [[XOR1]], [[ADD1]]
    ; CHECK: [[CTPOP1:%[0-9]+]]:_(s32) = G_CTPOP [[AND1]](s32)
    ; CHECK: [[ZEXT1:%[0-9]+]]:_(s64) = G_ZEXT [[CTPOP1]](s32)
    ; CHECK: [[UV6:%[0-9]+]]:_(s32), [[UV7:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[ZEXT1]](s64)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[COPY1]](s32), [[UADDO]], [[UV6]]
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: $d2 = COPY [[SELECT]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s64) = G_ANYEXT %0:_(s32)
    %2:_(s64) = G_CTTZ %1
    %3:_(s32) = G_TRUNC %2:_(s64)
    $d2 = COPY %3(s32)
...
