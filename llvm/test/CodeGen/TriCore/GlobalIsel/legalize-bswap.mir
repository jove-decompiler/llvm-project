# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - \
# RUN: | FileCheck -check-prefixes=TC162OPS %s
# RUN: llc -mtriple=tricore -mattr=-tc162 -run-pass=legalizer -verify-machineinstrs %s -o - \
# RUN: | FileCheck -check-prefixes=NOTC162OPS %s

---
name:            bswap_s16
body:             |
  bb.0.entry:

    ; TC162OPS-LABEL: name: bswap_s16
    ; TC162OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; TC162OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; TC162OPS: [[BSWAP:%[0-9]+]]:_(s32) = G_BSWAP [[COPY1]]
    ; TC162OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; TC162OPS: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[BSWAP]], [[C]](s32)
    ; TC162OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[LSHR]](s32)
    ; TC162OPS: $d4 = COPY [[COPY2]](s32)
    ; NOTC162OPS-LABEL: name: bswap_s16
    ; NOTC162OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC162OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; NOTC162OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; NOTC162OPS: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY1]], [[C]](s32)
    ; NOTC162OPS: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY1]], [[C]](s32)
    ; NOTC162OPS: [[OR:%[0-9]+]]:_(s32) = G_OR [[LSHR]], [[SHL]]
    ; NOTC162OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65280
    ; NOTC162OPS: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; NOTC162OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; NOTC162OPS: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[AND]], [[C2]](s32)
    ; NOTC162OPS: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL1]]
    ; NOTC162OPS: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[COPY1]], [[C2]](s32)
    ; NOTC162OPS: [[AND1:%[0-9]+]]:_(s32) = G_AND [[LSHR1]], [[C1]]
    ; NOTC162OPS: [[OR2:%[0-9]+]]:_(s32) = G_OR [[OR1]], [[AND1]]
    ; NOTC162OPS: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; NOTC162OPS: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[OR2]], [[C3]](s32)
    ; NOTC162OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[LSHR2]](s32)
    ; NOTC162OPS: $d4 = COPY [[COPY2]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s16) = G_TRUNC %0
    %2:_(s16) = G_BSWAP %1
    %3:_(s32) = G_ANYEXT %2
    $d4 = COPY %3
...

---
name:            bswap_s32
body:             |
  bb.0.entry:

    ; TC162OPS-LABEL: name: bswap_s32
    ; TC162OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; TC162OPS: [[BSWAP:%[0-9]+]]:_(s32) = G_BSWAP [[COPY]]
    ; TC162OPS: $d4 = COPY [[BSWAP]](s32)
    ; NOTC162OPS-LABEL: name: bswap_s32
    ; NOTC162OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC162OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; NOTC162OPS: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[COPY]], [[C]](s32)
    ; NOTC162OPS: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C]](s32)
    ; NOTC162OPS: [[OR:%[0-9]+]]:_(s32) = G_OR [[LSHR]], [[SHL]]
    ; NOTC162OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65280
    ; NOTC162OPS: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; NOTC162OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; NOTC162OPS: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[AND]], [[C2]](s32)
    ; NOTC162OPS: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL1]]
    ; NOTC162OPS: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C2]](s32)
    ; NOTC162OPS: [[AND1:%[0-9]+]]:_(s32) = G_AND [[LSHR1]], [[C1]]
    ; NOTC162OPS: [[OR2:%[0-9]+]]:_(s32) = G_OR [[OR1]], [[AND1]]
    ; NOTC162OPS: $d4 = COPY [[OR2]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = G_BSWAP %0
    $d4 = COPY %1
...

---
name:            bswap_s64
body:             |
  bb.0.entry:


    ; TC162OPS-LABEL: name: bswap_s64
    ; TC162OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; TC162OPS: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](s64)
    ; TC162OPS: [[BSWAP:%[0-9]+]]:_(s32) = G_BSWAP [[UV1]]
    ; TC162OPS: [[BSWAP1:%[0-9]+]]:_(s32) = G_BSWAP [[UV]]
    ; TC162OPS: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[BSWAP]](s32), [[BSWAP1]](s32)
    ; TC162OPS: $e4 = COPY [[MV]](s64)
    ; NOTC162OPS-LABEL: name: bswap_s64
    ; NOTC162OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC162OPS: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](s64)
    ; NOTC162OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; NOTC162OPS: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[UV1]], [[C]](s32)
    ; NOTC162OPS: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[UV1]], [[C]](s32)
    ; NOTC162OPS: [[OR:%[0-9]+]]:_(s32) = G_OR [[LSHR]], [[SHL]]
    ; NOTC162OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65280
    ; NOTC162OPS: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; NOTC162OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[UV1]], [[C1]]
    ; NOTC162OPS: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[AND]], [[C2]](s32)
    ; NOTC162OPS: [[OR1:%[0-9]+]]:_(s32) = G_OR [[OR]], [[SHL1]]
    ; NOTC162OPS: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[UV1]], [[C2]](s32)
    ; NOTC162OPS: [[AND1:%[0-9]+]]:_(s32) = G_AND [[LSHR1]], [[C1]]
    ; NOTC162OPS: [[OR2:%[0-9]+]]:_(s32) = G_OR [[OR1]], [[AND1]]
    ; NOTC162OPS: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; NOTC162OPS: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[UV]], [[C3]](s32)
    ; NOTC162OPS: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[UV]], [[C3]](s32)
    ; NOTC162OPS: [[OR3:%[0-9]+]]:_(s32) = G_OR [[LSHR2]], [[SHL2]]
    ; NOTC162OPS: [[C4:%[0-9]+]]:_(s32) = G_CONSTANT i32 65280
    ; NOTC162OPS: [[C5:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; NOTC162OPS: [[AND2:%[0-9]+]]:_(s32) = G_AND [[UV]], [[C4]]
    ; NOTC162OPS: [[SHL3:%[0-9]+]]:_(s32) = G_SHL [[AND2]], [[C5]](s32)
    ; NOTC162OPS: [[OR4:%[0-9]+]]:_(s32) = G_OR [[OR3]], [[SHL3]]
    ; NOTC162OPS: [[LSHR3:%[0-9]+]]:_(s32) = G_LSHR [[UV]], [[C5]](s32)
    ; NOTC162OPS: [[AND3:%[0-9]+]]:_(s32) = G_AND [[LSHR3]], [[C4]]
    ; NOTC162OPS: [[OR5:%[0-9]+]]:_(s32) = G_OR [[OR4]], [[AND3]]
    ; NOTC162OPS: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[OR2]](s32), [[OR5]](s32)
    ; NOTC162OPS: $e4 = COPY [[MV]](s64)
    %0:_(s64) = COPY $e4
    %1:_(s64) = G_BSWAP %0
    $e4 = COPY %1
...
