# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

---
name:            ne_min
legalized:       true
regBankSelected: true
registers:
    - { id: 0, class: dataregbank }
    - { id: 1, class: dataregbank }
    - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ne_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[NE_ddc:%[0-9]+]]:dataregs = NE_ddc [[COPY]], -256
    ; CHECK: $d2 = COPY [[NE_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -256
    %2(s32) = G_ICMP intpred(ne), %0(s32), %1
    $d2 = COPY %2(s32)
...

---
name:            ne_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ne_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[NE_ddc:%[0-9]+]]:dataregs = NE_ddc [[COPY]], 255
    ; CHECK: $d2 = COPY [[NE_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 255
  %2(s32) = G_ICMP intpred(ne), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ne_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ne_too_small
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967039
    ; CHECK: [[NE_ddd:%[0-9]+]]:dataregs = NE_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[NE_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 -257
  %2(s32) = G_ICMP intpred(ne), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ne_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ne_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 256
    ; CHECK: [[NE_ddd:%[0-9]+]]:dataregs = NE_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[NE_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 256
  %2(s32) = G_ICMP intpred(ne), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            eq_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: eq_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[EQ_ddc:%[0-9]+]]:dataregs = EQ_ddc [[COPY]], -256
    ; CHECK: $d2 = COPY [[EQ_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 -256
  %2(s32) = G_ICMP intpred(eq), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            eq_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: eq_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[EQ_ddc:%[0-9]+]]:dataregs = EQ_ddc [[COPY]], 255
    ; CHECK: $d2 = COPY [[EQ_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 255
  %2(s32) = G_ICMP intpred(eq), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            eq_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: eq_too_small
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967039
    ; CHECK: [[EQ_ddd:%[0-9]+]]:dataregs = EQ_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[EQ_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 -257
  %2(s32) = G_ICMP intpred(eq), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            eq_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: eq_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 256
    ; CHECK: [[EQ_ddd:%[0-9]+]]:dataregs = EQ_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[EQ_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 256
  %2(s32) = G_ICMP intpred(eq), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sge_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sge_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[GE_ddc:%[0-9]+]]:dataregs = GE_ddc [[COPY]], -256
    ; CHECK: $d2 = COPY [[GE_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 -256
  %2(s32) = G_ICMP intpred(sge), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sge_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sge_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[GE_ddc:%[0-9]+]]:dataregs = GE_ddc [[COPY]], 255
    ; CHECK: $d2 = COPY [[GE_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 255
  %2(s32) = G_ICMP intpred(sge), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sge_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sge_too_small
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967039
    ; CHECK: [[GE_ddd:%[0-9]+]]:dataregs = GE_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[GE_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 -257
  %2(s32) = G_ICMP intpred(sge), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sge_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sge_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 256
    ; CHECK: [[GE_ddd:%[0-9]+]]:dataregs = GE_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[GE_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 256
  %2(s32) = G_ICMP intpred(sge), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            uge_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: uge_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[GEU_ddc:%[0-9]+]]:dataregs = GEU_ddc [[COPY]], 0
    ; CHECK: $d2 = COPY [[GEU_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 0
  %2(s32) = G_ICMP intpred(uge), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            uge_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: uge_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[GEU_ddc:%[0-9]+]]:dataregs = GEU_ddc [[COPY]], 511
    ; CHECK: $d2 = COPY [[GEU_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 511
  %2(s32) = G_ICMP intpred(uge), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            uge_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: uge_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 512
    ; CHECK: [[GEU_ddd:%[0-9]+]]:dataregs = GEU_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[GEU_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 512
  %2(s32) = G_ICMP intpred(uge), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            slt_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: slt_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[LT_ddc:%[0-9]+]]:dataregs = LT_ddc [[COPY]], -256
    ; CHECK: $d2 = COPY [[LT_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 -256
  %2(s32) = G_ICMP intpred(slt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            slt_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: slt_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[LT_ddc:%[0-9]+]]:dataregs = LT_ddc [[COPY]], 255
    ; CHECK: $d2 = COPY [[LT_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 255
  %2(s32) = G_ICMP intpred(slt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            slt_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: slt_too_small
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967039
    ; CHECK: [[LT_ddd:%[0-9]+]]:dataregs = LT_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[LT_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 -257
  %2(s32) = G_ICMP intpred(slt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            slt_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: slt_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 256
    ; CHECK: [[LT_ddd:%[0-9]+]]:dataregs = LT_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[LT_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 256
  %2(s32) = G_ICMP intpred(slt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ult_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ult_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[LTU_ddc:%[0-9]+]]:dataregs = LTU_ddc [[COPY]], 0
    ; CHECK: $d2 = COPY [[LTU_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 0
  %2(s32) = G_ICMP intpred(ult), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ult_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ult_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[LTU_ddc:%[0-9]+]]:dataregs = LTU_ddc [[COPY]], 511
    ; CHECK: $d2 = COPY [[LTU_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 511
  %2(s32) = G_ICMP intpred(ult), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ult_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ult_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 512
    ; CHECK: [[LTU_ddd:%[0-9]+]]:dataregs = LTU_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d2 = COPY [[LTU_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 512
  %2(s32) = G_ICMP intpred(ult), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sle_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sle_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[LT_ddc:%[0-9]+]]:dataregs = LT_ddc [[COPY]], -256
    ; CHECK: $d2 = COPY [[LT_ddc]]
  %0(s32) = COPY $d4
  ; NOTE: Since we change the comparison to strictly less than, the
  ; negative range is increased by one
  %1(s32) = G_CONSTANT i32 -257
  %2(s32) = G_ICMP intpred(sle), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sle_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sle_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[LT_ddc:%[0-9]+]]:dataregs = LT_ddc [[COPY]], 255
    ; CHECK: $d2 = COPY [[LT_ddc]]
  %0(s32) = COPY $d4
  ; NOTE: Since we change the comparison to strictly less than, the
  ; positive range is decreased by one
  %1(s32) = G_CONSTANT i32 254
  %2(s32) = G_ICMP intpred(sle), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sle_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sle_too_small
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967038
    ; CHECK: [[GE_ddd:%[0-9]+]]:dataregs = GE_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[GE_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 -258
  %2(s32) = G_ICMP intpred(sle), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sle_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sle_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 255
    ; CHECK: [[GE_ddd:%[0-9]+]]:dataregs = GE_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[GE_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 255
  %2(s32) = G_ICMP intpred(sle), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sle_out_of_range
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sle_out_of_range
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 2147483647
    ; CHECK: [[GE_ddd:%[0-9]+]]:dataregs = GE_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[GE_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 2147483647
  %2(s32) = G_ICMP intpred(sle), %0(s32), %1
  $d2 = COPY %2(s32)
...


---
name:            ule_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ule_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[LTU_ddc:%[0-9]+]]:dataregs = LTU_ddc [[COPY]], 1
    ; CHECK: $d2 = COPY [[LTU_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 0
  %2(s32) = G_ICMP intpred(ule), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ule_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ule_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[LTU_ddc:%[0-9]+]]:dataregs = LTU_ddc [[COPY]], 511
    ; CHECK: $d2 = COPY [[LTU_ddc]]
  %0(s32) = COPY $d4
  ; NOTE: Since we change the comparison to strictly less than, the
  ; positive range is decreased by one
  %1(s32) = G_CONSTANT i32 510
  %2(s32) = G_ICMP intpred(ule), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ule_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ule_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 511
    ; CHECK: [[GEU_ddd:%[0-9]+]]:dataregs = GEU_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[GEU_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 511
  %2(s32) = G_ICMP intpred(ule), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ule_out_of_range
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ule_out_of_range
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967295
    ; CHECK: [[GEU_ddd:%[0-9]+]]:dataregs = GEU_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[GEU_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 4294967295
  %2(s32) = G_ICMP intpred(ule), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sgt_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sgt_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[GE_ddc:%[0-9]+]]:dataregs = GE_ddc [[COPY]], -256
    ; CHECK: $d2 = COPY [[GE_ddc]]
  %0(s32) = COPY $d4
  ; NOTE: Since we change the comparison to greater or equal, the
  ; negative range is increased by one
  %1(s32) = G_CONSTANT i32 -257
  %2(s32) = G_ICMP intpred(sgt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sgt_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sgt_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[GE_ddc:%[0-9]+]]:dataregs = GE_ddc [[COPY]], 255
    ; CHECK: $d2 = COPY [[GE_ddc]]
  %0(s32) = COPY $d4
  ; NOTE: Since we change the comparison to greater or equal, the
  ; positive range is decreased by one
  %1(s32) = G_CONSTANT i32 254
  %2(s32) = G_ICMP intpred(sgt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sgt_too_small
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sgt_too_small
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967038
    ; CHECK: [[LT_ddd:%[0-9]+]]:dataregs = LT_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[LT_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 -258
  %2(s32) = G_ICMP intpred(sgt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sgt_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sgt_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 255
    ; CHECK: [[LT_ddd:%[0-9]+]]:dataregs = LT_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[LT_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 255
  %2(s32) = G_ICMP intpred(sgt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            sgt_out_of_range
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sgt_out_of_range
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 2147483647
    ; CHECK: [[LT_ddd:%[0-9]+]]:dataregs = LT_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[LT_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 2147483647
  %2(s32) = G_ICMP intpred(sgt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ugt_min
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ugt_min
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[GEU_ddc:%[0-9]+]]:dataregs = GEU_ddc [[COPY]], 1
    ; CHECK: $d2 = COPY [[GEU_ddc]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 0
  %2(s32) = G_ICMP intpred(ugt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ugt_max
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ugt_max
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[GEU_ddc:%[0-9]+]]:dataregs = GEU_ddc [[COPY]], 511
    ; CHECK: $d2 = COPY [[GEU_ddc]]
  %0(s32) = COPY $d4
  ; NOTE: Since we change the comparison to greater or equal, the
  ; positive range is decreased by one
  %1(s32) = G_CONSTANT i32 510
  %2(s32) = G_ICMP intpred(ugt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ugt_too_big
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ugt_too_big
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 511
    ; CHECK: [[LTU_ddd:%[0-9]+]]:dataregs = LTU_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[LTU_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 511
  %2(s32) = G_ICMP intpred(ugt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ugt_out_of_range
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ugt_out_of_range
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967295
    ; CHECK: [[LTU_ddd:%[0-9]+]]:dataregs = LTU_ddd [[MOVImmDataReg]], [[COPY]]
    ; CHECK: $d2 = COPY [[LTU_ddd]]
  %0(s32) = COPY $d4
  %1(s32) = G_CONSTANT i32 4294967295
  %2(s32) = G_ICMP intpred(ugt), %0(s32), %1
  $d2 = COPY %2(s32)
...

---
name:            ne_p0_0
legalized:       true
regBankSelected: true
registers:
    - { id: 0, class: addrregbank }
    - { id: 1, class: addrregbank }
    - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ne_p0_0
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[NEZA_da:%[0-9]+]]:dataregs = NEZA_da [[COPY]]
    ; CHECK: $d2 = COPY [[NEZA_da]]
    %0(p0) = COPY $a4
    %1(p0) = G_CONSTANT i32 0
    %2(s32) = G_ICMP intpred(ne), %0(p0), %1
    $d2 = COPY %2(s32)
...

---
name:            ne_p0_other
legalized:       true
regBankSelected: true
registers:
    - { id: 0, class: addrregbank }
    - { id: 1, class: addrregbank }
    - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: ne_p0_other
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[MOVImmAddrReg:%[0-9]+]]:addrregs = MOVImmAddrReg 4
    ; CHECK: [[NEA_daa:%[0-9]+]]:dataregs = NEA_daa [[COPY]], [[MOVImmAddrReg]]
    ; CHECK: $d2 = COPY [[NEA_daa]]
    %0(p0) = COPY $a4
    %1(p0) = G_CONSTANT i32 4
    %2(s32) = G_ICMP intpred(ne), %0(p0), %1
    $d2 = COPY %2(s32)
...

---
name:            eq_p0_0
legalized:       true
regBankSelected: true
registers:
    - { id: 0, class: addrregbank }
    - { id: 1, class: addrregbank }
    - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: eq_p0_0
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[EQZA_da:%[0-9]+]]:dataregs = EQZA_da [[COPY]]
    ; CHECK: $d2 = COPY [[EQZA_da]]
    %0(p0) = COPY $a4
    %1(p0) = G_CONSTANT i32 0
    %2(s32) = G_ICMP intpred(eq), %0(p0), %1
    $d2 = COPY %2(s32)
...

---
name:            eq_p0_other
legalized:       true
regBankSelected: true
registers:
    - { id: 0, class: addrregbank }
    - { id: 1, class: addrregbank }
    - { id: 2, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: eq_p0_other
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[MOVImmAddrReg:%[0-9]+]]:addrregs = MOVImmAddrReg 4
    ; CHECK: [[EQA_daa:%[0-9]+]]:dataregs = EQA_daa [[COPY]], [[MOVImmAddrReg]]
    ; CHECK: $d2 = COPY [[EQA_daa]]
    %0(p0) = COPY $a4
    %1(p0) = G_CONSTANT i32 4
    %2(s32) = G_ICMP intpred(eq), %0(p0), %1
    $d2 = COPY %2(s32)
...
