# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

--- |
  define void @load_acquire_s8(i64* %addr) { ret void }
  define void @load_acquire_s16(i64* %addr) { ret void }
  define void @load_acquire_s32(i64* %addr) { ret void }
  define void @load_acquire_s64(i64* %addr) { ret void }
  define void @load_acquire_p0(i64* %addr) { ret void }

  define void @store_release_s8(i64* %addr) { ret void }
  define void @store_release_s16(i64* %addr) { ret void }
  define void @store_release_s32(i64* %addr) { ret void }
  define void @store_release_s64(i64* %addr) { ret void }
  define void @store_release_p0(i64* %addr) { ret void }
...

---
name:            load_acquire_s8
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: load_acquire_s8
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDB_dalc:%[0-9]+]]:dataregs = LDB_dalc [[COPY]], 0 :: (load acquire 1 from %ir.addr)
    ; CHECK: DSYNC
    ; CHECK: $d2 = COPY [[LDB_dalc]]
    %0(p0) = COPY $a4
    %1(s32) = G_LOAD %0(p0) :: (load acquire 1 from %ir.addr)
    $d2 = COPY %1(s32)
...

---
name:            load_acquire_s16
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: load_acquire_s16
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDH_dalc:%[0-9]+]]:dataregs = LDH_dalc [[COPY]], 0 :: (load acquire 2 from %ir.addr)
    ; CHECK: DSYNC
    ; CHECK: $d2 = COPY [[LDH_dalc]]
    %0(p0) = COPY $a4
    %1(s32) = G_LOAD %0(p0) :: (load acquire 2 from %ir.addr)
    $d2 = COPY %1(s32)
...

---
name:            load_acquire_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: load_acquire_s32
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDW_dalc:%[0-9]+]]:dataregs = LDW_dalc [[COPY]], 0 :: (load acquire 4 from %ir.addr)
    ; CHECK: DSYNC
    ; CHECK: $d2 = COPY [[LDW_dalc]]
    %0(p0) = COPY $a4
    %1(s32) = G_LOAD %0(p0) :: (load acquire 4 from %ir.addr)
    $d2 = COPY %1(s32)
...

---
name:            load_acquire_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: load_acquire_s64
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDD_eac:%[0-9]+]]:extdataregs = LDD_eac [[COPY]], 0 :: (load acquire 8 from %ir.addr)
    ; CHECK: DSYNC
    ; CHECK: $e2 = COPY [[LDD_eac]]
    %0(p0) = COPY $a4
    %1(s64) = G_LOAD %0(p0) :: (load acquire 8 from %ir.addr)
    $e2 = COPY %1(s64)
...

---
name:            load_acquire_p0
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: addrregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: load_acquire_p0
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDA_aalc:%[0-9]+]]:addrregs = LDA_aalc [[COPY]], 0 :: (load acquire 4 from %ir.addr)
    ; CHECK: DSYNC
    ; CHECK: $a2 = COPY [[LDA_aalc]]
    %0(p0) = COPY $a4
    %1(p0) = G_LOAD %0(p0) :: (load acquire 4 from %ir.addr)
    $a2 = COPY %1(p0)
...

---
name:            store_release_s8
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: store_release_s8
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: DSYNC
    ; CHECK: STB_alcd [[COPY]], 0, [[COPY1]] :: (store release 1 into %ir.addr)
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    G_STORE %1(s32), %0(p0) :: (store release 1 into %ir.addr)
...

---
name:            store_release_s16
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: store_release_s16
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: DSYNC
    ; CHECK: STH_alcd [[COPY]], 0, [[COPY1]] :: (store release 2 into %ir.addr)
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    G_STORE %1(s32), %0(p0) :: (store release 2 into %ir.addr)
...

---
name:            store_release_s32
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: store_release_s32
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: DSYNC
    ; CHECK: STW_alcd [[COPY]], 0, [[COPY1]] :: (store release 4 into %ir.addr)
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    G_STORE %1(s32), %0(p0) :: (store release 4 into %ir.addr)
...

---
name:            store_release_s64
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: store_release_s64
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:extdataregs = COPY $e4
    ; CHECK: DSYNC
    ; CHECK: STD_ace [[COPY]], 0, [[COPY1]] :: (store release 8 into %ir.addr)
    %0(p0) = COPY $a4
    %1(s64) = COPY $e4
    G_STORE %1(s64), %0(p0) :: (store release 8 into %ir.addr)
...

---
name:            store_release_p0
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
body:             |
  bb.0:
    ; CHECK-LABEL: name: store_release_p0
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: DSYNC
    ; CHECK: STA_alca [[COPY]], 0, [[COPY]] :: (store release 4 into %ir.addr)
    %0(p0) = COPY $a4
    G_STORE %0(p0), %0(p0) :: (store release 4 into %ir.addr)
...
