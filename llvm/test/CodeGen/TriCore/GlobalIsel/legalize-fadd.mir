# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
# RUN: llc -mtriple=tricore -mattr=-tc18 -run-pass=legalizer -verify-machineinstrs %s -o - \
# RUN: | FileCheck -check-prefixes=NOTC18OPS %s

---
name:            test_fadd_f32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_fadd_f32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FADD:%[0-9]+]]:_(s32) = G_FADD [[COPY]], [[COPY1]]
    ; CHECK: $d2 = COPY [[FADD]](s32)
    ; CHECK: RET implicit $a11, implicit $d2
    ; NOTC18OPS-LABEL: name: test_fadd_f32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FADD:%[0-9]+]]:_(s32) = G_FADD [[COPY]], [[COPY1]]
    ; NOTC18OPS: $d2 = COPY [[FADD]](s32)
    ; NOTC18OPS: RET implicit $a11, implicit $d2
    %0:_(s32) = COPY $d4
    %1:_(s32) = COPY $d5
    %2:_(s32) = G_FADD %0, %1
    $d2 = COPY %2(s32)
    RET implicit $a11, implicit $d2

...

---
name:            test_fadd_f16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_fadd_f16
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FPTRUNC:%[0-9]+]]:_(s16) = G_FPTRUNC [[COPY]](s32)
    ; CHECK: [[FPTRUNC1:%[0-9]+]]:_(s16) = G_FPTRUNC [[COPY1]](s32)
    ; CHECK: [[FPEXT:%[0-9]+]]:_(s32) = G_FPEXT [[FPTRUNC]](s16)
    ; CHECK: [[FPEXT1:%[0-9]+]]:_(s32) = G_FPEXT [[FPTRUNC1]](s16)
    ; CHECK: [[FADD:%[0-9]+]]:_(s32) = G_FADD [[FPEXT]], [[FPEXT1]]
    ; CHECK: [[FPTRUNC2:%[0-9]+]]:_(s16) = G_FPTRUNC [[FADD]](s32)
    ; CHECK: [[FPEXT2:%[0-9]+]]:_(s32) = G_FPEXT [[FPTRUNC2]](s16)
    ; CHECK: $d2 = COPY [[FPEXT2]](s32)
    ; CHECK: RET implicit $a11, implicit $d2
    ; NOTC18OPS-LABEL: name: test_fadd_f16
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FPTRUNC:%[0-9]+]]:_(s16) = G_FPTRUNC [[COPY]](s32)
    ; NOTC18OPS: [[FPTRUNC1:%[0-9]+]]:_(s16) = G_FPTRUNC [[COPY1]](s32)
    ; NOTC18OPS: [[FPEXT:%[0-9]+]]:_(s32) = G_FPEXT [[FPTRUNC]](s16)
    ; NOTC18OPS: [[FPEXT1:%[0-9]+]]:_(s32) = G_FPEXT [[FPTRUNC1]](s16)
    ; NOTC18OPS: [[FADD:%[0-9]+]]:_(s32) = G_FADD [[FPEXT]], [[FPEXT1]]
    ; NOTC18OPS: [[FPTRUNC2:%[0-9]+]]:_(s16) = G_FPTRUNC [[FADD]](s32)
    ; NOTC18OPS: [[FPEXT2:%[0-9]+]]:_(s32) = G_FPEXT [[FPTRUNC2]](s16)
    ; NOTC18OPS: $d2 = COPY [[FPEXT2]](s32)
    ; NOTC18OPS: RET implicit $a11, implicit $d2
    %0:_(s32) = COPY $d4
    %1:_(s32) = COPY $d5
    %2:_(s16) = G_FPTRUNC %0:_(s32)
    %3:_(s16) = G_FPTRUNC %1:_(s32)
    %4:_(s16) = G_FADD %2, %3
    %5:_(s32) = G_FPEXT %4:_(s16)
    $d2 = COPY %5(s32)
    RET implicit $a11, implicit $d2

...

---
name:            test_fadd_f64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_fadd_f64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FADD:%[0-9]+]]:_(s64) = G_FADD [[COPY]], [[COPY1]]
    ; CHECK: $e2 = COPY [[FADD]](s64)
    ; CHECK: RET implicit $a11, implicit $d2
    ; NOTC18OPS-LABEL: name: test_fadd_f64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__adddf3, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $e2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s64) = COPY $e2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e2 = COPY [[COPY2]](s64)
    ; NOTC18OPS: RET implicit $a11, implicit $d2
    %0:_(s64) = COPY $e4
    %1:_(s64) = COPY $e6
    %2:_(s64) = G_FADD %0, %1
    $e2 = COPY %2(s64)
    RET implicit $a11, implicit $d2

...
