# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
---
name:            test_ashr_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_ashr_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[COPY]], [[COPY1]](s32)
    ; CHECK: $d2 = COPY [[ASHR]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = COPY $d5
    %2:_(s32) = G_ASHR %0, %1
    $d2 = COPY %2(s32)
...
---
name:            test_ashr_small_scalar
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_ashr_small_scalar
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY]](s32)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[TRUNC]](s8)
    ; CHECK: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SEXT]], [[AND]](s32)
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ASHR]](s32)
    ; CHECK: $d2 = COPY [[COPY3]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = COPY $d5
    %2:_(s8) = G_TRUNC %0:_(s32)
    %3:_(s8) = G_TRUNC %1:_(s32)
    %4:_(s8) = G_ASHR %2, %3
    %5:_(s32) = G_ANYEXT %4:_(s8)
    $d2 = COPY %5(s32)
...
---
name:            test_ashr_big_scalar
body:             |
  bb.0.entry:
    ; There are two cases to consider:
    ; 1) If the shift amount is >= 32-bit, the higher bits of the source are
    ;    shifted completely into the lower bits of the result (using an
    ;    adjusted shift amount, SUB), while the higher bits of the result
    ;    carry the sign bits of the higher bits of the src
    ; 2) If the shift amount is < 32, both the higher bits and the lower bits of
    ;    the src are shifted by the same amount, however parts of the upper bits
    ;    might be shifted into the lower part. Thus, the upper src part is
    ;    additionally shifted left (by SUB1) and OR'ed to the
    ;    right-shifted src lower part.
    ; CHECK-LABEL: name: test_ashr_big_scalar
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](s64)
    ; CHECK: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[TRUNC]], [[C]]
    ; CHECK: [[SUB1:%[0-9]+]]:_(s32) = G_SUB [[C]], [[TRUNC]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[TRUNC]](s32), [[C]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP]](s32)
    ; CHECK: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[TRUNC]](s32), [[C1]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP1]](s32)
    ; CHECK: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[UV1]], [[TRUNC]](s32)
    ; CHECK: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[UV]], [[TRUNC]](s32)
    ; CHECK: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[UV1]], [[SUB1]](s32)
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[LSHR]], [[SHL]]
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[UV1]], [[C2]](s32)
    ; CHECK: [[ASHR2:%[0-9]+]]:_(s32) = G_ASHR [[UV1]], [[SUB]](s32)
    ; CHECK: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[TRUNC1]](s1), [[OR]], [[ASHR2]]
    ; CHECK: [[SELECT1:%[0-9]+]]:_(s32) = G_SELECT [[TRUNC2]](s1), [[UV]], [[SELECT]]
    ; CHECK: [[SELECT2:%[0-9]+]]:_(s32) = G_SELECT [[TRUNC1]](s1), [[ASHR]], [[ASHR1]]
    ; CHECK: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[SELECT1]](s32), [[SELECT2]](s32)
    ; CHECK: $e2 = COPY [[MV]](s64)
   %0:_(s64) = COPY $e4
   %1:_(s64) = COPY $e6
   %2:_(s64) = G_ASHR %0, %1
   $e2 = COPY %2(s64)
...
---
name:            test_ashr_cimm_32
body:             |
  bb.1:
    liveins: $d4
    ; CHECK-LABEL: name: test_ashr_cimm_32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[COPY]], [[C]](s32)
    ; CHECK: $d2 = COPY [[ASHR]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = G_CONSTANT i32 8
    %2:_(s32) = G_ASHR %0, %1(s32)
    $d2 = COPY %2(s32)
...
