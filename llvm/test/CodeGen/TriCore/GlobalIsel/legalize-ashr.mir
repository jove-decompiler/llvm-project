# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
---
name:            test_ashr_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_ashr_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_ASHR [[COPY]], [[COPY1]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = COPY $d5
    %2:_(s32) = G_ASHR %0, %1
    $d2 = COPY %2(s32)
...
---
name:            test_ashr_small_scalar
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_ashr_small_scalar
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[COPY]]
    ; CHECK: [[AMTMASK:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[AMTMASK]]
    ; CHECK: [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[TRUNC]]
    ; CHECK: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SEXT]], [[AND]]
    ; CHECK: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ASHR]](s32)
    ; CHECK: $d2 = COPY [[COPY4]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = COPY $d5
    %2:_(s8) = G_TRUNC %0:_(s32)
    %3:_(s8) = G_TRUNC %1:_(s32)
    %4:_(s8) = G_ASHR %2, %3
    %5:_(s32) = G_ANYEXT %4:_(s8)
    $d2 = COPY %5(s32)
...
---
name:            test_ashr_big_scalar
body:             |
  bb.0.entry:
    ; There are two cases to consider:
    ; 1) If the shift amount is >= 32-bit, the higher bits of the source are 
    ;    shifted completely into the lower bits of the result (using an 
    ;    adjusted shift amount, ADJ_AMT), while the higher bits of the result
    ;    carry the sign bits of the higher bits of the src
    ; 2) If the shift amount is < 32, both the higher bits and the lower bits of
    ;    the src are shifted by the same amount, however parts of the upper bits
    ;    might be shifted into the lower part. Thus, the upper src part is 
    ;    additionally shifted left (by D5LEFTSHAMT) and OR'ed to the
    ;    right-shifted src lower part.
    ; CHECK-LABEL: name: test_ashr_big_scalar
    ; CHECK: [[E4:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[E6:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[AMT:%[0-9]+]]:_(s32) = G_TRUNC [[E6]]
    ; CHECK: [[THIRTYTWO:%[0-9]+]]:_(s32) = G_CONSTANT i32 32
    ; CHECK: [[D4:%[0-9]+]]:_(s32), [[D5:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[E4]](s64)
    ; CHECK: [[ADJ_AMT:%[0-9]+]]:_(s32) = G_SUB [[AMT]], [[THIRTYTWO]]
    ; CHECK: [[D5LEFTSHAMT:%[0-9]+]]:_(s32) = G_SUB [[THIRTYTWO]], [[AMT]]
    ; CHECK: [[ZERO:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[CMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[AMT]](s32), [[THIRTYTWO]]
    ; CHECK: [[LESS32BIT:%[0-9]+]]:_(s1) = G_TRUNC [[CMP]](s32)
    ; CHECK: [[ISZERO:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[AMT]](s32), [[ZERO]]
    ; CHECK: [[ISZERORES:%[0-9]+]]:_(s1) = G_TRUNC [[ISZERO]](s32)
    ; CHECK: [[D5ASHR:%[0-9]+]]:_(s32) = G_ASHR [[D5]], [[AMT]]
    ; CHECK: [[D4LSHR:%[0-9]+]]:_(s32) = G_LSHR [[D4]], [[AMT]]
    ; CHECK: [[D5SHL:%[0-9]+]]:_(s32) = G_SHL [[D5]], [[D5LEFTSHAMT]]
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[D4LSHR]], [[D5SHL]]
    ; CHECK: [[THIRTYONE:%[0-9]+]]:_(s32) = G_CONSTANT i32 31
    ; CHECK: [[D5ASHR31:%[0-9]+]]:_(s32) = G_ASHR [[D5]], [[THIRTYONE]]
    ; CHECK: [[UPPER2LOWER:%[0-9]+]]:_(s32) = G_ASHR [[D5]], [[ADJ_AMT]]
    ; CHECK: [[D4RES:%[0-9]+]]:_(s32) = G_SELECT [[LESS32BIT]](s1), [[OR]], [[UPPER2LOWER]]
    ; CHECK: [[LOWER:%[0-9]+]]:_(s32) = G_SELECT [[ISZERORES]](s1), [[D4]], [[D4RES]]
    ; CHECK: [[UPPER:%[0-9]+]]:_(s32) = G_SELECT [[LESS32BIT]](s1), [[D5ASHR]], [[D5ASHR31]]
    ; CHECK: [[RES:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[LOWER]](s32), [[UPPER]](s32)
    ; CHECK: $e2 = COPY [[RES]](s64)
   %0:_(s64) = COPY $e4
   %1:_(s64) = COPY $e6
   %2:_(s64) = G_ASHR %0, %1
   $e2 = COPY %2(s64)
...
---
name:            test_ashr_cimm_32
body:             |
  bb.1:
    liveins: $d4
    ; CHECK-LABEL: name: test_ashr_cimm_32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[COPY]], [[C]](s32)
    ; CHECK: $d2 = COPY [[ASHR]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = G_CONSTANT i32 8
    %2:_(s32) = G_ASHR %0, %1(s32)
    $d2 = COPY %2(s32)
...
