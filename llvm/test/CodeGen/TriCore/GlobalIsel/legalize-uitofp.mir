# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer \
# RUN:   -verify-machineinstrs %s -o - | FileCheck -check-prefixes=TC18OPS %s
# RUN: llc -O0 -mtriple=tricore -mattr=-tc18 -global-isel -run-pass=legalizer \
# RUN:   -verify-machineinstrs %s -o - | FileCheck -check-prefixes=NOTC18OPS %s

---
name:            uitofp_s32_s32
body:             |
  bb.0:
    liveins: $d4


    ; TC18OPS-LABEL: name: uitofp_s32_s32
    ; TC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; TC18OPS: [[UITOFP:%[0-9]+]]:_(s32) = G_UITOFP [[COPY]](s32)
    ; TC18OPS: $d4 = COPY [[UITOFP]](s32)
    ; NOTC18OPS-LABEL: name: uitofp_s32_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[UITOFP:%[0-9]+]]:_(s32) = G_UITOFP [[COPY]](s32)
    ; NOTC18OPS: $d4 = COPY [[UITOFP]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = G_UITOFP %0(s32)
    $d4 = COPY %1(s32)
...

---
name:            uitofp_s64_s32
body:             |
  bb.0:
    liveins: $e4

    ; TC18OPS-LABEL: name: uitofp_s64_s32
    ; TC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; TC18OPS: [[UITOFP:%[0-9]+]]:_(s64) = G_UITOFP [[COPY]](s32)
    ; TC18OPS: $e4 = COPY [[UITOFP]](s64)
    ; NOTC18OPS-LABEL: name: uitofp_s64_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $d4 = COPY [[COPY]](s32)
    ; NOTC18OPS: CALL &__floatunsidf, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $d4, implicit-def $e2
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY1]](s64)
    %0:_(s32) = COPY $d4
    %1:_(s64) = G_UITOFP %0(s32)
    $e4 = COPY %1(s64)
...

---
name:            uitofp_s64_s64
body:             |
  bb.0:
    liveins: $e4

    ; TC18OPS-LABEL: name: uitofp_s64_s64
    ; TC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; TC18OPS: [[UITOFP:%[0-9]+]]:_(s64) = G_UITOFP [[COPY]](s64)
    ; TC18OPS: $e4 = COPY [[UITOFP]](s64)
    ; NOTC18OPS-LABEL: name: uitofp_s64_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: CALL &__floatundidf, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit-def $e2
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY1]](s64)
    %0:_(s64) = COPY $e4
    %1:_(s64) = G_UITOFP %0(s64)
    $e4 = COPY %1(s64)
...

---
name:            uitofp_smaller_than_s32
body:             |
  bb.0:
    liveins: $d4

    ; TC18OPS-LABEL: name: uitofp_smaller_than_s32
    ; TC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; TC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; TC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; TC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; TC18OPS: [[UITOFP:%[0-9]+]]:_(s32) = G_UITOFP [[AND]](s32)
    ; TC18OPS: $d4 = COPY [[UITOFP]](s32)
    ; NOTC18OPS-LABEL: name: uitofp_smaller_than_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; NOTC18OPS: [[UITOFP:%[0-9]+]]:_(s32) = G_UITOFP [[AND]](s32)
    ; NOTC18OPS: $d4 = COPY [[UITOFP]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s16) = G_TRUNC %0
    %2:_(s32) = G_UITOFP %1
    $d4 = COPY %2
...

---
name:            uitofp_between_s32_and_s64
body:             |
  bb.0:
    liveins: $e4

    ; TC18OPS-LABEL: name: uitofp_between_s32_and_s64
    ; TC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; TC18OPS: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 281474976710655
    ; TC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY [[COPY]](s64)
    ; TC18OPS: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY1]](s64)
    ; TC18OPS: [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C]](s64)
    ; TC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[UV]], [[UV2]]
    ; TC18OPS: [[AND1:%[0-9]+]]:_(s32) = G_AND [[UV1]], [[UV3]]
    ; TC18OPS: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[AND]](s32), [[AND1]](s32)
    ; TC18OPS: [[UITOFP:%[0-9]+]]:_(s64) = G_UITOFP [[MV]](s64)
    ; TC18OPS: $e4 = COPY [[UITOFP]](s64)
    ; NOTC18OPS-LABEL: name: uitofp_between_s32_and_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 281474976710655
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY [[COPY]](s64)
    ; NOTC18OPS: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY1]](s64)
    ; NOTC18OPS: [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[C]](s64)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[UV]], [[UV2]]
    ; NOTC18OPS: [[AND1:%[0-9]+]]:_(s32) = G_AND [[UV1]], [[UV3]]
    ; NOTC18OPS: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[AND]](s32), [[AND1]](s32)
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[MV]](s64)
    ; NOTC18OPS: CALL &__floatundidf, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit-def $e2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s64) = COPY $e2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY2]](s64)
    %0:_(s64) = COPY $e4
    %1:_(s48) = G_TRUNC %0
    %2:_(s64) = G_UITOFP %1
    $e4 = COPY %2
...

---
name:            uitofp_s32_s64
body:             |
  bb.0:
    liveins: $e4

    ; TC18OPS-LABEL: name: uitofp_s32_s64
    ; TC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; TC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; TC18OPS: $e4 = COPY [[COPY]](s64)
    ; TC18OPS: CALL &__floatundisf, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit-def $d2
    ; TC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d2
    ; TC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; TC18OPS: $d2 = COPY [[COPY1]](s32)
    ; NOTC18OPS-LABEL: name: uitofp_s32_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: CALL &__floatundisf, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit-def $d2
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $d2 = COPY [[COPY1]](s32)
    %0:_(s64) = COPY $e4
    %1:_(s32) = G_UITOFP %0
    $d2 = COPY %1
...
