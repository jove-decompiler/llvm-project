# RUN: llc -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

---
# Check that we select a 32-bit dataregbank G_ADD into ADD_ddd on dataregbank.
# Also check that we constrain the register class of the COPY to dataregs.
name:            add_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: add_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[ADD_ddd:%[0-9]+]]:dataregs = ADD_ddd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: $d4 = COPY [[ADD_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_ADD %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_SUB operations.
name:            sub_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: sub_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[SUB_ddd:%[0-9]+]]:dataregs = SUB_ddd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: $d4 = COPY [[SUB_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_SUB %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_AND operations.
name:            and
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: and
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[AND_ddd:%[0-9]+]]:dataregs = AND_ddd [[COPY]], [[COPY1]]
    ; CHECK: $d4 = COPY [[AND_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_AND %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_OR operations.
name:            or
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: or
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[OR_ddd:%[0-9]+]]:dataregs = OR_ddd [[COPY]], [[COPY1]]
    ; CHECK: $d4 = COPY [[OR_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_OR %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_XOR operations.
name:            xor
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: xor
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[XOR_ddd:%[0-9]+]]:dataregs = XOR_ddd [[COPY]], [[COPY1]]
    ; CHECK: $d4 = COPY [[XOR_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_XOR %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_PTR_ADD operations.
name:            ptr_add_addrregbank
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: ptr_add_addrregbank
    ; CHECK: [[A4:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[D4:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[D4_ADDR:%[0-9]+]]:addrregs = COPY [[D4]]
    ; CHECK: [[PTR_ADD:%[0-9]+]]:addrregs = ADDA_aaa [[A4]], [[D4_ADDR]]
    ; CHECK: $a4 = COPY [[PTR_ADD]]
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    %2(s32) = COPY %1(s32)
    %3(p0) = G_PTR_ADD %0, %2
    $a4 = COPY %3(p0)
...

---
# Same as add_s32, for G_PTR_ADD operations.
name:            ptr_add_dataregbank
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: ptr_add_dataregbank
    ; CHECK: [[A4:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[D4:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[A4_DATA:%[0-9]+]]:dataregs = COPY [[A4]]
    ; CHECK: [[PTR_ADD:%[0-9]+]]:dataregs = ADD_ddd [[A4_DATA]], [[D4]]
    ; CHECK: $d4 = COPY [[PTR_ADD]]
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    %2(p0) = COPY %0(p0)
    %3(p0) = G_PTR_ADD %2, %1
    $d4 = COPY %3(p0)
...

---
name:            mul_s32
legalized:       true
regBankSelected: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mul_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[MUL:%[0-9]+]]:dataregs = MUL_ddd [[COPY]], [[COPY1]]
    ; CHECK: $d2 = COPY [[MUL]]
    ; CHECK: RET implicit $a11, implicit $d2
    %0:dataregbank(s32) = COPY $d4
    %1:dataregbank(s32) = COPY $d5
    %2:dataregbank(s32) = G_MUL %0, %1
    $d2 = COPY %2(s32)
    RET implicit $a11, implicit $d2
...

---
name:            sdiv_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: sdiv_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[DIV_edd:%[0-9]+]]:extdataregs = DIV_edd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[DIV_edd]].dsub0
    ; CHECK: $d4 = COPY [[COPY2]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_SDIV %0, %1
    $d4 = COPY %2(s32)
...

---
name:            srem_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: srem_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[DIV_edd:%[0-9]+]]:extdataregs = DIV_edd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[DIV_edd]].dsub1
    ; CHECK: $d4 = COPY [[COPY2]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_SREM %0, %1
    $d4 = COPY %2(s32)
...
