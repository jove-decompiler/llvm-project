# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

---
# Check that we select a 32-bit dataregbank G_ADD into ADD_ddd on dataregbank.
# Also check that we constrain the register class of the COPY to dataregs.
name:            add_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: add_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[ADD_ddd:%[0-9]+]]:dataregs = ADD_ddd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: $d4 = COPY [[ADD_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_ADD %0, %1
    $d4 = COPY %2(s32)
...

---
name:            add_imm_min_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: add_imm_min_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[ADDI_ddc:%[0-9]+]]:dataregs = ADDI_ddc [[COPY]], -32768, implicit-def $psw
    ; CHECK: $d4 = COPY [[ADDI_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -32768
    %2(s32) = G_ADD %0, %1
    $d4 = COPY %2(s32)
...

---
name:            add_imm_max_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: add_imm_max_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[ADDI_ddc:%[0-9]+]]:dataregs = ADDI_ddc [[COPY]], 32767, implicit-def $psw
    ; CHECK: $d4 = COPY [[ADDI_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 32767
    %2(s32) = G_ADD %0, %1
    $d4 = COPY %2(s32)
...

---
name:            add_imm_too_small_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: add_imm_too_small_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294934527
    ; CHECK: [[ADD_ddd:%[0-9]+]]:dataregs = ADD_ddd [[COPY]], [[MOVImmDataReg]], implicit-def $psw
    ; CHECK: $d4 = COPY [[ADD_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -32769
    %2(s32) = G_ADD %0, %1
    $d4 = COPY %2(s32)
...

---
name:            add_imm_too_big_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: add_imm_too_big_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 32768
    ; CHECK: [[ADD_ddd:%[0-9]+]]:dataregs = ADD_ddd [[COPY]], [[MOVImmDataReg]], implicit-def $psw
    ; CHECK: $d4 = COPY [[ADD_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 32768
    %2(s32) = G_ADD %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_SUB operations.
name:            sub_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: sub_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[SUB_ddd:%[0-9]+]]:dataregs = SUB_ddd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: $d4 = COPY [[SUB_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_SUB %0, %1
    $d4 = COPY %2(s32)
...

---
name:            sub_imm_min_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: sub_imm_min_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[ADDI_ddc:%[0-9]+]]:dataregs = ADDI_ddc [[COPY]], 32767, implicit-def $psw
    ; CHECK: $d4 = COPY [[ADDI_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -32767
    %2(s32) = G_SUB %0, %1
    $d4 = COPY %2(s32)
...

---
name:            sub_imm_max_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: sub_imm_max_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[ADDI_ddc:%[0-9]+]]:dataregs = ADDI_ddc [[COPY]], -32768, implicit-def $psw
    ; CHECK: $d4 = COPY [[ADDI_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 32768
    %2(s32) = G_SUB %0, %1
    $d4 = COPY %2(s32)
...

---
name:            sub_imm_too_small_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: sub_imm_too_small_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294934528
    ; CHECK: [[SUB_ddd:%[0-9]+]]:dataregs = SUB_ddd [[COPY]], [[MOVImmDataReg]], implicit-def $psw
    ; CHECK: $d4 = COPY [[SUB_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -32768
    %2(s32) = G_SUB %0, %1
    $d4 = COPY %2(s32)
...

---
name:            sub_imm_too_big_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: sub_imm_too_big_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 32769
    ; CHECK: [[SUB_ddd:%[0-9]+]]:dataregs = SUB_ddd [[COPY]], [[MOVImmDataReg]], implicit-def $psw
    ; CHECK: $d4 = COPY [[SUB_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 32769
    %2(s32) = G_SUB %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_AND operations.
name:            and
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: and
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[AND_ddd:%[0-9]+]]:dataregs = AND_ddd [[COPY]], [[COPY1]]
    ; CHECK: $d4 = COPY [[AND_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_AND %0, %1
    $d4 = COPY %2(s32)
...

---
name:            and_imm_min_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: and_imm_min_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[AND_ddc:%[0-9]+]]:dataregs = AND_ddc [[COPY]], 0
    ; CHECK: $d4 = COPY [[AND_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 0
    %2(s32) = G_AND %0, %1
    $d4 = COPY %2(s32)
...

---
name:            and_imm_max_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: and_imm_max_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[AND_ddc:%[0-9]+]]:dataregs = AND_ddc [[COPY]], 511
    ; CHECK: $d4 = COPY [[AND_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 511
    %2(s32) = G_AND %0, %1
    $d4 = COPY %2(s32)
...

---
name:            and_imm_too_small_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: and_imm_too_small_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967295
    ; CHECK: [[AND_ddd:%[0-9]+]]:dataregs = AND_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d4 = COPY [[AND_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -1
    %2(s32) = G_AND %0, %1
    $d4 = COPY %2(s32)
...

---
name:            and_imm_too_big_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: and_imm_too_big_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 512
    ; CHECK: [[AND_ddd:%[0-9]+]]:dataregs = AND_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d4 = COPY [[AND_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 512
    %2(s32) = G_AND %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_OR operations.
name:            or
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: or
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[OR_ddd:%[0-9]+]]:dataregs = OR_ddd [[COPY]], [[COPY1]]
    ; CHECK: $d4 = COPY [[OR_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_OR %0, %1
    $d4 = COPY %2(s32)
...

---
name:            or_imm_min_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: or_imm_min_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[OR_ddc:%[0-9]+]]:dataregs = OR_ddc [[COPY]], 0
    ; CHECK: $d4 = COPY [[OR_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 0
    %2(s32) = G_OR %0, %1
    $d4 = COPY %2(s32)
...

---
name:            or_imm_max_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: or_imm_max_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[OR_ddc:%[0-9]+]]:dataregs = OR_ddc [[COPY]], 511
    ; CHECK: $d4 = COPY [[OR_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 511
    %2(s32) = G_OR %0, %1
    $d4 = COPY %2(s32)
...

---
name:            or_imm_too_small_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: or_imm_too_small_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967295
    ; CHECK: [[OR_ddd:%[0-9]+]]:dataregs = OR_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d4 = COPY [[OR_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -1
    %2(s32) = G_OR %0, %1
    $d4 = COPY %2(s32)
...

---
name:            or_imm_too_big_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: or_imm_too_big_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 512
    ; CHECK: [[OR_ddd:%[0-9]+]]:dataregs = OR_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d4 = COPY [[OR_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 512
    %2(s32) = G_OR %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_XOR operations.
name:            xor
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: xor
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[XOR_ddd:%[0-9]+]]:dataregs = XOR_ddd [[COPY]], [[COPY1]]
    ; CHECK: $d4 = COPY [[XOR_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_XOR %0, %1
    $d4 = COPY %2(s32)
...

---
name:            xor_imm_min_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: xor_imm_min_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[XOR_ddc:%[0-9]+]]:dataregs = XOR_ddc [[COPY]], 0
    ; CHECK: $d4 = COPY [[XOR_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 0
    %2(s32) = G_XOR %0, %1
    $d4 = COPY %2(s32)
...

---
name:            xor_imm_max_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: xor_imm_max_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[XOR_ddc:%[0-9]+]]:dataregs = XOR_ddc [[COPY]], 511
    ; CHECK: $d4 = COPY [[XOR_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 511
    %2(s32) = G_XOR %0, %1
    $d4 = COPY %2(s32)
...

---
name:            xor_imm_too_small_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: xor_imm_too_small_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 4294967295
    ; CHECK: [[XOR_ddd:%[0-9]+]]:dataregs = XOR_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d4 = COPY [[XOR_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -1
    %2(s32) = G_XOR %0, %1
    $d4 = COPY %2(s32)
...

---
name:            xor_imm_too_big_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: xor_imm_too_big_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 512
    ; CHECK: [[XOR_ddd:%[0-9]+]]:dataregs = XOR_ddd [[COPY]], [[MOVImmDataReg]]
    ; CHECK: $d4 = COPY [[XOR_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 512
    %2(s32) = G_XOR %0, %1
    $d4 = COPY %2(s32)
...

---
# Same as add_s32, for G_PTR_ADD operations.
name:            ptr_add_addrregbank
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: ptr_add_addrregbank
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[COPY1]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: $a4 = COPY [[ADDA_aaa]]
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    %2(s32) = COPY %1(s32)
    %3(p0) = G_PTR_ADD %0, %2
    $a4 = COPY %3(p0)
...

---
# Same as add_s32, for G_PTR_ADD operations.
name:            ptr_add_dataregbank
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }
  - { id: 3, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: ptr_add_dataregbank
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[COPY]]
    ; CHECK: [[ADD_ddd:%[0-9]+]]:dataregs = ADD_ddd [[COPY2]], [[COPY1]]
    ; CHECK: $d4 = COPY [[ADD_ddd]]
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    %2(p0) = COPY %0(p0)
    %3(p0) = G_PTR_ADD %2, %1
    $d4 = COPY %3(p0)
...

---
name:            mul_s32
legalized:       true
regBankSelected: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: mul_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[MUL_ddd:%[0-9]+]]:dataregs = MUL_ddd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: $d2 = COPY [[MUL_ddd]]
    ; CHECK: RET implicit $a11, implicit $d2
    %0:dataregbank(s32) = COPY $d4
    %1:dataregbank(s32) = COPY $d5
    %2:dataregbank(s32) = G_MUL %0, %1
    $d2 = COPY %2(s32)
    RET implicit $a11, implicit $d2
...

---
name:            mul_imm_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: mul_imm_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MUL_ddc:%[0-9]+]]:dataregs = MUL_ddc [[COPY]], 255, implicit-def $psw
    ; CHECK: $d4 = COPY [[MUL_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 255
    %2(s32) = G_MUL %0, %1
    $d4 = COPY %2(s32)
...

---
name:            mul_imm_neg_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: mul_imm_neg_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MUL_ddc:%[0-9]+]]:dataregs = MUL_ddc [[COPY]], -256, implicit-def $psw
    ; CHECK: $d4 = COPY [[MUL_ddc]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 -256
    %2(s32) = G_MUL %0, %1
    $d4 = COPY %2(s32)
...

---
name:            mul_imm_too_big_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4

    ; CHECK-LABEL: name: mul_imm_too_big_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[MOVImmDataReg:%[0-9]+]]:dataregs = MOVImmDataReg 256
    ; CHECK: [[MUL_ddd:%[0-9]+]]:dataregs = MUL_ddd [[COPY]], [[MOVImmDataReg]], implicit-def $psw
    ; CHECK: $d4 = COPY [[MUL_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = G_CONSTANT i32 256
    %2(s32) = G_MUL %0, %1
    $d4 = COPY %2(s32)
...

---
name:            umulh_s32
legalized:       true
regBankSelected: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: umulh_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[MULU_edd:%[0-9]+]]:extdataregs = MULU_edd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[MULU_edd]].dsub1
    ; CHECK: $d2 = COPY [[COPY2]]
    ; CHECK: RET implicit $a11, implicit $d2
    %0:dataregbank(s32) = COPY $d4
    %1:dataregbank(s32) = COPY $d5
    %2:dataregbank(s32) = G_UMULH %0, %1
    $d2 = COPY %2(s32)
    RET implicit $a11, implicit $d2
...

---
name:            smulh_s32
legalized:       true
regBankSelected: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: smulh_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[MUL_edd:%[0-9]+]]:extdataregs = MUL_edd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[MUL_edd]].dsub1
    ; CHECK: $d2 = COPY [[COPY2]]
    ; CHECK: RET implicit $a11, implicit $d2
    %0:dataregbank(s32) = COPY $d4
    %1:dataregbank(s32) = COPY $d5
    %2:dataregbank(s32) = G_SMULH %0, %1
    $d2 = COPY %2(s32)
    RET implicit $a11, implicit $d2
...

---
name:            sdiv_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: sdiv_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[DIV_edd:%[0-9]+]]:extdataregs = DIV_edd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[DIV_edd]].dsub0
    ; CHECK: $d4 = COPY [[COPY2]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_SDIV %0, %1
    $d4 = COPY %2(s32)
...

---
name:            srem_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: srem_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[DIV_edd:%[0-9]+]]:extdataregs = DIV_edd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[DIV_edd]].dsub1
    ; CHECK: $d4 = COPY [[COPY2]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_SREM %0, %1
    $d4 = COPY %2(s32)
...
---
name:            udiv_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: udiv_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[DIVU_edd:%[0-9]+]]:extdataregs = DIVU_edd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[DIVU_edd]].dsub0
    ; CHECK: $d4 = COPY [[COPY2]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_UDIV %0, %1
    $d4 = COPY %2(s32)
...

---
name:            urem_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: urem_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[DIVU_edd:%[0-9]+]]:extdataregs = DIVU_edd [[COPY]], [[COPY1]], implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:dataregs = COPY [[DIVU_edd]].dsub1
    ; CHECK: $d4 = COPY [[COPY2]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_UREM %0, %1
    $d4 = COPY %2(s32)
...

---
name:            fadd_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: fadd_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[ADDF_ddd:%[0-9]+]]:dataregs = ADDF_ddd [[COPY]], [[COPY1]], implicit-def $psw, implicit $psw
    ; CHECK: $d4 = COPY [[ADDF_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_FADD %0, %1
    $d4 = COPY %2(s32)
...

---
name:            fadd_s64
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $e4, $e6

    ; CHECK-LABEL: name: fadd_s64
    ; CHECK: [[COPY:%[0-9]+]]:extdataregs = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:extdataregs = COPY $e6
    ; CHECK: [[ADDDF_eee:%[0-9]+]]:extdataregs = ADDDF_eee [[COPY]], [[COPY1]], implicit-def $psw, implicit $psw
    ; CHECK: $e4 = COPY [[ADDDF_eee]]
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s64) = G_FADD %0, %1
    $e4 = COPY %2(s64)
...

---
name:            fsub_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: fsub_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[SUBF_ddd:%[0-9]+]]:dataregs = SUBF_ddd [[COPY]], [[COPY1]], implicit-def $psw, implicit $psw
    ; CHECK: $d4 = COPY [[SUBF_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_FSUB %0, %1
    $d4 = COPY %2(s32)
...

---
name:            fsub_s64
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $e4, $e6

    ; CHECK-LABEL: name: fsub_s64
    ; CHECK: [[COPY:%[0-9]+]]:extdataregs = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:extdataregs = COPY $e6
    ; CHECK: [[SUBDF_eee:%[0-9]+]]:extdataregs = SUBDF_eee [[COPY]], [[COPY1]], implicit-def $psw, implicit $psw
    ; CHECK: $e4 = COPY [[SUBDF_eee]]
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s64) = G_FSUB %0, %1
    $e4 = COPY %2(s64)
...

---
name:            fmul_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: fmul_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[MULF_ddd:%[0-9]+]]:dataregs = MULF_ddd [[COPY]], [[COPY1]], implicit-def $psw, implicit $psw
    ; CHECK: $d4 = COPY [[MULF_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_FMUL %0, %1
    $d4 = COPY %2(s32)
...

---
name:            fmul_s64
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $e4, $e6

    ; CHECK-LABEL: name: fmul_s64
    ; CHECK: [[COPY:%[0-9]+]]:extdataregs = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:extdataregs = COPY $e6
    ; CHECK: [[MULDF_eee:%[0-9]+]]:extdataregs = MULDF_eee [[COPY]], [[COPY1]], implicit-def $psw, implicit $psw
    ; CHECK: $e4 = COPY [[MULDF_eee]]
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s64) = G_FMUL %0, %1
    $e4 = COPY %2(s64)
...

---
name:            fdiv_s32
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $d4, $d5

    ; CHECK-LABEL: name: fdiv_s32
    ; CHECK: [[COPY:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d5
    ; CHECK: [[DIVF_ddd:%[0-9]+]]:dataregs = DIVF_ddd [[COPY]], [[COPY1]], implicit-def $psw, implicit $psw
    ; CHECK: $d4 = COPY [[DIVF_ddd]]
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s32) = G_FDIV %0, %1
    $d4 = COPY %2(s32)
...

---
name:            fdiv_s64
legalized:       true
regBankSelected: true

registers:
  - { id: 0, class: dataregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: dataregbank }

body:             |
  bb.0:
    liveins: $e4, $e6

    ; CHECK-LABEL: name: fdiv_s64
    ; CHECK: [[COPY:%[0-9]+]]:extdataregs = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:extdataregs = COPY $e6
    ; CHECK: [[DIVDF_eee:%[0-9]+]]:extdataregs = DIVDF_eee [[COPY]], [[COPY1]], implicit-def $psw, implicit $psw
    ; CHECK: $e4 = COPY [[DIVDF_eee]]
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s64) = G_FDIV %0, %1
    $e4 = COPY %2(s64)
...
