# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_load_byte
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
  - { id: 5, class: dataregbank }
  - { id: 6, class: dataregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: dataregbank }
  - { id: 9, class: dataregbank }
  - { id: 10, class: dataregbank }
  - { id: 11, class: addrregbank }
  - { id: 12, class: addrregbank }
  - { id: 13, class: dataregbank }
  - { id: 14, class: dataregbank }
  - { id: 15, class: dataregbank }
  - { id: 16, class: addrregbank }
  - { id: 17, class: addrregbank }
  - { id: 18, class: dataregbank }
  - { id: 19, class: dataregbank }
  - { id: 20, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load_byte
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDB_dalc:%[0-9]+]]:dataregs = LDB_dalc [[COPY]], -32768 :: (load 1)
    ; CHECK: [[LDB_dalc1:%[0-9]+]]:dataregs = LDB_dalc [[COPY]], -32768 :: (load 1)
    ; CHECK: [[LDBU_dalc:%[0-9]+]]:dataregs = LDBU_dalc [[COPY]], -32768 :: (load 1)
    ; CHECK: $d2 = COPY [[LDB_dalc]]
    ; CHECK: $d3 = COPY [[LDB_dalc1]]
    ; CHECK: $d4 = COPY [[LDBU_dalc]]
    ; CHECK: [[LDB_dalc2:%[0-9]+]]:dataregs = LDB_dalc [[COPY]], 32767 :: (load 1)
    ; CHECK: [[LDB_dalc3:%[0-9]+]]:dataregs = LDB_dalc [[COPY]], 32767 :: (load 1)
    ; CHECK: [[LDBU_dalc1:%[0-9]+]]:dataregs = LDBU_dalc [[COPY]], 32767 :: (load 1)
    ; CHECK: $d2 = COPY [[LDB_dalc2]]
    ; CHECK: $d3 = COPY [[LDB_dalc3]]
    ; CHECK: $d4 = COPY [[LDBU_dalc1]]
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 32767
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY1:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY1]]
    ; CHECK: [[LDB_dalc4:%[0-9]+]]:dataregs = LDB_dalc [[ADDA_aaa]], 0 :: (load 1)
    ; CHECK: [[LDB_dalc5:%[0-9]+]]:dataregs = LDB_dalc [[ADDA_aaa]], 0 :: (load 1)
    ; CHECK: [[LDBU_dalc2:%[0-9]+]]:dataregs = LDBU_dalc [[ADDA_aaa]], 0 :: (load 1)
    ; CHECK: $d2 = COPY [[LDB_dalc4]]
    ; CHECK: $d3 = COPY [[LDB_dalc5]]
    ; CHECK: $d4 = COPY [[LDBU_dalc2]]
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 32768
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: [[LDB_dalc6:%[0-9]+]]:dataregs = LDB_dalc [[ADDA_aaa1]], 0 :: (load 1)
    ; CHECK: [[LDB_dalc7:%[0-9]+]]:dataregs = LDB_dalc [[ADDA_aaa1]], 0 :: (load 1)
    ; CHECK: [[LDBU_dalc3:%[0-9]+]]:dataregs = LDBU_dalc [[ADDA_aaa1]], 0 :: (load 1)
    ; CHECK: $d2 = COPY [[LDB_dalc6]]
    ; CHECK: $d3 = COPY [[LDB_dalc7]]
    ; CHECK: $d4 = COPY [[LDBU_dalc3]]
    %0(p0) = COPY $a4
    %1(s32) = G_CONSTANT i32 -32768
    %2(p0) = G_PTR_ADD %0(p0), %1(s32)
    %3(s32) = G_LOAD %2(p0) :: (load 1)
    %4(s32) = G_SEXTLOAD %2(p0) :: (load 1)
    %5(s32) = G_ZEXTLOAD %2(p0) :: (load 1)
    $d2 = COPY %3
    $d3 = COPY %4
    $d4 = COPY %5
    %6(s32) = G_CONSTANT i32 32767
    %7(p0) = G_PTR_ADD %0(p0), %6(s32)
    %8(s32) = G_LOAD %7(p0) :: (load 1)
    %9(s32) = G_SEXTLOAD %7(p0) :: (load 1)
    %10(s32) = G_ZEXTLOAD %7(p0) :: (load 1)
    $d2 = COPY %8
    $d3 = COPY %9
    $d4 = COPY %10
    %11(s32) = G_CONSTANT i32 -32769
    %12(p0) = G_PTR_ADD %0(p0), %11(s32)
    %13(s32) = G_LOAD %12(p0) :: (load 1)
    %14(s32) = G_SEXTLOAD %12(p0) :: (load 1)
    %15(s32) = G_ZEXTLOAD %12(p0) :: (load 1)
    $d2 = COPY %13
    $d3 = COPY %14
    $d4 = COPY %15
    %16(s32) = G_CONSTANT i32 32768
    %17(p0) = G_PTR_ADD %0(p0), %16(s32)
    %18(s32) = G_LOAD %17(p0) :: (load 1)
    %19(s32) = G_SEXTLOAD %17(p0) :: (load 1)
    %20(s32) = G_ZEXTLOAD %17(p0) :: (load 1)
    $d2 = COPY %18
    $d3 = COPY %19
    $d4 = COPY %20
...

---
name:            test_load_half
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
  - { id: 5, class: dataregbank }
  - { id: 6, class: dataregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: dataregbank }
  - { id: 9, class: dataregbank }
  - { id: 10, class: dataregbank }
  - { id: 11, class: addrregbank }
  - { id: 12, class: addrregbank }
  - { id: 13, class: dataregbank }
  - { id: 14, class: dataregbank }
  - { id: 15, class: dataregbank }
  - { id: 16, class: addrregbank }
  - { id: 17, class: addrregbank }
  - { id: 18, class: dataregbank }
  - { id: 19, class: dataregbank }
  - { id: 20, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load_half
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDH_dalc:%[0-9]+]]:dataregs = LDH_dalc [[COPY]], -32768 :: (load 2)
    ; CHECK: [[LDH_dalc1:%[0-9]+]]:dataregs = LDH_dalc [[COPY]], -32768 :: (load 2)
    ; CHECK: [[LDHU_dalc:%[0-9]+]]:dataregs = LDHU_dalc [[COPY]], -32768 :: (load 2)
    ; CHECK: $d2 = COPY [[LDH_dalc]]
    ; CHECK: $d3 = COPY [[LDH_dalc1]]
    ; CHECK: $d4 = COPY [[LDHU_dalc]]
    ; CHECK: [[LDH_dalc2:%[0-9]+]]:dataregs = LDH_dalc [[COPY]], 32767 :: (load 2)
    ; CHECK: [[LDH_dalc3:%[0-9]+]]:dataregs = LDH_dalc [[COPY]], 32767 :: (load 2)
    ; CHECK: [[LDHU_dalc1:%[0-9]+]]:dataregs = LDHU_dalc [[COPY]], 32767 :: (load 2)
    ; CHECK: $d2 = COPY [[LDH_dalc2]]
    ; CHECK: $d3 = COPY [[LDH_dalc3]]
    ; CHECK: $d4 = COPY [[LDHU_dalc1]]
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 32767
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY1:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY1]]
    ; CHECK: [[LDH_dalc4:%[0-9]+]]:dataregs = LDH_dalc [[ADDA_aaa]], 0 :: (load 2)
    ; CHECK: [[LDH_dalc5:%[0-9]+]]:dataregs = LDH_dalc [[ADDA_aaa]], 0 :: (load 2)
    ; CHECK: [[LDHU_dalc2:%[0-9]+]]:dataregs = LDHU_dalc [[ADDA_aaa]], 0 :: (load 2)
    ; CHECK: $d2 = COPY [[LDH_dalc4]]
    ; CHECK: $d3 = COPY [[LDH_dalc5]]
    ; CHECK: $d4 = COPY [[LDHU_dalc2]]
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 32768
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: [[LDH_dalc6:%[0-9]+]]:dataregs = LDH_dalc [[ADDA_aaa1]], 0 :: (load 2)
    ; CHECK: [[LDH_dalc7:%[0-9]+]]:dataregs = LDH_dalc [[ADDA_aaa1]], 0 :: (load 2)
    ; CHECK: [[LDHU_dalc3:%[0-9]+]]:dataregs = LDHU_dalc [[ADDA_aaa1]], 0 :: (load 2)
    ; CHECK: $d2 = COPY [[LDH_dalc6]]
    ; CHECK: $d3 = COPY [[LDH_dalc7]]
    ; CHECK: $d4 = COPY [[LDHU_dalc3]]
    %0(p0) = COPY $a4
    %1(s32) = G_CONSTANT i32 -32768
    %2(p0) = G_PTR_ADD %0(p0), %1(s32)
    %3(s32) = G_LOAD %2(p0) :: (load 2)
    %4(s32) = G_SEXTLOAD %2(p0) :: (load 2)
    %5(s32) = G_ZEXTLOAD %2(p0) :: (load 2)
    $d2 = COPY %3
    $d3 = COPY %4
    $d4 = COPY %5
    %6(s32) = G_CONSTANT i32 32767
    %7(p0) = G_PTR_ADD %0(p0), %6(s32)
    %8(s32) = G_LOAD %7(p0) :: (load 2)
    %9(s32) = G_SEXTLOAD %7(p0) :: (load 2)
    %10(s32) = G_ZEXTLOAD %7(p0) :: (load 2)
    $d2 = COPY %8
    $d3 = COPY %9
    $d4 = COPY %10
    %11(s32) = G_CONSTANT i32 -32769
    %12(p0) = G_PTR_ADD %0(p0), %11(s32)
    %13(s32) = G_LOAD %12(p0) :: (load 2)
    %14(s32) = G_SEXTLOAD %12(p0) :: (load 2)
    %15(s32) = G_ZEXTLOAD %12(p0) :: (load 2)
    $d2 = COPY %13
    $d3 = COPY %14
    $d4 = COPY %15
    %16(s32) = G_CONSTANT i32 32768
    %17(p0) = G_PTR_ADD %0(p0), %16(s32)
    %18(s32) = G_LOAD %17(p0) :: (load 2)
    %19(s32) = G_SEXTLOAD %17(p0) :: (load 2)
    %20(s32) = G_ZEXTLOAD %17(p0) :: (load 2)
    $d2 = COPY %18
    $d3 = COPY %19
    $d4 = COPY %20
...
---
name:            test_load_word
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: dataregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: dataregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: dataregbank }
  - { id: 10, class: addrregbank }
  - { id: 11, class: addrregbank }
  - { id: 12, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load_word
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDW_dalc:%[0-9]+]]:dataregs = LDW_dalc [[COPY]], -32768 :: (load 4)
    ; CHECK: $d2 = COPY [[LDW_dalc]]
    ; CHECK: [[LDW_dalc1:%[0-9]+]]:dataregs = LDW_dalc [[COPY]], 32767 :: (load 4)
    ; CHECK: $d2 = COPY [[LDW_dalc1]]
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 32767
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY1:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY1]]
    ; CHECK: [[LDW_dalc2:%[0-9]+]]:dataregs = LDW_dalc [[ADDA_aaa]], 0 :: (load 4)
    ; CHECK: $d2 = COPY [[LDW_dalc2]]
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 32768
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: [[LDW_dalc3:%[0-9]+]]:dataregs = LDW_dalc [[ADDA_aaa1]], 0 :: (load 4)
    ; CHECK: $d2 = COPY [[LDW_dalc3]]
    %0(p0) = COPY $a4
    %1(s32) = G_CONSTANT i32 -32768
    %2(p0) = G_PTR_ADD %0(p0), %1(s32)
    %3(s32) = G_LOAD %2(p0) :: (load 4)
    $d2 = COPY %3
    %4(s32) = G_CONSTANT i32 32767
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    %6(s32) = G_LOAD %5(p0) :: (load 4)
    $d2 = COPY %6
    %7(s32) = G_CONSTANT i32 -32769
    %8(p0) = G_PTR_ADD %0(p0), %7(s32)
    %9(s32) = G_LOAD %8(p0) :: (load 4)
    $d2 = COPY %9
    %10(s32) = G_CONSTANT i32 32768
    %11(p0) = G_PTR_ADD %0(p0), %10(s32)
    %12(s32) = G_LOAD %11(p0) :: (load 4)
    $d2 = COPY %12
...
---
name:            test_load_ptr
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: dataregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: addrregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: addrregbank }
  - { id: 10, class: addrregbank }
  - { id: 11, class: addrregbank }
  - { id: 12, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load_ptr
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDA_aalc:%[0-9]+]]:addrregs = LDA_aalc [[COPY]], -32768 :: (load 4)
    ; CHECK: $a2 = COPY [[LDA_aalc]]
    ; CHECK: [[LDA_aalc1:%[0-9]+]]:addrregs = LDA_aalc [[COPY]], 32767 :: (load 4)
    ; CHECK: $a2 = COPY [[LDA_aalc1]]
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 32767
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY1:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY1]]
    ; CHECK: [[LDA_aalc2:%[0-9]+]]:addrregs = LDA_aalc [[ADDA_aaa]], 0 :: (load 4)
    ; CHECK: $a2 = COPY [[LDA_aalc2]]
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 32768
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: [[LDA_aalc3:%[0-9]+]]:addrregs = LDA_aalc [[ADDA_aaa1]], 0 :: (load 4)
    ; CHECK: $a2 = COPY [[LDA_aalc3]]
    %0(p0) = COPY $a4
    %1(s32) = G_CONSTANT i32 -32768
    %2(p0) = G_PTR_ADD %0(p0), %1(s32)
    %3(p0) = G_LOAD %2(p0) :: (load 4)
    $a2 = COPY %3
    %4(s32) = G_CONSTANT i32 32767
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    %6(p0) = G_LOAD %5(p0) :: (load 4)
    $a2 = COPY %6
    %7(s32) = G_CONSTANT i32 -32769
    %8(p0) = G_PTR_ADD %0(p0), %7(s32)
    %9(p0) = G_LOAD %8(p0) :: (load 4)
    $a2 = COPY %9
    %10(s32) = G_CONSTANT i32 32768
    %11(p0) = G_PTR_ADD %0(p0), %10(s32)
    %12(p0) = G_LOAD %11(p0) :: (load 4)
    $a2 = COPY %12
...

---
name:            test_load_double
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: addrregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: dataregbank }
  - { id: 4, class: addrregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: dataregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: dataregbank }
  - { id: 10, class: addrregbank }
  - { id: 11, class: addrregbank }
  - { id: 12, class: dataregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load_double
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDD_eac:%[0-9]+]]:extdataregs = LDD_eac [[COPY]], -512 :: (load 8)
    ; CHECK: $e2 = COPY [[LDD_eac]]
    ; CHECK: [[LDD_eac1:%[0-9]+]]:extdataregs = LDD_eac [[COPY]], 511 :: (load 8)
    ; CHECK: $e2 = COPY [[LDD_eac1]]
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 65023
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY1:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY1]]
    ; CHECK: [[LDD_eac2:%[0-9]+]]:extdataregs = LDD_eac [[ADDA_aaa]], 0 :: (load 8)
    ; CHECK: $e2 = COPY [[LDD_eac2]]
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 512
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: [[LDD_eac3:%[0-9]+]]:extdataregs = LDD_eac [[ADDA_aaa1]], 0 :: (load 8)
    ; CHECK: $e2 = COPY [[LDD_eac3]]
    %0(p0) = COPY $a4
    %1(s32) = G_CONSTANT i32 -512
    %2(p0) = G_PTR_ADD %0(p0), %1(s32)
    %3(s64) = G_LOAD %2(p0) :: (load 8)
    $e2 = COPY %3
    %4(s32) = G_CONSTANT i32 511
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    %6(s64) = G_LOAD %5(p0) :: (load 8)
    $e2 = COPY %6
    %7(s32) = G_CONSTANT i32 -513
    %8(p0) = G_PTR_ADD %0(p0), %7(s32)
    %9(s64) = G_LOAD %8(p0) :: (load 8)
    $e2 = COPY %9
    %10(s32) = G_CONSTANT i32 512
    %11(p0) = G_PTR_ADD %0(p0), %10(s32)
    %12(s64) = G_LOAD %11(p0) :: (load 8)
    $e2 = COPY %12
...

---
name:            test_load_double_ptr
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: addrregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: addrregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: addrregbank }
  - { id: 10, class: addrregbank }
  - { id: 11, class: addrregbank }
  - { id: 12, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_load_double_ptr
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[LDDA_pac:%[0-9]+]]:extaddrregs = LDDA_pac [[COPY]], -512 :: (load 8)
    ; CHECK: $p2 = COPY [[LDDA_pac]]
    ; CHECK: [[LDDA_pac1:%[0-9]+]]:extaddrregs = LDDA_pac [[COPY]], 511 :: (load 8)
    ; CHECK: $p2 = COPY [[LDDA_pac1]]
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 65023
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY1:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY1]]
    ; CHECK: [[LDDA_pac2:%[0-9]+]]:extaddrregs = LDDA_pac [[ADDA_aaa]], 0 :: (load 8)
    ; CHECK: $p2 = COPY [[LDDA_pac2]]
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 512
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: [[LDDA_pac3:%[0-9]+]]:extaddrregs = LDDA_pac [[ADDA_aaa1]], 0 :: (load 8)
    ; CHECK: $p2 = COPY [[LDDA_pac3]]
    %0(p0) = COPY $a4
    %1(s32) = G_CONSTANT i32 -512
    %2(p0) = G_PTR_ADD %0(p0), %1(s32)
    %3(s64) = G_LOAD %2(p0) :: (load 8)
    $p2 = COPY %3
    %4(s32) = G_CONSTANT i32 511
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    %6(s64) = G_LOAD %5(p0) :: (load 8)
    $p2 = COPY %6
    %7(s32) = G_CONSTANT i32 -513
    %8(p0) = G_PTR_ADD %0(p0), %7(s32)
    %9(s64) = G_LOAD %8(p0) :: (load 8)
    $p2 = COPY %9
    %10(s32) = G_CONSTANT i32 512
    %11(p0) = G_PTR_ADD %0(p0), %10(s32)
    %12(s64) = G_LOAD %11(p0) :: (load 8)
    $p2 = COPY %12
...

---
name:            test_store_byte
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: addrregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store_byte
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: STB_alcd [[COPY]], -32768, [[COPY1]] :: (store 1)
    ; CHECK: STB_alcd [[COPY]], 32767, [[COPY1]] :: (store 1)
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 32767
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: STB_alcd [[ADDA_aaa]], 0, [[COPY1]] :: (store 1)
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 32768
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY3:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY3]]
    ; CHECK: STB_alcd [[ADDA_aaa1]], 0, [[COPY1]] :: (store 1)
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    %2(s32) = G_CONSTANT i32 -32768
    %3(p0) = G_PTR_ADD %0(p0), %2(s32)
    G_STORE %1(s32), %3(p0) :: (store 1)
    %4(s32) = G_CONSTANT i32 32767
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    G_STORE %1(s32), %5(p0) :: (store 1)
    %6(s32) = G_CONSTANT i32 -32769
    %7(p0) = G_PTR_ADD %0(p0), %6(s32)
    G_STORE %1(s32), %7(p0) :: (store 1)
    %8(s32) = G_CONSTANT i32 32768
    %9(p0) = G_PTR_ADD %0(p0), %8(s32)
    G_STORE %1(s32), %9(p0) :: (store 1)
...

---
name:            test_store_half
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: addrregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store_half
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: STH_alcd [[COPY]], -32768, [[COPY1]] :: (store 2)
    ; CHECK: STH_alcd [[COPY]], 32767, [[COPY1]] :: (store 2)
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 32767
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: STH_alcd [[ADDA_aaa]], 0, [[COPY1]] :: (store 2)
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 32768
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY3:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY3]]
    ; CHECK: STH_alcd [[ADDA_aaa1]], 0, [[COPY1]] :: (store 2)
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    %2(s32) = G_CONSTANT i32 -32768
    %3(p0) = G_PTR_ADD %0(p0), %2(s32)
    G_STORE %1(s32), %3(p0) :: (store 2)
    %4(s32) = G_CONSTANT i32 32767
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    G_STORE %1(s32), %5(p0) :: (store 2)
    %6(s32) = G_CONSTANT i32 -32769
    %7(p0) = G_PTR_ADD %0(p0), %6(s32)
    G_STORE %1(s32), %7(p0) :: (store 2)
    %8(s32) = G_CONSTANT i32 32768
    %9(p0) = G_PTR_ADD %0(p0), %8(s32)
    G_STORE %1(s32), %9(p0) :: (store 2)
...

---
name:            test_store_word
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: addrregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store_word
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:dataregs = COPY $d4
    ; CHECK: STW_alcd [[COPY]], -32768, [[COPY1]] :: (store 4)
    ; CHECK: STW_alcd [[COPY]], 32767, [[COPY1]] :: (store 4)
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 32767
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: STW_alcd [[ADDA_aaa]], 0, [[COPY1]] :: (store 4)
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 32768
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY3:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY3]]
    ; CHECK: STW_alcd [[ADDA_aaa1]], 0, [[COPY1]] :: (store 4)
    %0(p0) = COPY $a4
    %1(s32) = COPY $d4
    %2(s32) = G_CONSTANT i32 -32768
    %3(p0) = G_PTR_ADD %0(p0), %2(s32)
    G_STORE %1(s32), %3(p0) :: (store 4)
    %4(s32) = G_CONSTANT i32 32767
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    G_STORE %1(s32), %5(p0) :: (store 4)
    %6(s32) = G_CONSTANT i32 -32769
    %7(p0) = G_PTR_ADD %0(p0), %6(s32)
    G_STORE %1(s32), %7(p0) :: (store 4)
    %8(s32) = G_CONSTANT i32 32768
    %9(p0) = G_PTR_ADD %0(p0), %8(s32)
    G_STORE %1(s32), %9(p0) :: (store 4)
...

---
name:            test_store_ptr
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: addrregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: addrregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store_ptr
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:addrregs = COPY $a5
    ; CHECK: STA_alca [[COPY]], -32768, [[COPY1]] :: (store 4)
    ; CHECK: STA_alca [[COPY]], 32767, [[COPY1]] :: (store 4)
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 32767
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: STA_alca [[ADDA_aaa]], 0, [[COPY1]] :: (store 4)
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 32768
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY3:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY3]]
    ; CHECK: STA_alca [[ADDA_aaa1]], 0, [[COPY1]] :: (store 4)
    %0(p0) = COPY $a4
    %1(p0) = COPY $a5
    %2(s32) = G_CONSTANT i32 -32768
    %3(p0) = G_PTR_ADD %0(p0), %2(s32)
    G_STORE %1(p0), %3(p0) :: (store 4)
    %4(s32) = G_CONSTANT i32 32767
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    G_STORE %1(p0), %5(p0) :: (store 4)
    %6(s32) = G_CONSTANT i32 -32769
    %7(p0) = G_PTR_ADD %0(p0), %6(s32)
    G_STORE %1(p0), %7(p0) :: (store 4)
    %8(s32) = G_CONSTANT i32 32768
    %9(p0) = G_PTR_ADD %0(p0), %8(s32)
    G_STORE %1(p0), %9(p0) :: (store 4)
...

---
name:            test_store_double
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: dataregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: addrregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store_double
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:extdataregs = COPY $e4
    ; CHECK: STD_ace [[COPY]], -512, [[COPY1]] :: (store 8)
    ; CHECK: STD_ace [[COPY]], 511, [[COPY1]] :: (store 8)
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 65023
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: STD_ace [[ADDA_aaa]], 0, [[COPY1]] :: (store 8)
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 512
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY3:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY3]]
    ; CHECK: STD_ace [[ADDA_aaa1]], 0, [[COPY1]] :: (store 8)
    %0(p0) = COPY $a4
    %1(s64) = COPY $e4
    %2(s32) = G_CONSTANT i32 -512
    %3(p0) = G_PTR_ADD %0(p0), %2(s32)
    G_STORE %1(s64), %3(p0) :: (store 8)
    %4(s32) = G_CONSTANT i32 511
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    G_STORE %1(s64), %5(p0) :: (store 8)
    %6(s32) = G_CONSTANT i32 -513
    %7(p0) = G_PTR_ADD %0(p0), %6(s32)
    G_STORE %1(s64), %7(p0) :: (store 8)
    %8(s32) = G_CONSTANT i32 512
    %9(p0) = G_PTR_ADD %0(p0), %8(s32)
    G_STORE %1(s64), %9(p0) :: (store 8)
...

---
name:            test_store_double_ptr
legalized:       true
regBankSelected: true
registers:
  - { id: 0, class: addrregbank }
  - { id: 1, class: addrregbank }
  - { id: 2, class: addrregbank }
  - { id: 3, class: addrregbank }
  - { id: 4, class: addrregbank }
  - { id: 5, class: addrregbank }
  - { id: 6, class: addrregbank }
  - { id: 7, class: addrregbank }
  - { id: 8, class: addrregbank }
  - { id: 9, class: addrregbank }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_store_double_ptr
    ; CHECK: [[COPY:%[0-9]+]]:addrregs = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:extaddrregs = COPY $p4
    ; CHECK: STDA_acp [[COPY]], -512, [[COPY1]] :: (store 8)
    ; CHECK: STDA_acp [[COPY]], 511, [[COPY1]] :: (store 8)
    ; CHECK: [[MOVU_dc:%[0-9]+]]:dataregs = MOVU_dc 65023
    ; CHECK: [[ADDIH_ddc:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc]], 65535, implicit-def $psw
    ; CHECK: [[COPY2:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc]]
    ; CHECK: [[ADDA_aaa:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY2]]
    ; CHECK: STDA_acp [[ADDA_aaa]], 0, [[COPY1]] :: (store 8)
    ; CHECK: [[MOVU_dc1:%[0-9]+]]:dataregs = MOVU_dc 512
    ; CHECK: [[ADDIH_ddc1:%[0-9]+]]:dataregs = ADDIH_ddc [[MOVU_dc1]], 0, implicit-def $psw
    ; CHECK: [[COPY3:%[0-9]+]]:addrregs = COPY [[ADDIH_ddc1]]
    ; CHECK: [[ADDA_aaa1:%[0-9]+]]:addrregs = ADDA_aaa [[COPY]], [[COPY3]]
    ; CHECK: STDA_acp [[ADDA_aaa1]], 0, [[COPY1]] :: (store 8)
    %0(p0) = COPY $a4
    %1(s64) = COPY $p4
    %2(s32) = G_CONSTANT i32 -512
    %3(p0) = G_PTR_ADD %0(p0), %2(s32)
    G_STORE %1(s64), %3(p0) :: (store 8)
    %4(s32) = G_CONSTANT i32 511
    %5(p0) = G_PTR_ADD %0(p0), %4(s32)
    G_STORE %1(s64), %5(p0) :: (store 8)
    %6(s32) = G_CONSTANT i32 -513
    %7(p0) = G_PTR_ADD %0(p0), %6(s32)
    G_STORE %1(s64), %7(p0) :: (store 8)
    %8(s32) = G_CONSTANT i32 512
    %9(p0) = G_PTR_ADD %0(p0), %8(s32)
    G_STORE %1(s64), %9(p0) :: (store 8)
...
