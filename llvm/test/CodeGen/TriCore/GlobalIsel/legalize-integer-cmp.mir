# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s

# No need to test G_ICMP with result type != s1 as this cannot be encountered in the wild. AArch64 also does not support it.
---
name:            test_icmp_p0
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_icmp_p0
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $a4
    ; CHECK: [[COPY1:%[0-9]+]]:_(p0) = COPY $a5
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[COPY]](p0), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    %0:_(p0) = COPY $a4
    %1:_(p0) = COPY $a5
    %2:_(s1) = G_ICMP intpred(ult), %0(p0), %1
    %3:_(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...

---
name:            test_icmp_s16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_icmp_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s32)
    ; CHECK: [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[TRUNC]](s16)
    ; CHECK: [[SEXT1:%[0-9]+]]:_(s32) = G_SEXT [[TRUNC1]](s16)
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[SEXT]](s32), [[SEXT1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = COPY $d5
    %2:_(s16) = G_TRUNC %0(s32)
    %3:_(s16) = G_TRUNC %1(s32)
    %4:_(s1) = G_ICMP intpred(slt), %2(s16), %3
    %5:_(s32) = G_ZEXT %4(s1)
    $d2 = COPY %5(s32)
...

---
name:            test_icmp_s32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_icmp_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    %0:_(s32) = COPY $d4
    %1:_(s32) = COPY $d5
    %2:_(s1) = G_ICMP intpred(slt), %0(s32), %1
    %3:_(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...

---
name:            test_icmp_s64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_icmp_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](s64)
    ; CHECK: [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY1]](s64)
    ; CHECK: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[UV1]](s32), [[UV3]]
    ; CHECK: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[UV1]](s32), [[UV3]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s1) = G_TRUNC [[ICMP1]](s32)
    ; CHECK: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[UV]](s32), [[UV2]]
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[ICMP2]](s32)
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; CHECK: [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[TRUNC]](s1), [[COPY2]], [[COPY3]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY4:%[0-9]+]]:_(s32) = COPY [[SELECT]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    %0:_(s64) = COPY $e4
    %1:_(s64) = COPY $e6
    %2:_(s1) = G_ICMP intpred(slt), %0(s64), %1
    %3:_(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
