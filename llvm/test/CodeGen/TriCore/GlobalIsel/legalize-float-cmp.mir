# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=tricore -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s
# RUN: llc -O0 -mtriple=tricore -mattr=-tc18 -global-isel -run-pass=legalizer -verify-machineinstrs %s -o - \
# RUN: | FileCheck -check-prefixes=NOTC18OPS %s

---
name:            test_fcmp_true_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_true_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(true), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_true_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(true), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(true), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_false_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_false_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(false), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_false_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(false), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(false), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_oeq_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_oeq_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(oeq), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_oeq_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(oeq), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(oeq), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ogt_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ogt_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ogt), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ogt_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ogt), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(ogt), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_oge_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_oge_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(oge), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_oge_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(oge), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(oge), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_olt_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_olt_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(olt), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_olt_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(olt), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(olt), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ole_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ole_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ole), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ole_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ole), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(ole), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ord_s32
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ord_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ord), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ord_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ord), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(ord), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ugt_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ugt_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ugt), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ugt_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ugt), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(ugt), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_uge_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_uge_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(uge), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_uge_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(uge), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(uge), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ult_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ult_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ult), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ult_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ult), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(ult), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ule_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ule_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ule), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ule_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ule), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(ule), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_une_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_une_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(une), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_une_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(une), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(une), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_uno_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_uno_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(uno), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_uno_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(uno), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(uno), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_one_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_one_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(one), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_one_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(one), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(one), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ueq_s32
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ueq_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ueq), [[COPY]](s32), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ueq_s32
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ueq), [[COPY]](s32), [[COPY1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s1) = G_FCMP floatpred(ueq), %0(s32), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...

####### Double comparisons #############

---
name:            test_fcmp_true_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_true_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(true), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_true_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[C]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(true), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_false_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_false_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(false), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_false_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[C]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(false), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_oeq_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:

    ; CHECK-LABEL: name: test_fcmp_oeq_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(oeq), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_oeq_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__eqdf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(oeq), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ogt_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ogt_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ogt), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ogt_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__gtdf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(ogt), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_oge_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_oge_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(oge), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_oge_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__gedf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(oge), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_olt_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_olt_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(olt), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_olt_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__ltdf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(olt), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ole_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ole_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ole), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ole_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__ledf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(ole), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ord_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ord_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ord), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ord_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__unorddf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(ord), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ugt_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ugt_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ugt), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ugt_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__ledf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(ugt), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_uge_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_uge_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(uge), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_uge_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__ltdf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sge), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(uge), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ult_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ult_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ult), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ult_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__gedf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(ult), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ule_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ule_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ule), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ule_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__gtdf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sle), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(ule), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_une_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_une_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(une), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_une_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__nedf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(une), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_uno_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_uno_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(uno), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_uno_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__unorddf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY [[ICMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(uno), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_one_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_one_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(one), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_one_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__gtdf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(sgt), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__ltdf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(slt), [[COPY3]](s32), [[C1]]
    ; NOTC18OPS: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[ICMP1]]
    ; NOTC18OPS: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY4:%[0-9]+]]:_(s32) = COPY [[OR]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C2]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(one), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...
---
name:            test_fcmp_ueq_s64
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }

body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_ueq_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(ueq), [[COPY]](s64), [[COPY1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_ueq_s64
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s64) = COPY $e4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s64) = COPY $e6
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__eqdf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[COPY2]](s32), [[C]]
    ; NOTC18OPS: ADJCALLSTACKDOWN 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: $e4 = COPY [[COPY]](s64)
    ; NOTC18OPS: $e6 = COPY [[COPY1]](s64)
    ; NOTC18OPS: CALL &__unorddf2, csr_tricore_uppercontext, implicit-def $a11, implicit $psw, implicit $e4, implicit $e6, implicit-def $d2
    ; NOTC18OPS: [[COPY3:%[0-9]+]]:_(s32) = COPY $d2
    ; NOTC18OPS: ADJCALLSTACKUP 0, 0, implicit-def $a10, implicit $a10
    ; NOTC18OPS: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; NOTC18OPS: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[COPY3]](s32), [[C1]]
    ; NOTC18OPS: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP]], [[ICMP1]]
    ; NOTC18OPS: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY4:%[0-9]+]]:_(s32) = COPY [[OR]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY4]], [[C2]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s64) = COPY $e4
    %1(s64) = COPY $e6
    %2(s1) = G_FCMP floatpred(ueq), %0(s64), %1
    %3(s32) = G_ZEXT %2(s1)
    $d2 = COPY %3(s32)
...

############ Half precision floats ###########
---
name:            test_fcmp_oeq_s16
legalized:       false
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_fcmp_oeq_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s32)
    ; CHECK: [[FPEXT:%[0-9]+]]:_(s32) = G_FPEXT [[TRUNC]](s16)
    ; CHECK: [[FPEXT1:%[0-9]+]]:_(s32) = G_FPEXT [[TRUNC1]](s16)
    ; CHECK: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(oeq), [[FPEXT]](s32), [[FPEXT1]]
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: $d2 = COPY [[AND]](s32)
    ; NOTC18OPS-LABEL: name: test_fcmp_oeq_s16
    ; NOTC18OPS: [[COPY:%[0-9]+]]:_(s32) = COPY $d4
    ; NOTC18OPS: [[COPY1:%[0-9]+]]:_(s32) = COPY $d5
    ; NOTC18OPS: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[COPY]](s32)
    ; NOTC18OPS: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[COPY1]](s32)
    ; NOTC18OPS: [[FPEXT:%[0-9]+]]:_(s32) = G_FPEXT [[TRUNC]](s16)
    ; NOTC18OPS: [[FPEXT1:%[0-9]+]]:_(s32) = G_FPEXT [[TRUNC1]](s16)
    ; NOTC18OPS: [[FCMP:%[0-9]+]]:_(s32) = G_FCMP floatpred(oeq), [[FPEXT]](s32), [[FPEXT1]]
    ; NOTC18OPS: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; NOTC18OPS: [[COPY2:%[0-9]+]]:_(s32) = COPY [[FCMP]](s32)
    ; NOTC18OPS: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; NOTC18OPS: $d2 = COPY [[AND]](s32)
    %0(s32) = COPY $d4
    %1(s32) = COPY $d5
    %2(s16) = G_TRUNC %0(s32)
    %3(s16) = G_TRUNC %1(s32)
    %4(s1) = G_FCMP floatpred(oeq), %2(s16), %3
    %5(s32) = G_ZEXT %4(s1)
    $d2 = COPY %5(s32)
...
